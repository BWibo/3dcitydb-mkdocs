{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#welcome-to-the-brand-new-3d-city-database-v5-documentation","title":"Welcome to the brand new 3D City Database <code>v5</code> documentation!","text":"<p>4.0.0</p> <p>The 3D City Database (3DCityDB) is a free and open source package consisting of a database schema and a set of software tools to import, export, manage, analyse, and visualize virtual 3D city models on top of a spatial database system. This user manual provides the documentation of the 3DCityDB <code>v5</code> and its components.</p> <p>The content of this documentation is all new! If you encounter a mistake, miss some content, or for any other input, please get in touch on GitHub discussions. We are happy for any feedback we can use to improve the documentation.</p> <p></p>"},{"location":"#content-overview","title":"Content overview","text":"<ul> <li> <p> Getting started</p> <p>3DCityDB and tools setup, get up and running with Docker in minutes</p> <p> First steps</p> </li> <li> <p> Downloads</p> <p>Download 3DCityDB and tools</p> <p> Get the software</p> </li> <li> <p> Compatibility</p> <p>Compatibility of CityGML versions and 3DCityDB tools, data migration</p> <p> Compatibility and data migration</p> </li> <li> <p> 3D City Database</p> <p>3DCityDB's relational schema explained, Docker usage</p> <p> 3D City Database</p> </li> <li> <p> Data management</p> <p>Connect to a 3DCityDB, import and export data, and run database operations</p> <p> citydb-tool</p> </li> <li> <p> About this documentation</p> <p>How to quickly navigate, search and, contribute to this docs</p> <p> Usage and contribution</p> </li> <li> <p> Partners</p> <p>Get to know the people and organizations behind 3DCityDB</p> <p> Partners</p> </li> </ul>"},{"location":"compatibility/","title":"Compatibility and data migration","text":"<p>CityGML 3.0 was officially released as a standard by the Open Geospatial Consortium (OGC) in September 2021. It is an evolution of CityGML 2.0 and 1.0 and introduces significant modifications and improvements to the data model. These major changes led to a complete re-implementation of 3D City Database (3DCityDB) and the toolset that comes with it. Compared to 3DCityDB <code>v4</code>, <code>v5</code> features a substantially simplified database schema. CityGML 3.0 and its encodings are supported only by 3DCityDB <code>v5</code>.</p> <p>This page provides information on the compatibility of CityGML versions and their encodings with different 3DCityDB versions, along with the tools available for each database version. The table below offers a compatibility overview, and we also provide guidance on migrating between CityGML versions and between 3DCityDB versions <code>v4</code> and <code>v5</code>.</p>","tags":["3dcitydb","citydb-tool","importer-exporter","3d-web-map-client","wfs","3dcitydb v4","3dcitydb v5","CityGML 1.0","CityGML 2.0","CityGML 3.0","CityJSON 1.0","CityJSON 2.0","data migration","database migration","legacy support"]},{"location":"compatibility/#compatibility-overview","title":"Compatibility overview","text":"<p>The following table outlines the compatibility between 3DCityDB versions, citydb-tool versions (including the legacy Importer-Exporter), and the supported data formats and their versions. The 3DCityDB <code>v3</code> is included for reference but is no longer recommended for production use.</p> 3DCityDB version Tool version Supported standards and encodings Supported standard/encoding versions 5.0.x citydb-tool 1.0.x CityGML, CityJSON CityGML: 3.0, 2.0, 1.0CityJSON: 2.0, 1.1, 1.0 4.x Importer-Exporter 5.x CityGML, CityJSON CityGML: 2.0, 1.0CityJSON: 1.0 3.x Importer-Exporter 4.3 and higher CityGML, CityJSON CityGML: 2.0, 1.0CityJSON: 1.0 <p>Backwards compatibility</p> <p>All previous 3DCityDB versions and tools remain fully usable with the CityGML versions they support. However, to benefit from CityGML 3.0, the simplified database schema, and new features of 3DCityDB <code>v5</code>, a database migration to the 3DCityDB <code>v5</code> is required.</p> <p>Currently, only citydb-tool is compatible with 3DCityDB <code>v5</code>. If you want to use legacy 3DCityDB <code>v4</code> tools such as the Importer/Exporter, or the Web Feature Service (WFS), your data must first be imported into a 3DCityDB <code>v4</code>.</p>","tags":["3dcitydb","citydb-tool","importer-exporter","3d-web-map-client","wfs","3dcitydb v4","3dcitydb v5","CityGML 1.0","CityGML 2.0","CityGML 3.0","CityJSON 1.0","CityJSON 2.0","data migration","database migration","legacy support"]},{"location":"compatibility/#citygml-and-cityjson-support-in-3dcitydb-v5","title":"CityGML and CityJSON support in 3DCityDB <code>v5</code>","text":"<p>3DCityDB <code>v5</code> supports all versions of CityGML. Although the database schema is designed with CityGML 3.0 in mind, 3DCityDB <code>v5</code> remains backwards compatible, offering full support for CityGML 2.0 and 1.0. Data can be managed without loss in 3DCityDB <code>v5</code> as long as the same CityGML version is used for both import and export. Changing the CityGML version between import and export may result in data loss, as CityGML 3.0 is not fully backwards compatible with versions 2.0 and 1.0.</p> <p>For example, when importing CityGML 2.0 data into 3DCityDB <code>v5</code>, you can be confident that it can be exported back as CityGML 2.0 without loss. However, exporting to CityGML 3.0 might lead to data loss due to differences in data models and supported features between the two versions. The citydb-tool automatically converts data between versions where possible and offers additional options to handle differences on-the-fly when automatic conversion is not feasible (see below).</p> <p>The same applies to CityJSON: Data can be managed without loss when using the same CityJSON version for both import and export. However, changing versions may result in data loss unless automatic conversion is possible.</p> <p>Note</p> <p>Note that CityJSON is a JSON-based encoding of a subset of the CityGML data model. As such, it is less expressive than the GML/XML encoding of CityGML, which may also contribute to data loss when switching between CityJSON and GML/XML.</p>","tags":["3dcitydb","citydb-tool","importer-exporter","3d-web-map-client","wfs","3dcitydb v4","3dcitydb v5","CityGML 1.0","CityGML 2.0","CityGML 3.0","CityJSON 1.0","CityJSON 2.0","data migration","database migration","legacy support"]},{"location":"compatibility/#migrate-citygml-or-cityjson-data","title":"Migrate CityGML or CityJSON data","text":"<p>To convert CityGML data between versions and encodings, we recommend using 3DCityDB <code>v5</code> and citydb-tool. The workflow is the same for all version up- or downgrades, or encoding changes.</p> <ol> <li>Create a 3DCityDB <code>v5</code> instance.</li> <li>Import your CityGML or CityJSON encoded dataset.</li> <li>Export your CityGML dataset in the desired encoding and version.</li> </ol> <p>For both CityGML and CityJSON encoding, the citydb-tool <code>-v</code> option can be used to specify the desired target version for the export.</p> Encoding Option Description Default CityGML<code>xml</code> <code>-v</code>, <code>--citygml-version=&lt;version&gt;</code> Specify the CityGML version for the export: 3.0, 2.0, or 1.0. 3.0 CityJSON<code>json</code> <code>-v</code>, <code>--cityjson-version=&lt;version&gt;</code> Specify the CityJSON version for the export: 2.0, 1.1, or 1.0. 2.0","tags":["3dcitydb","citydb-tool","importer-exporter","3d-web-map-client","wfs","3dcitydb v4","3dcitydb v5","CityGML 1.0","CityGML 2.0","CityGML 3.0","CityJSON 1.0","CityJSON 2.0","data migration","database migration","legacy support"]},{"location":"compatibility/#handle-citygml-version-differences","title":"Handle CityGML version differences","text":"<p>CityGML 3.0 introduces significant changes to the data model that cannot be transferred one-to-one between versions 2.0/1.0 and 3.0. The most important changes include:</p> <ul> <li>New feature types and concepts: CityGML 3.0 introduces many new feature types, data types, attributes,   and concepts that are not available in previous versions.</li> <li>Refined LoD concept: The LoD model has been standardized across all feature types. Some LoD levels and   geometry representations from CityGML 2.0 are no longer present in version 3.0.</li> <li>LoD-independent interior modeling: Interiors can now be modeled independently of LoD levels. As a result,   <code>LoD4</code> of CityGML 2.0 no longer exists in version 3.0.</li> </ul> <p>As mentioned above, these differences are only relevant when switching between CityGML versions during import and export. When possible, the citydb-tool applies automatic conversions to prevent data loss. For cases where automatic conversion is not feasible, the following options are provided to help upgrade deprecated CityGML 2.0 structures to valid representations in version 3.0.</p> Option Description <code>--use-lod4-as-lod3</code> LoD4 geometries are mapped onto LoD3, replacing any existing LoD3 geometries in the data. <code>--map-lod0-roof-edge</code> LoD0 roof edge geometries are mapped onto roof surfaces with LoD0 surface geometry. <code>--map-lod1-surface</code> LoD1 multi-surfaces are mapped onto generic thematic surfaces with LoD1 surface geometry. <p>Warning</p> <p>The citydb-tool does not provide options for downgrading CityGML 3.0 content to versions 2.0 or 1.0. Therefore, CityGML 3.0-specific features, geometries, or attributes stored in 3DCityDB <code>v5</code> will be lost when exporting to earlier versions unless an automatic conversion is possible.</p> <p>When to use the upgrade options</p> <p>The decision to apply upgrade options depends on which CityGML version serves as the primary and leading version in your 3DCityDB <code>v5</code>.</p> <ul> <li>CityGML 3.0 (recommended): Apply upgrade options when importing CityGML 2.0/1.0 data,   provided the data contains corresponding content. Exporting to CityGML 2.0/1.0 might lead to data loss unless   automatic conversion is possible.</li> <li>CityGML 2.0: Import CityGML 2.0/1.0 data as-is without using upgrade options. Avoid importing CityGML 3.0   data if it contains features not avaialble in CityGML 2.0. Upgrade options can be used   when exporting data in CityGML 3.0 format if explicitly required.</li> </ul>","tags":["3dcitydb","citydb-tool","importer-exporter","3d-web-map-client","wfs","3dcitydb v4","3dcitydb v5","CityGML 1.0","CityGML 2.0","CityGML 3.0","CityJSON 1.0","CityJSON 2.0","data migration","database migration","legacy support"]},{"location":"compatibility/#examples","title":"Examples","text":"<p>The following examples demonstrate how to migrate data between CityGML versions. We use the 3DCityDB and citydb-tool Docker images in the examples. However, migration can also be performed with bare metal database installations; the only difference is in how the database is created. For this example we use the test dataset available here and assume your data is located in the current working directory (<code>$PWD</code>).</p> <pre><code>SRID        3068\nSRS_NAME    urn:ogc:def:crs,crs:EPSG::3068,crs:EPSG::5783\n</code></pre> <ol> <li> <p>For all version up- or downgrades we first create a 3DCItyDB <code>v5</code> instance and a Docker network.</p> LinuxWindows CMD <pre><code>  # docker network remove citydb-net\n  docker network create citydb-net\n\n  # docker rm -f -v citydb\n  docker run -t -d --name citydb \\\n    --network citydb-net \\\n    -e POSTGRES_PASSWORD=changeMe \\\n    -e SRID=3068 \\\n    -e SRS_NAME=\"urn:ogc:def:crs,crs:EPSG::3068,crs:EPSG::5783\" \\\n  3dcitydb/3dcitydb:5-alpine\n</code></pre> <pre><code>  # docker network remove citydb-net\n  docker network create citydb-net\n\n  # docker rm -f -v citydb\n  docker run -t -d --name citydb ^\n    --network citydb-net ^\n    -e POSTGRES_PASSWORD=changeMe ^\n    -e SRID=3068 ^\n    -e SRS_NAME=\"urn:ogc:def:crs,crs:EPSG::3068,crs:EPSG::5783\" ^\n  3dcitydb/3dcitydb-pg:5-alpine\n</code></pre> </li> <li> <p>Import your dataset to the new database.</p> LinuxWindows CMD <pre><code>docker run -i -t --rm --name citydb-tool \\\n  --network citydb-net \\\n  -v \"$PWD:/data\" \\\n3dcitydb/citydb-tool:edge import citygml \\\n  -H citydb \\\n  -d postgres \\\n  -u postgres \\\n  -p changeMe \\\n  \"Railway_Scene_LoD3.zip\"\n</code></pre> <pre><code>docker run -i -t --rm --name citydb-tool ^\n  --network citydb-net ^\n  -v \"$PWD:/data\" ^\n3dcitydb/citydb-tool:edge import citygml ^\n  -H citydb ^\n  -d postgres ^\n  -u postgres ^\n  -p changeMe ^\n  \"Railway_Scene_LoD3.zip\"\n</code></pre> </li> <li> <p>Export your dataset in the desired version. Use the <code>-v</code> option of citydb-tool (see above) to specify the version you want.</p> LinuxWindows CMD <pre><code>docker run -i -t --rm --name citydb-tool \\\n  -u \"$(id -u):$(id -g)\" \\\n  --network citydb-net \\\n  -v \"$PWD:/data\" \\\n3dcitydb/citydb-tool:edge export citygml \\\n  -H citydb \\\n  -d postgres \\\n  -u postgres \\\n  -p changeMe \\\n  -v \"3.0\" \\\n  -o \"Railway_Scene_LoD3_CityGML_v3.gml\"\n</code></pre> <pre><code>docker run -i -t --rm --name citydb-tool ^\n  -u \"$(id -u):$(id -g)\" ^\n  --network citydb-net ^\n  -v \"$PWD:/data\" ^\n3dcitydb/citydb-tool:edge export citygml ^\n  -H citydb ^\n  -d postgres ^\n  -u postgres ^\n  -p changeMe ^\n  -v \"3.0\" ^\n  -o \"Railway_Scene_LoD3_CityGML_v3.gml\"\n</code></pre> </li> </ol> <p>This is it! You have now migrated your CityGML dataset to the version you need. Keep in mind to check if additional upgrade options for handling CityGML version differences are required.</p>","tags":["3dcitydb","citydb-tool","importer-exporter","3d-web-map-client","wfs","3dcitydb v4","3dcitydb v5","CityGML 1.0","CityGML 2.0","CityGML 3.0","CityJSON 1.0","CityJSON 2.0","data migration","database migration","legacy support"]},{"location":"compatibility/#migrate-3dcitydb-database-instances","title":"Migrate 3DCityDB database instances","text":"<p>Migration between 3DCityDB <code>v5</code> and older versions is performed by exporting data to a compatible CityGML version and then re-importing it into the target 3DCityDB version.</p> <ol> <li>Check 3DCityDB and CityGML compatibility in the table above.</li> <li>Migrate you dataset to a compatible CityGML version of your target database version, as described in data migration above.</li> <li>Create a 3DCityDB instance in your target version using Docker or bare metal setup.</li> <li>Import your dataset to the 3DCityDB with your target version. For 3DCityDB <code>v5</code> use citydb-tool, for older    3DCityDB versions use the Importer/Exporter.</li> </ol> <p>If 3DCityDB <code>v5</code> is your target database, ensure that you follow the guidance above on selecting a primary CityGML version and applying upgrade options, if necessary, when re-importing the data.</p>","tags":["3dcitydb","citydb-tool","importer-exporter","3d-web-map-client","wfs","3dcitydb v4","3dcitydb v5","CityGML 1.0","CityGML 2.0","CityGML 3.0","CityJSON 1.0","CityJSON 2.0","data migration","database migration","legacy support"]},{"location":"download/","title":"Get the software","text":"<p>The 3D City Database (3DCityDB) is hosted on  GitHub, where we regularly publish new releases, including new features and bug fixes, for the 3DCityDB and its tools. Development takes place in separate repositories on GitHub, with software release packages available for download in the \"Releases\" section of each repository. All notable changes in new releases are documented in changelogs, which are maintained in the repositories and referenced in the release notes.</p> <p>If you prefer Docker images over manually installing and setting up software packages, be sure to check out our  Docker support for the 3DCityDB.</p> <p>Tip</p> <p>It is recommended to download and use stable release packages. However, if you wish to access the latest developments or bug fixes that have not yet been published, you can clone the source code from GitHub and build the software package yourself. Each GitHub repository includes the necessary build instructions, including Dockerfiles for creating your own Docker images, where applicable.</p>","tags":["3dcitydb","citydb-tool","download"]},{"location":"download/#3dcitydb-database-scripts","title":"3DCityDB database scripts","text":"<p>The 3DCityDB software package includes all the database scripts for setting up and running a 3DCityDB <code>v5</code> instance on PostgreSQL/PostGIS.</p> <ul> <li>GitHub repository: https://github.com/3dcitydb/3dcitydb</li> <li>Release download page: https://github.com/3dcitydb/3dcitydb/releases</li> <li>Issue tracker: https://github.com/3dcitydb/3dcitydb/issues</li> </ul> <p>A step-by-step guide on setting up a 3DCityDB using the database scripts is available here. For complete documentation of the 3DCityDB and its relational schema, refer to the 3D City Database section.</p>","tags":["3dcitydb","citydb-tool","download"]},{"location":"download/#citydb-tool-database-client","title":"<code>citydb-tool</code> database client","text":"<p><code>citydb-tool</code> is the default command-line client for the 3DCityDB, used to import and export city model data as well as perform data and database operations. Java is required to be installed on your system in order to run citydb-tool.</p> <ul> <li>GitHub repository: https://github.com/3dcitydb/citydb-tool</li> <li>Release download page: https://github.com/3dcitydb/citydb-tool/releases</li> <li>Issue tracker: https://github.com/3dcitydb/citydb-tool/issues</li> </ul> <p>Check out the first steps and the complete documentation to learn more about using citydb-tool.</p> <p>Tip</p> <p>citydb-tool requires a matching version of the 3DCityDB <code>v5</code>. To ensure compatibility, the latest stable release of 3DCityDB at the time of a citydb-tool release is always included in the citydb-tool package. This means you can use the 3DCityDB scripts bundled with citydb-tool instead of downloading them separately, ensuring you have the correct version of 3DCityDB.</p>","tags":["3dcitydb","citydb-tool","download"]},{"location":"download/#3dcitydb-web-map-client","title":"3DCityDB-Web-Map-Client","text":"<p>The 3DCityDB-Web-Map-Client is a web-based viewer designed for high-performance 3D visualization and interactive exploration of geospatial data, including 3D city models exported from the 3DCityDB. It is built on top of the Cesium Virtual Globe platform.</p> <ul> <li>GitHub repository: https://github.com/3dcitydb/3dcitydb-web-map</li> <li>Release download page: https://github.com/3dcitydb/3dcitydb-web-map/releases</li> <li>Issue tracker: https://github.com/3dcitydb/3dcitydb-web-map/issues</li> </ul> <p>The complete documentation of the 3DCityDB-Web-Map-Client is available here. We are in the process of including it in this documentation.</p> <p>Note</p> <p>Currently, we do not offer a tool to export city model data from the 3DCityDB <code>v5</code> in KML, COLLADA, or 3D Tiles format, which is required for visualization in the 3DCityDB-Web-Map-Client. This feature is a work in progress, so stay tuned for future updates!</p>","tags":["3dcitydb","citydb-tool","download"]},{"location":"tags/","title":"Index","text":"<p>This page provides an overview on keywords commonly used across the documentation. Navigate the menu to the right to find your keyword and see on which pages it can be found.</p>"},{"location":"tags/#tag:3d-web-map-client","title":"3d-web-map-client","text":"<ul> <li>            Compatibility and data migration          </li> </ul>"},{"location":"tags/#tag:3dcitydb","title":"3dcitydb","text":"<ul> <li>            3D City Database          </li> <li>            3DCityDB Docker          </li> <li>            Appearance module          </li> <li>            Codelist module          </li> <li>            Compatibility and data migration          </li> <li>            Database connection          </li> <li>            Database functions          </li> <li>            Database scripts          </li> <li>            Feature module          </li> <li>            Geometry module          </li> <li>            Get the software          </li> <li>            Metadata module          </li> <li>            Migration from previous versions          </li> <li>            Schema overview          </li> <li>            Setting up a 3DCityDB          </li> <li>            System requirements          </li> <li>            Using Docker          </li> </ul>"},{"location":"tags/#tag:3dcitydb-v4","title":"3dcitydb v4","text":"<ul> <li>            Compatibility and data migration          </li> </ul>"},{"location":"tags/#tag:3dcitydb-v5","title":"3dcitydb v5","text":"<ul> <li>            Compatibility and data migration          </li> </ul>"},{"location":"tags/#tag:cli","title":"CLI","text":"<ul> <li>            CLI overview          </li> </ul>"},{"location":"tags/#tag:citygml","title":"CityGML","text":"<ul> <li>            Chair of Geoinformatics, TUM          </li> <li>            CityGML export          </li> <li>            CityGML import          </li> <li>            Virtual City Systems          </li> </ul>"},{"location":"tags/#tag:citygml-10","title":"CityGML 1.0","text":"<ul> <li>            Compatibility and data migration          </li> </ul>"},{"location":"tags/#tag:citygml-20","title":"CityGML 2.0","text":"<ul> <li>            Compatibility and data migration          </li> </ul>"},{"location":"tags/#tag:citygml-30","title":"CityGML 3.0","text":"<ul> <li>            Compatibility and data migration          </li> </ul>"},{"location":"tags/#tag:citygml-data","title":"CityGML data","text":"<ul> <li>            3D City Database          </li> </ul>"},{"location":"tags/#tag:cityjson","title":"CityJSON","text":"<ul> <li>            CityJSON export          </li> <li>            CityJSON import          </li> </ul>"},{"location":"tags/#tag:cityjson-10","title":"CityJSON 1.0","text":"<ul> <li>            Compatibility and data migration          </li> </ul>"},{"location":"tags/#tag:cityjson-20","title":"CityJSON 2.0","text":"<ul> <li>            Compatibility and data migration          </li> </ul>"},{"location":"tags/#tag:eu-taxonomy","title":"EU taxonomy","text":"<ul> <li>            LIST Eco          </li> </ul>"},{"location":"tags/#tag:json","title":"JSON","text":"<ul> <li>            Configuration overview          </li> </ul>"},{"location":"tags/#tag:list-eco","title":"LIST Eco","text":"<ul> <li>            LIST Eco          </li> </ul>"},{"location":"tags/#tag:list-gruppe","title":"LIST Gruppe","text":"<ul> <li>            LIST Eco          </li> </ul>"},{"location":"tags/#tag:moss","title":"M.O.S.S.","text":"<ul> <li>            M.O.S.S.          </li> </ul>"},{"location":"tags/#tag:open-source","title":"Open Source","text":"<ul> <li>            Virtual City Systems          </li> </ul>"},{"location":"tags/#tag:tumgis","title":"TUMGIS","text":"<ul> <li>            Chair of Geoinformatics, TUM          </li> </ul>"},{"location":"tags/#tag:vc-database","title":"VC Database","text":"<ul> <li>            Virtual City Systems          </li> </ul>"},{"location":"tags/#tag:vc-map","title":"VC Map","text":"<ul> <li>            Virtual City Systems          </li> </ul>"},{"location":"tags/#tag:vc-suite","title":"VC Suite","text":"<ul> <li>            Virtual City Systems          </li> </ul>"},{"location":"tags/#tag:vcs","title":"VCS","text":"<ul> <li>            Virtual City Systems          </li> </ul>"},{"location":"tags/#tag:address","title":"address","text":"<ul> <li>            Feature module          </li> </ul>"},{"location":"tags/#tag:ade","title":"ade","text":"<ul> <li>            Metadata module          </li> </ul>"},{"location":"tags/#tag:appearance","title":"appearance","text":"<ul> <li>            Appearance module          </li> </ul>"},{"location":"tags/#tag:attribute-filter","title":"attribute filter","text":"<ul> <li>            CQL2 query language          </li> </ul>"},{"location":"tags/#tag:bare-metal","title":"bare metal","text":"<ul> <li>            Setting up a 3DCityDB          </li> </ul>"},{"location":"tags/#tag:certification","title":"certification","text":"<ul> <li>            LIST Eco          </li> </ul>"},{"location":"tags/#tag:citydb-tool","title":"citydb-tool","text":"<ul> <li>            CLI overview          </li> <li>            CityGML export          </li> <li>            CityGML import          </li> <li>            CityJSON export          </li> <li>            CityJSON import          </li> <li>            Compatibility and data migration          </li> <li>            Configuration overview          </li> <li>            Delete command          </li> <li>            Delete configuration          </li> <li>            Export configuration          </li> <li>            Export overview          </li> <li>            Get the software          </li> <li>            Import configuration          </li> <li>            Import overview          </li> <li>            Index command          </li> <li>            Migration from previous versions          </li> <li>            Using Docker          </li> <li>            Using citydb-tool          </li> <li>            citydb-tool          </li> <li>            citydb-tool Docker          </li> </ul>"},{"location":"tags/#tag:codelist","title":"codelist","text":"<ul> <li>            Codelist module          </li> </ul>"},{"location":"tags/#tag:command-line-interface","title":"command-line interface","text":"<ul> <li>            CLI overview          </li> </ul>"},{"location":"tags/#tag:compatibility","title":"compatibility","text":"<ul> <li>            Migration from previous versions          </li> </ul>"},{"location":"tags/#tag:config","title":"config","text":"<ul> <li>            Configuration overview          </li> <li>            Delete configuration          </li> <li>            Export configuration          </li> <li>            Import configuration          </li> </ul>"},{"location":"tags/#tag:connection-options","title":"connection options","text":"<ul> <li>            Database connection          </li> </ul>"},{"location":"tags/#tag:contribute","title":"contribute","text":"<ul> <li>            Usage and contribution          </li> </ul>"},{"location":"tags/#tag:contributors","title":"contributors","text":"<ul> <li>            Partners and contributors          </li> </ul>"},{"location":"tags/#tag:cql2","title":"cql2","text":"<ul> <li>            CQL2 query language          </li> </ul>"},{"location":"tags/#tag:data-migration","title":"data migration","text":"<ul> <li>            Compatibility and data migration          </li> </ul>"},{"location":"tags/#tag:database","title":"database","text":"<ul> <li>            Database connection          </li> </ul>"},{"location":"tags/#tag:database-functions","title":"database functions","text":"<ul> <li>            Database functions          </li> </ul>"},{"location":"tags/#tag:database-migration","title":"database migration","text":"<ul> <li>            Compatibility and data migration          </li> </ul>"},{"location":"tags/#tag:database-scripts","title":"database scripts","text":"<ul> <li>            Database scripts          </li> <li>            Setting up a 3DCityDB          </li> </ul>"},{"location":"tags/#tag:database-srs","title":"database srs","text":"<ul> <li>            Metadata module          </li> </ul>"},{"location":"tags/#tag:datatype","title":"datatype","text":"<ul> <li>            Metadata module          </li> </ul>"},{"location":"tags/#tag:delete","title":"delete","text":"<ul> <li>            Delete command          </li> <li>            Delete configuration          </li> </ul>"},{"location":"tags/#tag:docker","title":"docker","text":"<ul> <li>            3DCityDB Docker          </li> <li>            Setting up a 3DCityDB          </li> <li>            Using Docker          </li> <li>            citydb-tool Docker          </li> </ul>"},{"location":"tags/#tag:download","title":"download","text":"<ul> <li>            Get the software          </li> </ul>"},{"location":"tags/#tag:export","title":"export","text":"<ul> <li>            CityGML export          </li> <li>            CityJSON export          </li> <li>            Export configuration          </li> <li>            Export overview          </li> </ul>"},{"location":"tags/#tag:feature","title":"feature","text":"<ul> <li>            Feature module          </li> </ul>"},{"location":"tags/#tag:features","title":"features","text":"<ul> <li>            3D City Database          </li> <li>            citydb-tool          </li> </ul>"},{"location":"tags/#tag:filter","title":"filter","text":"<ul> <li>            CQL2 query language          </li> </ul>"},{"location":"tags/#tag:first-steps","title":"first-steps","text":"<ul> <li>            First Steps          </li> </ul>"},{"location":"tags/#tag:geometry","title":"geometry","text":"<ul> <li>            Geometry module          </li> </ul>"},{"location":"tags/#tag:image","title":"image","text":"<ul> <li>            3DCityDB Docker          </li> </ul>"},{"location":"tags/#tag:implicit-geometry","title":"implicit geometry","text":"<ul> <li>            Geometry module          </li> </ul>"},{"location":"tags/#tag:import","title":"import","text":"<ul> <li>            CityGML import          </li> <li>            CityJSON import          </li> <li>            Import configuration          </li> <li>            Import overview          </li> </ul>"},{"location":"tags/#tag:importer-exporter","title":"importer-exporter","text":"<ul> <li>            Compatibility and data migration          </li> </ul>"},{"location":"tags/#tag:index","title":"index","text":"<ul> <li>            Index command          </li> </ul>"},{"location":"tags/#tag:keyboard-shortcuts","title":"keyboard shortcuts","text":"<ul> <li>            Usage and contribution          </li> </ul>"},{"location":"tags/#tag:legacy-support","title":"legacy support","text":"<ul> <li>            Compatibility and data migration          </li> </ul>"},{"location":"tags/#tag:materials","title":"materials","text":"<ul> <li>            Appearance module          </li> </ul>"},{"location":"tags/#tag:metadata","title":"metadata","text":"<ul> <li>            Metadata module          </li> </ul>"},{"location":"tags/#tag:migration","title":"migration","text":"<ul> <li>            Migration from previous versions          </li> </ul>"},{"location":"tags/#tag:namespace","title":"namespace","text":"<ul> <li>            Metadata module          </li> </ul>"},{"location":"tags/#tag:objectclass","title":"objectclass","text":"<ul> <li>            Metadata module          </li> </ul>"},{"location":"tags/#tag:oracle","title":"oracle","text":"<ul> <li>            System requirements          </li> </ul>"},{"location":"tags/#tag:overview","title":"overview","text":"<ul> <li>            Schema overview          </li> <li>            citydb-tool          </li> </ul>"},{"location":"tags/#tag:partners","title":"partners","text":"<ul> <li>            Partners and contributors          </li> </ul>"},{"location":"tags/#tag:performance-tuning","title":"performance tuning","text":"<ul> <li>            3DCityDB Docker          </li> </ul>"},{"location":"tags/#tag:postgis","title":"postgis","text":"<ul> <li>            3DCityDB Docker          </li> <li>            System requirements          </li> </ul>"},{"location":"tags/#tag:postgresql","title":"postgresql","text":"<ul> <li>            3DCityDB Docker          </li> <li>            System requirements          </li> </ul>"},{"location":"tags/#tag:property","title":"property","text":"<ul> <li>            Feature module          </li> </ul>"},{"location":"tags/#tag:query","title":"query","text":"<ul> <li>            CQL2 query language          </li> </ul>"},{"location":"tags/#tag:quickstart","title":"quickstart","text":"<ul> <li>            First Steps          </li> <li>            Using Docker          </li> <li>            Using citydb-tool          </li> </ul>"},{"location":"tags/#tag:relational-schema","title":"relational schema","text":"<ul> <li>            Appearance module          </li> <li>            Codelist module          </li> <li>            Feature module          </li> <li>            Geometry module          </li> <li>            Metadata module          </li> <li>            Schema overview          </li> </ul>"},{"location":"tags/#tag:requirements","title":"requirements","text":"<ul> <li>            System requirements          </li> </ul>"},{"location":"tags/#tag:setup","title":"setup","text":"<ul> <li>            Setting up a 3DCityDB          </li> </ul>"},{"location":"tags/#tag:shell-scripts","title":"shell scripts","text":"<ul> <li>            Setting up a 3DCityDB          </li> </ul>"},{"location":"tags/#tag:spatial-filter","title":"spatial filter","text":"<ul> <li>            CQL2 query language          </li> </ul>"},{"location":"tags/#tag:sql-scripts","title":"sql scripts","text":"<ul> <li>            Setting up a 3DCityDB          </li> </ul>"},{"location":"tags/#tag:sustainability-concepts","title":"sustainability concepts","text":"<ul> <li>            LIST Eco          </li> </ul>"},{"location":"tags/#tag:template-database","title":"template database","text":"<ul> <li>            Setting up a 3DCityDB          </li> </ul>"},{"location":"tags/#tag:texture","title":"texture","text":"<ul> <li>            Appearance module          </li> </ul>"},{"location":"tags/#tag:wfs","title":"wfs","text":"<ul> <li>            Compatibility and data migration          </li> </ul>"},{"location":"usage-contrib/","title":"Usage and contribution","text":"<p>This documentation is made with <code>mkdocs</code> and <code>mkdocs-material</code>. On this page you will find instructions on how to work effectively with the documentation and how to contribute.</p>","tags":["contribute","keyboard shortcuts"]},{"location":"usage-contrib/#search-and-page-navigation","title":"Search and page navigation","text":"<p>The most efficient way to find things in the documentation is to use the search function. In many cases, just one keyword will be enough to find the right page. You can access the search function using the search bar at the top or keyboard shortcuts.</p>","tags":["contribute","keyboard shortcuts"]},{"location":"usage-contrib/#keyboard-shortcuts","title":"Keyboard shortcuts","text":"The search function can be conveniently controlled via the keyboard. The same applies to navigation between pages. There are two modes for the search function: <p>This mode is active when the search bar is focused. It offers several keys to make the search accessible and navigable via the keyboard:</p> <ul> <li>Down , Up : Select next/previous search result</li> <li>Esc , Tab : Close search dialog</li> <li>Enter : Open search result</li> </ul> <p>This mode is active when search bar is not focused and when there is no other focused element that is receptive to keyboard input. The following keys are bound:</p> <ul> <li>F , S , / : Open search dialog</li> <li>P , , : Next page</li> <li>N , . : Previous page</li> </ul> <p>See here for more information on creating your own key combinations.</p>","tags":["contribute","keyboard shortcuts"]},{"location":"usage-contrib/#how-to-contribute","title":"How to contribute","text":"","tags":["contribute","keyboard shortcuts"]},{"location":"usage-contrib/#setup-development-environment","title":"Setup development environment","text":"<p>This documentation was created with Materials for MkDocs. The content is written in Markdown, a simple markup language whose basic elements can be learned in 15 minutes. Setting up MkDocs Material is easy! Follow the steps in the first steps tutorial to set up you development environment. We recommend Visual Studio Code as IDE. Here are some useful instructions for the configuration of VS code for configuration validation and auto-complete.</p>","tags":["contribute","keyboard shortcuts"]},{"location":"usage-contrib/#contribute","title":"Contribute","text":"<p>We are happy for all contributions! To edit or expand the documentation, create a new branch from <code>main</code> in the 3dcitydb/3dcitydb-mkdocs repo on Github and commit your changes there. When your done, submit a pull request so we can review your content. If you find an error or want to discuss content, please file an issue or contribute to the 3DCityDB discussion board. For details on the Markdown or the documentation system, view the references below.</p>","tags":["contribute","keyboard shortcuts"]},{"location":"usage-contrib/#references","title":"References","text":"<ul> <li>Markdown reference</li> <li>Markdown cheatsheet printable</li> <li>MkDocs Materials theme documentation</li> <li>MkDocs user guide</li> </ul>","tags":["contribute","keyboard shortcuts"]},{"location":"3dcitydb/","title":"3D City Database","text":"<p>The 3D City Database <code>v5</code> (3DCityDB) is a free 3D geo database to store, represent, and manage virtual 3D city models within a standard spatial relational database. The database model contains semantically rich, hierarchically structured, multi-scale urban objects, facilitating complex GIS modeling and analysis tasks, far beyond visualization.</p> <p>The database schema of the 3DCityDB <code>v5</code> results from a systematic mapping and complete implementation of the data model defined in the OGC CityGML 3.0 Conceptual Model, an international standard for representing and exchanging virtual 3D city models, issued by the Open Geospatial Consortium (OGC).</p> <p>The 3DCityDB is open source and hosted on GitHub. You can download the 3DCityDB <code>v5</code> software packages by following the download instructions. We also offer Docker support, making it easy to get a 3DCityDB <code>v5</code> instance up and running in just a few seconds.</p>","tags":["3dcitydb","CityGML data","features"]},{"location":"3dcitydb/#key-features-of-3dcitydb-v5","title":"Key features of 3DCityDB v5","text":"<ul> <li>Full support for CityGML versions 3.0, 2.0 and 1.0</li> <li>Complex thematic modeling including support for Application Domain Extensions (ADE)</li> <li>Four (CityGML 3.0) or five (CityGML 2.0 and 1.0) different Levels of Detail (LoDs)</li> <li>Appearance information (textures and materials)</li> <li>Digital terrain models (DTMs) represented as TINs</li> <li>Representation of generic and prototypical 3D objects</li> <li>Free, also recursive aggregation of geo objects</li> <li>Flexible 3D geometries such as Solid, CompositeSolid, MultiSurface, CompositeSurface,   Polygon, TINs, MultiCurve, CompositeCurve, LineString, Point, and MultiPoint</li> <li>Database functions to delete complex objects including all their nested   sub-objects and geometries. As an alternative, objects can only be marked as terminated,   which leaves them in the database but sets their termination date timestamps accordingly.   This realizes a simple but powerful historization / versioning mechanism.</li> <li><code>citydb-tool</code> for importing and exporting CityGML datasets of any size, supporting both   GML and CityJSON encodings. It works with CityGML versions 3.0, 2.0, and 1.0, as well as CityJSON versions 2.0, 1.1,   and 1.0. Additionally, it enables seamless on-the-fly upgrading and downgrading between different versions.</li> </ul>","tags":["3dcitydb","CityGML data","features"]},{"location":"3dcitydb/#changes-with-respect-to-3dcitydb-v4","title":"Changes with respect to 3DCityDB v4","text":"<p>Streamlined and optimized schema: Compared to the earlier versions of the 3DCityDB <code>v4</code>, more generic rules have been applied in the mapping of the CityGML 3.0 data model onto the relational schema, resulting in a significant reduction of the number of database tables.</p> <p>Efficient geometry management: Geometry objects are now directly mapped onto corresponding data types provided by PostGIS; i.e., Solids, MultiSurfaces, CompositeSurfaces, TINs, etc. are no longer split into their individual polygons and stored in separate rows as was done in 3DCityDB <code>v4</code>. This makes it much easier to express spatial queries in SQL, faster to evaluate such queries, and also to directly connect to the 3DCityDB from geoinformation systems like QGIS, FME, or ArcGIS and utilize the spatial objects.</p> <p>New database client: <code>citydb-tool</code> is the new default command-line client for 3DCityDB <code>v5</code>, designed to import and export city model data as well as perform data and database operations. Its command-line interface enables easy automation, integration with other software, and efficient use in workflows and pipelines. Unlike the previous Importer/Exporter tool for 3DCityDB <code>v4</code>, it no longer provides a graphical user interface.</p> <p>Work-in-progress visualization support: A tool for exporting 3DCityDB <code>v5</code> content in visualization formats like KML, COLLADA, or glTF, as was possible with the Importer/Exporter, is not available yet. However, we are actively working on a solution to export data in the OGC 3D Tiles format. For this purpose, we are evaluating open-source tools such as pg2b3dm to work directly with the 3DCityDB <code>v5</code>. We also plan to publish the export tool as a customized Docker image. Stay tuned!</p> <p>3DCityDB <code>v4</code> and legacy tool support</p> <p>The 3DCityDB <code>v4</code> and its tools remain functioning and are still available. They will be maintained for an extended period to give users enough time to migrate to the new version. Please note that <code>v4</code> tools are not compatible with 3DCityDB <code>v5</code> (see our compatibility and data migration guide). If you are currently using or interested in using the previous version and its tools, please refer to the 3DCityDB <code>v4</code> suite package. The documentation of the 3DCityDB <code>v4</code> suite is still available here.</p>","tags":["3dcitydb","CityGML data","features"]},{"location":"3dcitydb/#who-is-using-the-3dcitydb","title":"Who is using the 3DCityDB?","text":"<p>The 3D City Database <code>v4</code> is in use in real life production systems in many places around the world such as Berlin, Potsdam, Hamburg, Munich, Frankfurt, Dresden, Rotterdam, Vienna, Helsinki, Singapore, Zurich, and is also being used in a number of research projects. With the release of 3DCityDB <code>v5</code>, we expect that most users of <code>v4</code> will migrate to the new version in the future.</p> <p>The companies Virtual City Systems and M.O.S.S., who are also partners in development, use the 3DCityDB at the core of their commercial products and services to create, maintain, visualize, transform, and export virtual 3D city models. Furthermore, the state mapping agencies of the federal states in Germany store and manage the nation-wide collected 3D city models, including approximately 56 million building models and bridges in CityGML LoD1 and LoD2, using the 3DCityDB.</p>","tags":["3dcitydb","CityGML data","features"]},{"location":"3dcitydb/#where-to-find-citygml-data","title":"Where to find CityGML data?","text":"<p>An excellent list of open data 3D city models, especially also represented using CityGML, can be found in the Awesome CityGML list. Currently, datasets from 21 countries and 65 regions/cities can be downloaded for free, with a total of &gt;210 million semantic 3D building models. All the provided CityGML files can be loaded, analyzed, and managed using the 3DCityDB.</p>","tags":["3dcitydb","CityGML data","features"]},{"location":"3dcitydb/appearance-module/","title":"Appearance module","text":"<p>The Appearance module enables the storage and assignment of textures and colors to surface geometries in the 3DCityDB <code>v5</code>. It implements the CityGML appearance concept, where appearances act as containers for surface data, which is mapped to the surface geometries of city objects to define their visual and observable properties.</p> <p></p> <p>Figure 1. Appearance module of the 3DCityDB <code>v5</code> relational schema.</p>","tags":["3dcitydb","relational schema","appearance","texture","materials"]},{"location":"3dcitydb/appearance-module/#appearance-table","title":"<code>APPEARANCE</code> table","text":"<p>The <code>APPEARANCE</code> table is the central component of the appearance module. Each record in the table represents a distinct appearance. Although Appearance is a feature type in CityGML, appearances are not stored in the <code>FEATURE</code> table. This is because appearances define visual and observable properties of surfaces, which are conceptually separate from the spatial features stored in the <code>FEATURE</code> table.</p> <p>The columns <code>objectid</code>, <code>identifier</code>, and <code>identifier_codespace</code> in the <code>APPEARANCE</code> table are used to store unique identifiers for an appearance object, serving the same purpose as in the <code>FEATURE</code> table. The <code>objectid</code> is a string identifier used to uniquely reference a feature within the database and datasets. It is recommended to use a globally unique value for <code>objectid</code> and ensure this column is always populated. The <code>identifier</code> column provides an optional identifier to uniquely distinguish the appearance across different systems and potentially multiple versions of the same real-world object. It must be accompanied by a code space, stored in the <code>identifier_codespace</code> column, which indicates the authority responsible for maintaining the identifier.</p> <p>Each appearance is associated with a specific theme for its surface data, stored as a string identifier in the <code>theme</code> column. A surface geometry can receive surface data from multiple themes. A <code>NULL</code> value for <code>theme</code> is explicitly allowed.</p> <p>Appearances are assigned to either features or implicit geometries in one of the following ways:</p> <ol> <li> <p>Local (feature-specific) appearances: Appearances can be stored as a property of the feature whose geometries are assigned textures    or colors. The link between the feature stored in the <code>FEATURE</code> table and an    appearance is stored as an appearance property in the    <code>PROPERTY</code> table. The <code>APPEARANCE</code> table includes a <code>feature_id</code> foreign key,    providing a back-link to the feature. This setup enables bidirectional queries between features and their appearances.</p> </li> <li> <p>Implicit geometries: Appearances can be linked to an implicit geometry, which acts as a template geometry    for multiple features (e.g., a 3D tree model shared by multiple tree features). In this case, the appearance    references the template in the <code>IMPLICIT_GEOMETRY</code> table via    the <code>implicit_geometry_id</code> foreign key.</p> </li> <li> <p>Global appearances: Appearances can be shared across multiple surface geometries of different features,    referred to as global appearances in CityGML. To designate an appearance as global, the <code>is_global</code> property should    be set to <code>1</code> (true), and both <code>feature_id</code> and <code>implicit_geometry_id</code> should be set to <code>NULL</code>. Additionally,    a global appearance shall not be referenced from individual features using an appearance property.</p> </li> </ol> <p>Tip</p> <p>Storing global appearances in the database should be avoided, as it increases data management overhead and reduces export efficiency. The <code>citydb-tool</code> that comes with 3DCityDB automatically converts global appearances to local ones during data imports to prevent them from being stored in the database.</p>","tags":["3dcitydb","relational schema","appearance","texture","materials"]},{"location":"3dcitydb/appearance-module/#surface_data-table","title":"<code>SURFACE_DATA</code> table","text":"<p>The <code>SURFACE_DATA</code> table stores surface data such as textures and colors. These surface data elements are linked to an appearance through the <code>APPEAR_TO_SURFACE_DATA</code> table, which establishes a many-to-many (n:m) relationship.</p> <p>The following surface data types are supported:</p> <ul> <li>X3DMaterial: Represents a surface material, typically used for defining color or basic material properties.</li> <li>ParameterizedTexture: A texture that uses texture coordinates or a linear transformation to define how the   texture is applied to the target surface.</li> <li>GeoreferencedTexture: A texture that uses a planimetric projection to map the texture onto the target surface   with real-world spatial reference.</li> </ul> <p>The <code>objectclass_id</code> column enforces the type of surface data, acting as a foreign key to the <code>OBJECTCLASS</code> metadata table.</p> <p>All surface data types share the <code>objectid</code>, <code>identifier</code>, and <code>identifier_codespace</code> columns, which are used in the same manner as in the <code>APPEARANCE</code> table, as described earlier. Additionally, the <code>is_front</code> column indicates whether the surface data should be applied to the front (<code>is_front = 1</code>) or back face (<code>is_front = 0</code>) of the target surface geometry.</p> <p>The remaining columns of the <code>SURFACE_DATA</code> table are populated based on the specific surface data type.</p>","tags":["3dcitydb","relational schema","appearance","texture","materials"]},{"location":"3dcitydb/appearance-module/#storing-material-properties","title":"Storing material properties","text":"<p>The <code>x3d_*</code> columns define surface material properties according to the X3DMaterial type.</p> Column Description <code>x3d_shininess</code> Specifies the sharpness of the specular highlight (<code>0..1</code>). <code>x3d_transparency</code> Defines the transparency level of the material (<code>0.0</code> = opaque, <code>1.0</code> = fully transparent). <code>x3d_ambient_intensity</code> Specifies the minimum percentage of diffuse color that is visible regardless of light sources (<code>0..1</code>). <code>x3d_specular_color</code> Sets the color of the specular reflection of the material in Hex format (<code>#RRGGBB</code>). <code>x3d_diffuse_color</code> Defines the color of the material's diffuse reflection in Hex format (<code>#RRGGBB</code>). <code>x3d_emissive_color</code> Specifies the color of the material's emission (self-illumination) in Hex format (<code>#RRGGBB</code>). <code>x3d_is_smooth</code> Indicates whether the material is smooth (<code>1</code>) or faceted (<code>0</code>).","tags":["3dcitydb","relational schema","appearance","texture","materials"]},{"location":"3dcitydb/appearance-module/#storing-texture-properties","title":"Storing texture properties","text":"<p>Texture properties shared by both ParameterizedTexture and GeoreferencedTexture are represented in the <code>tex_*</code> columns. The corresponding texture image is stored in the <code>TEX_IMAGE</code> table and linked through the <code>tex_image_id</code> foreign key, enabling multiple surface data to use the same texture image.</p> Column Description <code>tex_texture_type</code> Defines the type of texture (<code>specific</code>, <code>typical</code>, <code>unknown</code>). <code>tex_wrap_mode</code> Specifies how textures are wrapped (<code>none</code>, <code>wrap</code>, <code>mirror</code>, <code>clamp</code>, <code>border</code>). <code>tex_border_color</code> Defines the border color for the texture in Hex format (<code>#RRGGBBAA</code>).","tags":["3dcitydb","relational schema","appearance","texture","materials"]},{"location":"3dcitydb/appearance-module/#storing-geo-referenced-texture-properties","title":"Storing geo-referenced texture properties","text":"<p>The orientation and spatial reference specific to a <code>GeoreferencedTexture</code> are stored in the <code>gt_*</code> columns.</p> Column Description <code>gt_orientation</code> Specifies the rotation and scaling of a georeferenced texture image as a 2x2 matrix, stored as JSON array in row-major order. <code>gt_reference_point</code> Defines the 2D point representing the center of the upper left image pixel in real-world space.","tags":["3dcitydb","relational schema","appearance","texture","materials"]},{"location":"3dcitydb/appearance-module/#surface_data_mapping-table","title":"<code>SURFACE_DATA_MAPPING</code> table","text":"<p>The <code>SURFACE_DATA_MAPPING</code> table assigns surface data to surface geometries by linking an entry from the <code>SURFACE_DATA</code> table to the target geometry in the <code>GEOMETRY_DATA</code> table using the foreign keys <code>surface_data_id</code> and <code>geometry_data_id</code>.</p> <p>Surface data is typically assigned to individual polygons. However, geometries in the <code>GEOMETRY_DATA</code> table can represent more complex structures, such as multi-polygons or solids. These are stored using spatial data types of the database that do not support direct referencing of individual components. To assign surface data to specific polygons within the linked geometries, the JSON-based metadata stored alongside the geometry in <code>GEOMETRY_DATA</code> is used. This metadata lists the individual components of the geometry and assigns each a unique <code>\"objectId\"</code> identifier, allowing individual polygons within the geometry to be uniquely referenced.</p> <p>Tip</p> <p>Learn more about the JSON-based metadata for geometries in <code>GEOMETRY_DATA</code> here.</p> <p>Depending on the type of surface data, a specific mapping is used to assign it to the geometry. These mappings are defined as JSON objects and stored in the appropriate columns of the <code>SURFACE_DATA_MAPPING</code> table. The following examples show the different types of mappings and how they are stored.</p>","tags":["3dcitydb","relational schema","appearance","texture","materials"]},{"location":"3dcitydb/appearance-module/#assigning-materials","title":"Assigning materials","text":"<p>To assign an X3DMaterial, the JSON mapping lists the <code>\"objectId\"</code> identifiers of the target surfaces as properties. A value of <code>true</code> indicates that the X3DMaterial should be applied to the corresponding surface. Surfaces that should not receive the material can either be omitted or assigned a value of <code>false</code>. The material mappings are stored in the <code>material_mapping</code> column.</p> <p>The example mapping shown below assigns an X3DMaterial to <code>surface_A</code> and <code>surface_D</code> of the target geometry.</p> <pre><code>{\n  \"surface_A\": true,\n  \"surface_D\": true\n}\n</code></pre>","tags":["3dcitydb","relational schema","appearance","texture","materials"]},{"location":"3dcitydb/appearance-module/#assigning-textures-through-texture-coordinates","title":"Assigning textures through texture coordinates","text":"<p>A ParameterizedTexture is commonly mapped by assigning texture coordinates to all coordinates of the target surface. Each texture coordinate <code>(s, t)</code> is a 2D position in texture space, which always spans a unit square from <code>(0,0)</code> to <code>(1,1)</code>, regardless of the texture image's actual size or aspect ratio. The lower-left corner of the texture image corresponds to <code>(0,0)</code>.</p> <p>In the JSON mapping, each texture coordinate is stored as a double array <code>[s,t]</code>. The texture coordinates for the exterior ring of the target surface are grouped into an array. If the surface has interior rings, separate arrays are provided for their coordinates. All ring arrays are then combined into a single outer array.</p> <p>Similar to material mapping, the JSON object lists the identifiers of the target surfaces that should receive texture coordinates and assigns them the corresponding outer array. The mappings are stored in the <code>texture_mapping</code> column.</p> <p>The example below illustrates texture mapping for <code>surface_B</code> and <code>surface_C</code> of the linked geometry. <code>surface_B</code> has both an exterior and an interior ring, while <code>surface_C</code> has only an exterior ring.</p> <pre><code>{\n  \"surface_B\": [\n    [ [0.0, 0.5], [0.7, 0.3], \u2026, [0.0, 0.5] ], // exterior ring\n    [ [0.1, 0.3], [0.6, 0.4], \u2026, [0.1, 0.3] ]  // interior ring\n  ],\n  \"surface_C\": [\n    [ [0.3, 0.5], [0.1, 0.1], \u2026, [0.3, 0.5] ]  // exterior ring\n  ]\n}\n</code></pre> <p>Rules for texture coordinates</p> <ul> <li>A texture coordinate must be provided for every coordinate in a surface's ring, including the last coordinate   if it duplicates the first to close the ring.</li> <li>Texture coordinates must be listed in the same order as the corresponding ring coordinates of the surface.</li> <li>Every surface must have texture coordinates for its exterior ring. If the surface has interior rings, texture   coordinates must also be provided for each interior ring, following the same order in which the rings appear   in the surface.</li> </ul>","tags":["3dcitydb","relational schema","appearance","texture","materials"]},{"location":"3dcitydb/appearance-module/#assigning-textures-through-linear-transformations","title":"Assigning textures through linear transformations","text":"<p>Alternatively, a ParameterizedTexture can be assigned using a 3x4 transformation matrix, which maps real-world space coordinates to texture coordinates. The matrix is represented as a JSON array in row-major order. Matrix-based texture mappings are stored in the <code>world_to_texture_mapping</code> column.</p> <p>An example texture mapping using a 3x4 transformation matrix is illustrated below.</p> <pre><code>{\n  \"surface_E\": [\n    -0.4, 0.0, 0.0, 183550.0,\n     0.0, 0.0, 0.3333, -37.3333,\n     0.0, 0.0, 0.0, 1.0\n  ]\n}\n</code></pre>","tags":["3dcitydb","relational schema","appearance","texture","materials"]},{"location":"3dcitydb/appearance-module/#assigning-geo-referenced-textures","title":"Assigning geo-referenced textures","text":"<p>Since the orientation and spatial reference of a GeoreferencedTexture are already stored in the <code>SURFACE_DATA</code> table, assigning it to target surfaces only requires listing the surface identifiers and assigning a value of <code>true</code>, just as with material mappings. Surfaces that should not receive the texture are either assigned <code>false</code> or omitted. Texture mappings for geo-referenced textures are stored in the <code>georeferenced_texture_mapping</code> column.</p> <pre><code>{\n  \"surface_F\": true,\n  \"surface_G\": true\n}\n</code></pre> <p>Note</p> <ul> <li>If a mapping lists identifiers not found in the target geometry's JSON metadata, the mapping for those   identifiers is invalid.</li> <li>JSON Schema specifications for each mapping are included in the 3DCityDB software package,   located in the <code>json-schema</code> folder. The schema files are named after the respective column names   (e.g., <code>texture-mapping.schema.json</code>).</li> </ul>","tags":["3dcitydb","relational schema","appearance","texture","materials"]},{"location":"3dcitydb/appearance-module/#tex_image-table","title":"<code>TEX_IMAGE</code> table","text":"<p>Texture images for both ParameterizedTexture and GeoreferencedTexture can be stored as binary blobs in the <code>image_data</code> column of the <code>TEX_IMAGE</code> table. In this case, the <code>image_uri</code> column can store the file name or original path of the texture image. If the image should not be stored directly in the database, the <code>image_data</code> column is set to <code>NULL</code>, and the <code>image_uri</code> should contain a URI pointing to the location of the texture image from which it can be retrieved (e.g., an external URL).</p> <p>The <code>mime_type</code> column specifies the MIME type of the texture image, ensuring that the image can be processed correctly according to its format (e.g., <code>image/png</code> for a PNG image or <code>image/jpeg</code> for a JPEG image). Additionally, the <code>mime_type_codespace</code> column can store an optional code space for the MIME type, providing further context or classification.</p>","tags":["3dcitydb","relational schema","appearance","texture","materials"]},{"location":"3dcitydb/codelist-module/","title":"Codelist module","text":"<p>The Codelist module in 3DCityDB <code>v5</code> adds support for storing codelists, which are tables of values with corresponding descriptions or definitions. Many CityGML properties are designed to take values from codelists, as defined in the CityGML 3.0 Conceptual Model (CM). Codelists may be required, recommended, or suggested by an authority within an organization or community, or more informally defined and used within an application domain.</p> <p></p> <p>Figure 1. Codelist module of the 3DCityDB <code>v5</code> relational schema.</p>","tags":["3dcitydb","relational schema","codelist"]},{"location":"3dcitydb/codelist-module/#codelist-table","title":"<code>CODELIST</code> table","text":"<p>The <code>CODELIST</code> table is used to register codelists. Each codelist is assigned a URL as a unique identifier, which is stored in the <code>url</code> column.</p> <p>In case the <code>url</code> points to an existing external file, the <code>mime_type</code> column should specify the MIME type of the referenced codelist to ensure it can be processed correctly according to its format. CityGML does not prescribe specific formats for codelists but suggests using GML, JSON, and CSV-based encodings (see here).</p> <p>The <code>codelist_type</code> column specifies the CityGML data type associated with the codelist. It stores the qualified classname of the data type as defined in the CityGML CM, such as <code>core:RelationTypeValue</code> or<code>bldg:BuildingClassValue</code>.</p> <p>There is no foreign key connecting the <code>CODELIST</code> table with the <code>PROPERTY</code> table to directly link a codelist with a property that uses values from it. Instead, properties that reference codelists are typically of type <code>core:Code</code>, which includes a <code>codeSpace</code> attribute stored in the <code>val_codespace</code> column. This <code>codeSpace</code> typically points to the URL identifying the codelist from which the property value is taken. The corresponding codelist in the <code>CODELIST</code> table can be identified by matching the <code>codeSpace</code> value with the <code>url</code> column.</p> <p>Note</p> <p>Multiple codelists can be registered for the same <code>codelist_type</code>, such as codelists from different authorities or communities. In these cases, the combination of <code>codelist_type</code> and <code>url</code> should be unique across all entries in the <code>CODELIST</code> table.</p>","tags":["3dcitydb","relational schema","codelist"]},{"location":"3dcitydb/codelist-module/#codelist_entry-table","title":"<code>CODELIST_ENTRY</code> table","text":"<p>The <code>CODELIST_ENTRY</code> tables stores the values of the registered codelists. Each value is linked to a <code>codelist</code> through the <code>codelist_id</code> foreign key, which references an entry in the <code>CODELIST</code> table.</p> <p>The code for each permissible codelist value, along with its definition or description, is stored in the <code>code</code> and <code>definition</code> columns, respectively. This setup allows for easy lookup of the definition for a code that is stored as property value in the <code>PROPERTY</code> table, and vice versa.</p> <p>Tip</p> <p>Besides using the codelist tables to look up or validate property values associated with a codelist during data import and export, they can also be used to build a web service that provides stored codelists as files or serves as a lookup and validation service for individual codelist values. Tools for building such services are not included in the 3DCityDB <code>v5</code>, though.</p>","tags":["3dcitydb","relational schema","codelist"]},{"location":"3dcitydb/db-functions/","title":"Database functions","text":"<p>The 3DCityDB <code>v5</code> includes a set of database-side functions that are automatically installed during setup. These functions perform and expose various database operations, such as deleting or terminating city objects, computing their envelopes, and managing the Coordinate Reference System (CRS) of the 3DCityDB instance. Additionally, they include utility and helper functions. The functions can be used to automate processes and workflows or be integrated into third-party tools for task automation.</p> <p>Tip</p> <p>For PostgreSQL, the functions are written in <code>PL/pgSQL</code> and reside in a dedicated <code>citydb_pkg</code> schema. Since <code>citydb_pkg</code> is automatically added to the database <code>search_path</code> during setup, they can be called without explicitly specifying the schema as a prefix.</p>","tags":["3dcitydb","database functions"]},{"location":"3dcitydb/db-functions/#delete-functions","title":"Delete functions","text":"<p>The delete functions enable the removal of single or multiple city objects while automatically managing integrity constraints between database tables. They serve as low-level APIs, providing dedicated delete functions for various tables \u2014 from individual geometries in the <code>GEOMETRY_DATA</code> table (<code>delete_geometry_data</code> function) to entire features in the <code>FEATURE</code> table, alongside their properties, geometries, and appearances (<code>delete_feature</code> function). These functions enable users to develop more complex delete operations without reimplementing their core functionality.</p> <p>The available delete functions are listed below.</p> Function Return type Description <code>cleanup_schema</code> <code>(schema_name TEXT)</code> <code>void</code> Truncates all data tables <code>delete_feature</code><code>(pid bigint, schema_name TEXT)</code> or  <code>(pid_array bigint[], schema_name TEXT)</code> <code>BIGINT</code> or<code>SETOF BIGINT</code> Deletes entries from <code>FEATURE</code> tablebased on an <code>id</code> or <code>id</code> array <code>delete_property</code><code>(pid bigint, schema_name TEXT)</code> or  <code>(pid_array bigint[], schema_name TEXT)</code> <code>BIGINT</code> or<code>SETOF BIGINT</code> Deletes entries from <code>PROPERTY</code> tablebased on an <code>id</code> or <code>id</code> array <code>delete_geometry_data</code><code>(pid bigint, schema_name TEXT)</code> or  <code>(pid_array bigint[], schema_name TEXT)</code> <code>BIGINT</code> or<code>SETOF BIGINT</code> Deletes entries from <code>GEOMETRY_DATA</code> tablebased on an <code>id</code> or <code>id</code> array <code>delete_implicit_geometry</code><code>(pid bigint, schema_name TEXT)</code> or  <code>(pid_array bigint[], schema_name TEXT)</code> <code>BIGINT</code> or<code>SETOF BIGINT</code> Deletes entries from <code>IMPLICIT_GEOMETRY</code> tablebased on an <code>id</code> or <code>id</code> array <code>delete_appearance</code><code>(pid bigint, schema_name TEXT)</code> or  <code>(pid_array bigint[], schema_name TEXT)</code> <code>BIGINT</code> or<code>SETOF BIGINT</code> Deletes entries from <code>APPEARANCE</code> tablebased on an <code>id</code> or <code>id</code> array <code>delete_surface_data</code><code>(pid bigint, schema_name TEXT)</code> or  <code>(pid_array bigint[], schema_name TEXT)</code> <code>BIGINT</code> or<code>SETOF BIGINT</code> Deletes entries from <code>SURFACE_DATA</code> tablebased on an <code>id</code> or <code>id</code> array <code>delete_tex_image</code><code>(pid bigint, schema_name TEXT)</code> or  <code>(pid_array bigint[], schema_name TEXT)</code> <code>BIGINT</code> or<code>SETOF BIGINT</code> Deletes entries from <code>TEX_IMAGE</code> tablebased on an <code>id</code> or <code>id</code> array <code>delete_address</code> <code>(pid bigint, schema_name TEXT)</code> or  <code>(pid_array bigint[], schema_name TEXT)</code> <code>BIGINT</code> or<code>SETOF BIGINT</code> Deletes entries from <code>ADDRESS</code> tablebased on an id or id array <p>The delete functions are provided in two forms:</p> <ul> <li> <p>Deletion of single entries: One variant accepts the primary key <code>id</code> of a single entry to be deleted and returns the <code>id</code> value if the deletion is successful. If <code>NULL</code> is returned, it indicates that the entry has either already been deleted or an error occurred during the deletion process.</p> </li> <li> <p>Deletion of multiple entries: The other variant accepts an array of <code>id</code> values, returning the id values of the successfully deleted entries as a <code>SETOF BIGINT</code>, allowing multiple entries to be deleted in a single operation.</p> </li> </ul> <p>All functions offer an optional <code>schema_name</code> parameter, allowing you to apply them to different database schemas within your PostgreSQL database. The provided target schema must contain a 3DCityDB <code>v5</code> instance. If the <code>schema_name</code> is omitted, the default schema <code>citydb</code> will be used.</p> <p>The example below demonstrates how to easily delete features based on a query result:</p> <pre><code>-- delete a single feature by id\nSELECT delete_feature(id) FROM feature WHERE ... ;\n\n-- delete multiple features by passing an array of ids\nSELECT delete_feature(array_agg(id)) FROM feature WHERE ... ;\n</code></pre> <p>The <code>id</code>-array based delete functions require fewer <code>DELETE</code> statements and may therefore be faster than deleting the same number of entries by invoking the delete function for each individual <code>id</code>. However, this is not always the case and depends on the ratio between the number of entries to be deleted and the total number of objects in the database. For example, if the <code>id</code> array is very large and covers a significant portion of the table, it may be more efficient to use the single-<code>id</code> version or delete entries in smaller batches.</p> <p>The following example demonstrates how to create a custom function to delete all buildings from the 3DCityDB using the single-<code>id</code> version of <code>delete_feature</code>:</p> <pre><code>-- example procedure for deleting all building features\nDO $$\nDECLARE\n  rec RECORD;\nBEGIN\n  FOR rec IN SELECT * FROM feature where objectclass_id = 901 LOOP\n    -- call the delete_feature function for each id\n    PERFORM delete_feature(rec.id);\n  END LOOP;\nEND $$;\n</code></pre> <p>Note</p> <p>When deleting a feature, all its \"contained\" subfeatures, which are considered a part of the feature, are deleted as well. However, features that are only \"related\" but not considered a part of the feature are not deleted. The distinction between \"contained\" and \"related\" features is determined by evaluating the <code>val_relation_type</code> column of the <code>PROPERTY</code> table, as described here.</p> <p>Tip</p> <p>The <code>cleanup_schema</code> function serves a specific purpose: it truncates all database tables with a single function call. This is the most convenient and fastest way to delete all content from your 3DCityDB <code>v5</code>. However, be cautious when using this function, as it cannot be rolled back.</p>","tags":["3dcitydb","database functions"]},{"location":"3dcitydb/db-functions/#terminate-functions","title":"Terminate functions","text":"<p>The delete functions physically remove city objects from the 3DCityDB instance, helping keep the database streamlined and focused on the most recent versions of features. However, in some cases, it may be preferable to retain the feature history and avoid deleting outdated versions. For such use cases, the 3DCityDB provides additional terminate functions. These functions do not physically delete features but instead mark them as terminated by setting their <code>terminate_date</code> property to the timestamp of the operation. Alongside the <code>creation_date</code> timestamp, the lifespan of the feature in the database can be tracked, allowing multiple historical versions of the same feature to be stored alongside its most recent version.</p> Function Return type Description <code>terminate_feature</code><code>(pid bigint, schema_name TEXT, metadata JSON, cascade BOOLEAN)</code> or  <code>(pid_array bigint[], schema_name TEXT, metadata JSON, cascade BOOLEAN)</code> <code>BIGINT</code> or<code>SETOF BIGINT</code> Terminates features in the <code>FEATURE</code> table based on an <code>id</code> or <code>id</code> array <p>Since the <code>creation_date</code> and <code>termination_date</code> columns are exclusive to the <code>FEATURE</code> table, only the <code>terminate_feature</code> function is available for terminating features. Like the delete functions, this function accepts either a single <code>id</code> or an array of <code>id</code> values and returns the <code>id</code> values of successfully terminated features, as described above.</p> <p>The <code>FEATURE</code> table provides additional metadata columns for features, including <code>last_modification_date</code>, <code>lineage</code>, <code>reason_for_update</code>, and <code>updating_person</code> (see here for more details). The terminate functions allow you to update these values by passing a JSON object as <code>metadata</code> parameter, where each property represents the column name and its corresponding value is the updated data. When omitting single columns in the JSON object or the entire JSON object, the values currently stored in these columns remain unchanged, with the only exception that <code>last_modification_date</code> will be set to the same timestamp as <code>termination_date</code>.</p> <p>The last parameter, <code>cascade</code>, is used to specify whether \"contained\" subfeatures should also be terminated (default: <code>true</code>). Terminating all subfeatures can take significantly longer than just terminating the feature itself, so it is important to evaluate whether cascading termination is necessary based on your use cases and scenarios.</p> <p>The following example demonstrates how to terminate a single feature based on its database <code>id</code>.</p> <pre><code>SELECT terminate_feature(\n    2060316,\n    '{\n        \"reason_for_update\": \"test reason\",\n        \"updating_peron\": \"test person\",\n        \"lineage\": \"test lineage\"\n    }'::json,\n    FALSE\n);\n</code></pre> <p>Note</p> <p>When terminating features, make sure the tools you are using correctly evaluate the <code>termination_date</code> timestamp. This is essential when exporting or processing features to ensure that the tools are working with the correct version of the feature. The <code>citydb-tool</code> included in 3DCityDB <code>v5</code> fully supports feature histories based on the <code>creation_date</code> and <code>termination_date</code> properties.</p>","tags":["3dcitydb","database functions"]},{"location":"3dcitydb/db-functions/#envelope-functions","title":"Envelope functions","text":"<p>The <code>citydb_pkg</code> package offers functions for calculating the 3D bounding box of features and implicit geometries, as well as additional utility functions to support these operations.</p> Function Return type Description <code>get_feature_envelope</code> <code>(fid BIGINT, set_envelope INTEGER, schema_name TEXT)</code> <code>GEOMETRY</code> Returns the envelope geometry of a given feature <code>calc_implicit_geometry_envelope</code> <code>(gid BIGINT, ref_pt GEOMETRY, matrix JSON, schema_name TEXT)</code> <code>GEOMETRY</code> Returns the envelope geometry of a given implicit geometry <code>box2envelope</code> <code>(box BOX3D, schema_name TEXT)</code> <code>GEOMETRY</code> Converts a box geometry to to envelope <code>update_bounds</code> <code>(old_bbox GEOMETRY, new_bbox GEOMETRY, schema_name TEXT)</code> <code>GEOMETRY</code> Returns the envelope geometry of two bounding boxes <p>The <code>get_feature_envelope</code> function computes and returns the envelope of a feature. The feature's primary key <code>id</code> must be provided as input. The bounding volume is calculated by evaluating all the geometries of the feature and its \"contained\" subfeatures across all LoDs, including implicit geometries. The returned geometry is the minimal 3D rectangle that encloses the feature, and it can be directly used as the value for the <code>envelope</code> column of the <code>FEATURE</code> table.</p> <p>The <code>get_feature_envelope</code> function offers two optional parameters: The <code>set_envelope</code> parameter specifies whether the computed envelopes should be used to update the <code>envelope</code> columns of the feature and its subfeatures (<code>1</code> for true, <code>0</code> for false; default: <code>0</code>). The <code>schema_name</code> parameter defines the target database schema to operate in, as explained above (default: <code>citydb</code>).</p> <p>The 3D bounding volume of implicit geometries can be calculated using the <code>calc_implicit_geometry_envelope</code> function. It requires the following inputs: the primary key <code>id</code> of the template geometry from the <code>GEOMETRY_DATA</code> table, a PostGIS <code>POINT</code> geometry specifying the real-world coordinates where the template should be placed (<code>ref_pt</code>), and a 3x4 row-major matrix (JSON double array) defining the rotation, scaling, and translation for the template (<code>matrix</code>).</p> <p>The reference point and transformation matrix follow the format used for storing them in the <code>PROPERTY</code> table (see here). Therefore, the values from the <code>PROPERTY</code> table can be directly used as input parameters.</p> <p>The <code>update_bounds</code> and <code>box2envelope</code> functions are utility functions used by the functions mentioned above. However, they can also be used on their own to update a bounding box based on another or to convert a PostGIS <code>BOX3D</code> geometry into the envelope representation needed for the envelope column in the FEATURE table.</p>","tags":["3dcitydb","database functions"]},{"location":"3dcitydb/db-functions/#crs-functions","title":"CRS functions","text":"<p>The <code>citydb_pkg</code> package provides functions for performing CRS operations on a 3DCityDB instance.</p> Function Return type Description <code>change_schema_srid</code><code>(schema_srid INTEGER, schema_srs_name TEXT, transform INTEGER, schema_name TEXT)</code> <code>SETOF VOID</code> Updates the coordinate system for a database schema <code>change_column_srid</code><code>(table_name TEXT, column_name TEXT, dim INTEGER, schema_srid INTEGER, transform INTEGER, geom_type TEXT, schema_name TEXT)</code> <code>SETOF VOID</code> Updates the coordinate system for a geometry column <code>check_srid</code><code>(srsno INTEGER)</code> <code>TEXT</code> Checks if a given <code>SRID</code> is valid <code>is_coord_ref_sys_3d</code><code>(schema_srid INTEGER)</code> <code>INTEGER</code> Checks if a a CRS is a true 3D system <code>is_db_coord_ref_sys_3d</code><code>(schema_name TEXT)</code> <code>INTEGER</code> Checks if the CRS of the 3DCityDB is true 3D system <p>The primary function is <code>change_schema_srid</code>, which changes the CRS for all geometry columns within the 3DCityDB. It takes the database-specifc <code>SRID</code> (Spatial Reference ID) of the new CRS and its OGC-compliant name as inputs.</p> <p>The function operates in two modes, determined by the value of the <code>transform</code> parameter:</p> <ul> <li>Update metadata only: Changes the geometry SRID in the database metadata without transforming coordinates (<code>transform = 0</code>, default).</li> <li>Transform coordinates: Additionally transforms the coordinates of geometries already stored in the database to the new SRID (<code>transform = 1</code>).</li> </ul> <p>Both modes serve different purposes. For example, if you accidentally set up your 3DCityDB <code>v5</code> with an incorrect SRID that does not match the CRS of the imported geometries, updating only the metadata is sufficient since the coordinates are already in the correct SRID. However, if the geometries are stored in the current SRID of the 3DCityDB but need to be converted to another CRS, the second option is required to transform the coordinates accordingly.</p> <p>As the final step, <code>change_schema_srid</code> automatically updates the metadata in the <code>DATABASE_SRS</code> table with the new values.</p> <p>Note</p> <p>Regardless of the selected operation mode, changing the CRS of a 3DCityDB <code>v5</code> always involves dropping and re-creating spatial indexes on the geometry columns to maintain consistency with the new CRS. As a result, the process can be time-consuming depending on the table size.</p>","tags":["3dcitydb","database functions"]},{"location":"3dcitydb/db-functions/#database-constraint-functions","title":"Database constraint functions","text":"<p>The <code>citydb_pkg</code> package provides functions to set database constraints or modify their behavior.</p> Function Return type Description <code>set_enabled_fkey</code><code>(fkey_trigger_oid OID, enable BOOLEAN)</code> <code>SETOF VOID</code> Enables or disables a given foreign key constraint <code>set_enabled_geom_fkeys</code><code>(enable BOOLEAN, schema_name TEXT)</code> <code>SETOF VOID</code> Enables/disables references to <code>GEOMETRY_DATA</code> table <code>set_enabled_schema_fkeys</code><code>(enable BOOLEAN, schema_name TEXT)</code> <code>SETOF VOID</code> Enables/disables all foreign keys in a given schema <code>set_fkey_delete_rule</code><code>(fkey_name TEXT, table_name TEXT, column_name TEXT, ref_table TEXT, ref_column TEXT, on_delete_param CHAR, schema_name TEXT)</code> <code>SETOF VOID</code> Removes a constraint to add it again with given <code>ON DELETE</code> parameter <code>set_schema_fkeys_delete_rule</code><code>(on_delete_param CHAR, schema_name TEXT)</code> <code>SETOF VOID</code> Updates all the constraints in the specified schema <p>Users can temporarily disable specific foreign key relationships between tables, such as those referencing the <code>GEOMETRY_DATA</code> table. While the constraints remain in place, disabling them can significantly improve performance for bulk write operations, such as importing large volumes of city objects. It is also possible to modify the delete rule of foreign keys, changing it from <code>ON DELETE NO ACTION</code> (use <code>'a'</code> as input) to <code>ON DELETE SET NULL</code> (<code>'n'</code>) or <code>ON DELETE CASCADE</code> (<code>'c'</code>). Switching the delete rule removes and recreates the foreign key constraint.</p> <p>Warning</p> <p>Use these functions with caution. Disabling foreign key constraints may lead to data inconsistencies, and modifying their delete rules can introduce unintended side effects. For example, the delete functions rely on cascading deletes, so disabling this could cause them to malfunction. Similar issues may arise with other database operations.</p>","tags":["3dcitydb","database functions"]},{"location":"3dcitydb/db-functions/#utility-functions","title":"Utility functions","text":"<p>The <code>citydb_pkg</code> package also provides various utility functions as shown below.</p> Function Return type Description <code>citydb_version</code><code>(OUT version TEXT, OUT major_version INTEGER, OUT minor_version INTEGER, OUT minor_revision INTEGER)</code> <code>RECORD</code> Returns the version of the 3DCityDB instance <code>db_metadata</code><code>(schema_name TEXT, OUT srid INTEGER, OUT srs_name TEXT, OUT coord_ref_sys_name TEXT, OUT coord_ref_sys_kind TEXT, OUT wktext TEXT, OUT versioning TEXT)</code> <code>RECORD</code> Returns meta information about the 3DCityDB instance <code>get_seq_values</code><code>(seq_name TEXT,seq_count BIGINT)</code> <code>SETOF BIGINT</code> Returns <code>n</code> sequence values from the given sequence <code>get_child_objectclass_ids</code><code>(class_id INTEGER,skip_abstract INTEGER, schema_name TEXT)</code> <code>SETOF INTEGER</code> Returns the <code>id</code> values of all transitive subclasses of the given object class","tags":["3dcitydb","database functions"]},{"location":"3dcitydb/db-scripts/","title":"Database scripts","text":"<p>The 3DCityDB <code>v5</code> software package comes with shell and SQL scripts for tasks such as setting up or removing a 3DCityDB instance, creating additional schemas, and granting or revoking access permissions. </p> <p>Tip</p> <p>Follow the download instructions to obtain the database scripts. They are available as an individual download package but are also included in the <code>citydb-tool</code> software bundle.</p>","tags":["3dcitydb","database scripts"]},{"location":"3dcitydb/db-scripts/#shell-scripts","title":"Shell scripts","text":"<p>The 3DCityDB <code>v5</code> shell scripts are located in the <code>3dcitydb/postgresql/shell-scripts</code> directory of the 3DCityDB software package or within the installation directory of <code>citydb-tool</code>. They are available in two variants, organized into the following subfolders:</p> <ol> <li><code>unix</code> for use on UNIX/Linux/macOS systems; and</li> <li><code>windows</code> for use on Windows systems.</li> </ol> <p>The following table provides an overview of the available shell scripts and their purposes.</p> Script [.sh|.bat] Description <code>connection-details</code> Stores the connection details for a 3DCityDB instance which are used by all other scripts <code>create-db</code> Creates a new 3DCityDB instance (relational schema including all database functions) <code>create-schema</code> Creates an additional data schema (analogous to the default schema <code>citydb</code>) with a user-defined name <code>drop-db</code> Drops a 3DCityDB instance (incl. all elements of the relational schema) <code>drop-schema</code> Drops a data schema that has been created with <code>create-schema</code> <code>grant-access</code> Grants read-only or read-write access to a 3DCityDB instance <code>revoke-access</code> Revokes read-only or read-write access to a 3DCityDB instance, which has been granted with <code>grant-access</code> <code>create-changelog</code> Create the changelog extension for a 3DCityDB instance <code>drop-changelog</code> Remove the changelog extension from a 3DCityDB instance <p>The scripts are intended to run in an interactive shell session, prompting the user for necessary information to perform their tasks. The <code>connection-details</code> script serves a special purpose, as it defines the connection details for your 3DCityDB <code>v5</code> instance. These details are used by all other scripts, so make sure to adjust them before executing any of them. This includes specifying the full path to the <code>psql</code> executable on your system, which is required by all scripts.</p> <p>Open the <code>connection-details</code> script with a text editor of your choice and enter the necessary information, as shown below.</p> LinuxWindows CMD <pre><code>#!/bin/bash\n# Provide your database details here ----------------\nexport PGBIN=/var/lib/postgresql/[version]/bin\nexport PGHOST=localhost\nexport PGPORT=5432\nexport CITYDB=citydb_v5\nexport PGUSER=citydb_user\n#----------------------------------------------------\n</code></pre> <pre><code># Provide your database details here ----------------\nset PGBIN=C:\\Program Files\\PostgreSQL\\[version]\\bin\nset PGHOST=localhost\nset PGPORT=5432\nset CITYDB=citydb_v5\nset PGUSER=citydb_user\n#----------------------------------------------------\n</code></pre> <p>Info</p> <p>If the <code>psql</code> executable is already on your <code>PATH</code>, you can comment out or remove the line setting the <code>PGBIN</code> variable in the script.</p> <p>After adjusting the <code>connection-details</code> script, all other scripts can be executed either by double-clicking them or by running them from within a shell environment. On UNIX/Linux machines, you may first need to set the appropriate file permissions to make the script executable.</p> <p>The example below demonstrates how to run the <code>create-db</code> script to set up a new 3DCityDB <code>v5</code> instance.</p> LinuxWindows CMD <pre><code>chmod u+x create-db.sh\n./create-db.sh\n</code></pre> <pre><code>create-db.bat\n</code></pre> <p>It is also possible to use a different <code>connection-details</code> file from another folder:</p> LinuxWindows CMD <pre><code>./create-db.sh /path/to/connection-details.sh\n</code></pre> <pre><code>create-db.bat C:\\path\\to\\connection-details.bat\n</code></pre>","tags":["3dcitydb","database scripts"]},{"location":"3dcitydb/db-scripts/#sql-scripts","title":"SQL scripts","text":"<p>Technically, the shell scripts listed above are simply wrappers designed to collect user input in a convenient manner. The actual actions at the database level are carried out by SQL scripts that are invoked by these shell scripts.</p> <p>The SQL scripts are provided in the <code>3dcitydb/postgresql/sql-scripts</code> directory of the 3DCityDB software package or within the installation directory of <code>citydb-tool</code>. Similar to the shell scripts, navigate to the <code>unix</code> or <code>windows</code> subfolder, depending on your operating system. The SQL scripts are designed to be executed with <code>psql</code>.</p> <p>Most of the SQL scripts require input parameters to execute the database action. These parameters should be passed as command-line parameters to <code>psql</code>. Below is an example of how to invoke the <code>create-db.sql</code> script to set up a 3DCityDB <code>v5</code> instance. The required input parameters for this script are discussed in the setup instructions. Refer to the <code>psql</code> documentation for more details on its usage and command-line options.</p> LinuxWindows CMD <pre><code>psql -d \"citydb_v5\" \\\n    -h localhost \\\n    -U \"citydb_user\" \\\n    -f \"/path/to/the/reate-db.sql\" \\\n    -v srid=\"25833\" \\\n    -v srs_name=\"urn:ogc:def:crs:EPSG::25833\" \\\n    -v changelog=\"no\"\n</code></pre> <pre><code>psql -d \"citydb_v5\" ^\n    -h localhost ^\n    -U \"citydb_user\" ^\n    -f \"C:\\path\\to\\the\\create-db.sql\" ^\n    -v srid=\"25833\" ^\n    -v srs_name=\"urn:ogc:def:crs:EPSG::25833\" ^\n    -v changelog=\"no\"\n</code></pre> <p>Tip</p> <p>By using shell or environment variables instead of hardcoding values directly into your command as shown above, you make it easier to reuse the SQL scripts across different setups or systems. This makes automating things, integrating them into other software, or running them as part of a CI/CD pipeline way more flexible. This is an easy way to streamline workflows using the SQL scripts.</p>","tags":["3dcitydb","database scripts"]},{"location":"3dcitydb/docker/","title":"3DCityDB Docker","text":"<p>The 3DCityDB Docker images are available for PostgreSQL/PostGIS. The PostgreSQL/PostGIS version is based on the official PostgreSQL and PostGIS Docker images.</p> <p></p> <p>The images described here are available for 3DCityDB version <code>v5.0.0</code> and newer. Images for 3DCityDB <code>v4.x.x</code> and tools are documented here. Images for older 3DCityDB versions are available from TUM-GIS 3DCityDB Docker images.</p> <p>Docker image versions and compatibility</p> <p>The 3DCityDB Docker images for <code>&gt;= v5.x.x</code> are only available for PostgreSQL/PostGIS and are only compatible with the citydb-tool images, as of writing this (2025-01). See here for more on CityGML version and 3DCityDB tools compatibility.</p> <p>When designing the images we tried to stay as close as possible to the behavior of the base images and the 3DCityDB Shell scripts. Thus, all configuration options you may be used to from the base images, are available for the 3DCityDB Docker images as well.</p> <p>Performance tuning for large datasets</p> <p>The configuration of the PostgreSQL database has significant impact on performance, e.g. for data <code>import</code> and <code>export</code> operations. See Performance tuning for PostgreSQL/PostGIS for more.</p>","tags":["3dcitydb","docker","image","postgresql","postgis","performance tuning"]},{"location":"3dcitydb/docker/#tldr","title":"TL;DR","text":"LinuxWindows CMD <pre><code>docker run --name 3dciytdb -p 5432:5432 -d \\\n    -e POSTGRES_PASSWORD=&lt;theSecretPassword&gt; \\\n    -e SRID=&lt;EPSG code&gt; \\\n    [-e HEIGHT_EPSG=&lt;EPSG code&gt;] \\\n    [-e SRS_NAME=&lt;mySrsName&gt;] \\\n    [-e POSTGRES_DB=&lt;database name&gt;] \\\n    [-e POSTGRES_USER=&lt;username&gt;] \\\n    [-e POSTGIS_SFCGAL=&lt;true|false|yes|no&gt;] \\\n3dcitydb/3dcitydb-pg\n</code></pre> <pre><code>docker run --name 3dciytdb -p 5432:5432 -d ^\n    -e POSTGRES_PASSWORD=&lt;theSecretPassword&gt; ^\n    -e SRID=&lt;EPSG code&gt; ^\n    [-e HEIGHT_EPSG=&lt;EPSG code&gt;] ^\n    [-e SRS_NAME=&lt;mySrsName&gt;] ^\n    [-e POSTGRES_DB=&lt;database name&gt;] ^\n    [-e POSTGRES_USER=&lt;username&gt;] ^\n    [-e POSTGIS_SFCGAL=&lt;true|false|yes|no&gt;] ^\n3dcitydb/3dcitydb-pg\n</code></pre>","tags":["3dcitydb","docker","image","postgresql","postgis","performance tuning"]},{"location":"3dcitydb/docker/#image-variants-and-versions","title":"Image variants and versions","text":"<p>The images are available in various variants and versions. The PostgreSQL/PostGIS images are available based on Debian and Alpine Linux. For the Alpine Linux images <code>-alpine</code> is appended to the image tag. The table below gives an overview on the available image versions.</p> <p>Info</p> <p>Depending on the base image variant and version, different versions of PostGIS dependencies (e.g. geos, gdal, proj, sfcgal) are shipped in the base images. Make sure to check the official PostGIS Docker page for details, if you have specific version requirements.</p> <p>As of 2025-01 the recommended version with latest dependencies (geos=3.12.2, gdal=3.9.2, proj=9.4, and sfcgal=1.5.1) is: <code>latest-alpine</code> <code>5.0.0-alpine</code>, <code>17-3.5-5.0.0-alpine</code> or <code>17-3.5-4.4.0-alpine</code> for 3DCityDB <code>v4</code>.</p> <p>The <code>edge</code> images are automatically built and published on every push to the master branch of the 3DCityDB Github repository using the latest stable version of the base images. The <code>latest</code> and release image versions are only built when a new release is published on Github. The <code>latest</code> tag will point to the most recent release version using the latest base image version.</p> Tag PostGIS (Debian) PostGIS (Alpine) edge latest 5.0.0 4.0.0 <p>Table 1. Overview 3DCityDB Docker image variants and versions.</p> <p>Note</p> <p>Minor releases are not listed in this table.The latest 3DCityDB version is:</p> <p></p> <p>The latest image version is:</p> <p></p> <p>The latest <code>v5-beta</code> image versions are:</p> <p></p>","tags":["3dcitydb","docker","image","postgresql","postgis","performance tuning"]},{"location":"3dcitydb/docker/#get-the-images","title":"Get the images","text":"<p>The PostgreSQL/PostGIS images are available from 3DCityDB DockerHub and Github container registry.</p> Dockerhubghcr.io <pre><code>docker pull 3dcitydb/3dcitydb-pg\n</code></pre> <pre><code>docker pull ghcr.io/3dcitydb/3dcitydb-pg\n</code></pre>","tags":["3dcitydb","docker","image","postgresql","postgis","performance tuning"]},{"location":"3dcitydb/docker/#tags","title":"Tags","text":"<p>3DCityDB Docker offers a wide set of image variants and versions for different purposes that can be accessed using the image tag.</p> Dockerhubghcr.io <pre><code>docker pull 3dcitydb/3dcitydb-pg[:TAG]\n</code></pre> <pre><code>docker pull ghcr.io/3dcitydb/3dcitydb-pg[:TAG]\n</code></pre>","tags":["3dcitydb","docker","image","postgresql","postgis","performance tuning"]},{"location":"3dcitydb/docker/#short-tags","title":"Short tags","text":"<p>For each release of 3DCityDB on Github (e.g. <code>5.x.x</code>) a set of images using the 3DCityDB version and the image variant as tag are released. These versions use the latest base image available. The tags compose of <code>&lt;major&gt;.&lt;minor&gt;[-&lt;image variant&gt;]</code> and <code>&lt;major&gt;[-&lt;image variant&gt;]</code> are volatile and point to the latest 3DCityDB release. For instance, <code>5</code> and <code>5.1</code> will point to <code>5.1.x</code>, if it is the latest version. This is handy, when you want automatic updates for minor or micro releases.</p> Dockerhubghcr.io <pre><code>docker pull 3dcitydb/3dcitydb-pg:5\ndocker pull 3dcitydb/3dcitydb-pg:5.0\ndocker pull 3dcitydb/3dcitydb-pg:5.0.0\ndocker pull 3dcitydb/3dcitydb-pg:latest\n\ndocker pull 3dcitydb/3dcitydb-pg:5-alpine\ndocker pull 3dcitydb/3dcitydb-pg:5.0-alpine\ndocker pull 3dcitydb/3dcitydb-pg:5.0.0-alpine\ndocker pull 3dcitydb/3dcitydb-pg:latest-alpine\n</code></pre> <pre><code>docker pull ghcr.io/3dcitydb-pg:5\ndocker pull ghcr.io/3dcitydb-pg:5.0\ndocker pull ghcr.io/3dcitydb-pg:5.0.0\ndocker pull ghcr.io/3dcitydb-pg:latest\n\ndocker pull ghcr.io/3dcitydb-pg:5-alpine\ndocker pull ghcr.io/3dcitydb-pg:5.0-alpine\ndocker pull ghcr.io/3dcitydb-pg:5.0.0-alpine\ndocker pull ghcr.io/3dcitydb-pg:latest-alpine\n</code></pre>","tags":["3dcitydb","docker","image","postgresql","postgis","performance tuning"]},{"location":"3dcitydb/docker/#version-specific-tags","title":"Version specific tags","text":"<p>Besides the shorthand tags listed above, version specific tags including the base image version are released. This is helpful, if you want to use a specific PostgreSQL or PostGIS version.</p> <p>The image tags are compose of the base image version, the 3DCityDB version and the image variant, <code>&lt;base image version&gt;-&lt;3DCityDB version&gt;-&lt;image variant&gt;</code>. The base image version is inherited from the PostGIS Docker images, e.g. <code>16-3.4</code>. Debian is the default image variant, where no image variant is appended to the tag. For the Alpine Linux images <code>-alpine</code> is appended. Currently supported base image versions are listed in in the table below.</p> PSQL version   PostGIS version  3.0 3.1 3.2 3.3 3.4 3.5 13 13-3.0 13-3.1 13-3.2 13-3.3 13-3.4 13-3.5 14 14-3.1 14-3.2 14-3.3 14-3.4 14-3.5 15 15-3.3 15-3.4 15.3.5 16 16-3.3 16-3.4 16-3.5 17 17-3.4 17-3.5 <p>Table 2. Overview on supported PostgreSQL/PostGIS versions.</p> <p>The full list of available images can be found on DockerHub or Github.</p> <p>Here are some examples for full image tags:</p> Dockerhubghcr.io <pre><code>docker pull 3dcitydb/3dcitydb-pg:9.5-2.5-4.4.0\ndocker pull 3dcitydb/3dcitydb-pg:13-3.2-4.4.0\ndocker pull 3dcitydb/3dcitydb-pg:13-3.2-4.4.0-alpine\ndocker pull 3dcitydb/3dcitydb-pg:17-3.5-4.4.0-alpine\n</code></pre> <pre><code>docker pull ghcr.io/3dcitydb/3dcitydb-pg:9.5-2.5-4.4.0\ndocker pull ghcr.io/3dcitydb/3dcitydb-pg:13-3.2-4.4.0\ndocker pull ghcr.io/3dcitydb/3dcitydb-pg:13-3.2-4.4.0-alpine\ndocker pull ghcr.io/3dcitydb/3dcitydb-pg:17-3.5-4.4.0-alpine\n</code></pre>","tags":["3dcitydb","docker","image","postgresql","postgis","performance tuning"]},{"location":"3dcitydb/docker/#usage-and-configuration","title":"Usage and configuration","text":"<p>A 3DCityDB container is configured by settings environment variables inside the container. For instance, this can be done using the <code>-e VARIABLE=VALUE</code> flag of <code>docker run</code>. The 3DCityDB Docker images introduce the variables <code>SRID</code>, <code>HEIGHT_EPSG</code> and <code>SRS_NAME</code>. Furthermore, some variables inherited from the base images offer important configuration options. Refer to the documentation of the official PostgreSQL and PostGIS Docker images for much more configuration options.</p> <p>Tip</p> <p>All variables besides <code>POSTGRES_PASSWORD</code> and <code>SRID</code> are optional.</p> Environment variable Description <code>SRID</code> EPSG code for the coordinate reference system (CRS) to be used for the 3DCityDB instance. If the <code>SRID</code> is not set, the 3DCityDB instance will not be created, and you will end up with a plain PostgreSQL/PostGIS Docker container. <code>HEIGHT_EPSG</code> EPSG code of the height system. You may omit it or use 0 (default value), if the value is unknown or the above <code>SRID</code> is already 3D. <code>SRS_NAME</code> The srsName to be used in CityGML exports. If this variable is not set, its value will be automatically created in the form <code>urn:ogc:def:crs,crs:EPSG::&lt;SRID&gt;[,crs:EPSG::&lt;HEIGHT_EPSG&gt;]</code> based on the values of the above <code>SRID</code> and <code>HEIGHT_EPSG</code> variables. <code>CHANGELOG</code> yes or no (default value) to specify whether the changelog extension should be created in the 3DCityDB instance to be created. <code>POSTGRES_USER</code> The database username of the 3DCityDB instance to be created. The default value is <code>postgres</code>. <code>POSTGRES_DB</code> The database name of the 3DCityDB instance to be created. If not set, the database name is identical to the value of the above <code>POSTGRES_USER</code> variable. <code>POSTGRES_PASSWORD</code> The database password of the 3DCityDB instance to be created. Please note that this variable is mandatory. <code>POSTGIS_SFCGAL</code> true or false (default) to enabled or disable the PostgreSQL extension <code>postgis_sfcgal</code>. Note: SFCGAL may not be available in some older Alpine based images (PostgresSQL <code>&lt; v12</code>). Refer to the official PostGIS Docker docs for more details. Setting the variable on those images will have no effect. <code>PROJ_NETWORK</code> Since a recent change in the PostGIS base images, coordinate transformation grid files are no longer downloaded automatically. For normal 3DCityDB operation this is not needed, so you can leave this option untouched. If you perform coordinate transformations on the database, this option should be set to <code>PROJ_NETWORK=on</code>.","tags":["3dcitydb","docker","image","postgresql","postgis","performance tuning"]},{"location":"3dcitydb/docker/#how-to-build-images","title":"How to build images","text":"<p>This section describes how to build 3DCityDB Docker images on your own. We have one build argument to set the tag of the base image that is used.</p> <code>BASEIMAGE_TAG=tag of the base image</code> <p>Tag of the base image that is used for the build. Available tags can be found on DockerHub for the PostgreSQL/PostGIS images.</p>","tags":["3dcitydb","docker","image","postgresql","postgis","performance tuning"]},{"location":"3dcitydb/docker/#build-process","title":"Build process","text":"<p>The images are build by cloning the 3DCityDB Github repository and running <code>docker build</code>:</p> <ol> <li> <p>Clone 3DCityDB Github repository and navigate to the <code>postgresql</code> folder in the repo:</p> <pre><code>git clone https://github.com/3dcitydb/3dcitydb.git\ncd 3dcitydb/postgresql/\n</code></pre> </li> <li> <p>Checkout the release version, branch, or commit you want to build form. Available release tags, branches, and commits can be found on Github.</p> <pre><code>git checkout [TAG|BRANCH|COMMIT]\n</code></pre> </li> <li> <p>Build the PostgreSQL/PostGIS image using  <code>docker build</code>:</p> LinuxWindows CMD <pre><code>docker build -t 3dcitydb/3dcitydb-pg .\n\n# or with a specific base image tag\ndocker build . -t 3dcitydb/3dcitydb-pg \\\n    --build-arg BASEIMAGE_TAG=17-3.5\n</code></pre> <pre><code>docker build -t 3dcitydb/3dcitydb-pg .\n\n# or with a specific base image tag\ndocker build . -t 3dcitydb/3dcitydb-pg ^\n    --build-arg BASEIMAGE_TAG=17-3.5\n</code></pre> </li> </ol>","tags":["3dcitydb","docker","image","postgresql","postgis","performance tuning"]},{"location":"3dcitydb/docker/#include-data-in-an-image","title":"Include data in an image","text":"<p>In general, it is not recommended to store data directly inside a Docker image and use docker volumes instead. Volumes are the preferred mechanism for persisting data generated by and used by Docker containers. However, for some use-cases it can be very handy to create a Docker image including data. For instance, if you have automated tests operating on the exact same data every time or you want to prepare a 3DCityDB image including data for a lecture or workshop, that will run out of the box, without having to import data first.</p> <p>Warning</p> <p>The practice described here has many drawbacks and is a potential security threat. It should not be performed with sensitive data!</p>","tags":["3dcitydb","docker","image","postgresql","postgis","performance tuning"]},{"location":"3dcitydb/docker/#image-creation-process","title":"Image creation process","text":"<ol> <li> <p>Choose a 3DCityDB image that is suitable for you purpose. You will not be able to change the image version later, as you could easily do when using volumes (the default). Available versions are listed in Image variants and versions. To update an image with data, it has to be recreated from scrap using the desired/updated base image.</p> </li> <li> <p>Create a Docker network and start a 3DCityDB Docker container:</p> LinuxWindows CMD <pre><code>docker network create citydb-net\ndocker run -d --name citydbTemp \\\n--network citydb-net \\\n-e \"PGDATA=/mydata\" \\\n-e \"POSTGRES_PASSWORD=changeMe\" \\\n-e \"SRID=25832\" \\\n3dcitydb/3dcitydb-pg:17-3.5-5.0.0\n</code></pre> <pre><code>docker network create citydb-net\ndocker run -d --name citydbTemp ^\n--network citydb-net ^\n-e \"PGDATA=/mydata\" ^\n-e \"POSTGRES_PASSWORD=changeMe\" ^\n-e \"SRID=25832\" ^\n3dcitydb/3dcitydb-pg:17-3.5-5.0.0\n</code></pre> <p>Warning</p> <p>The database credentials and settings provided in this step cannot be changed when later on creating containers from this image!</p> <p>Note down the database connection credentials (db name, username,  password) or you won't be able to access the content later.</p> </li> <li> <p>Import data to the container. For this example we are using the  LoD3 Railway dataset and the citydb-tool.</p> LinuxWindows CMD <pre><code>docker run -i -t --rm \\\n    --network citydb-net \\\n    -v /d/temp:/data \\\n3dcitydb/citydb-tool import \\\n    -H citydbTemp \\\n    -d postgres \\\n    -u postgres \\\n    -p changeMe \\\n    /data/Railway_Scene_LoD3.zip\n</code></pre> <pre><code>docker run -i -t --rm ^\n    --network citydb-net ^\n    -v \"d:\\temp:/data\" ^\n3dcitydb/citydb-tool import ^\n    -H citydbTemp ^\n    -d postgres ^\n    -u postgres ^\n    -p changeMe ^\n    /data/Railway_Scene_LoD3.zip\n</code></pre> </li> <li> <p>Stop the running 3DCityDB container, remove the network and commit it to an image:</p> <pre><code>docker stop citydbTemp\ndocker network rm citydb-net\ndocker commit citydbTemp 3dcitydb/3dcitydb-pg:17-3.5-5.0.0-railwayScene_LoD3\n</code></pre> </li> <li> <p>Remove the 3DCityDB container:</p> <pre><code>docker rm -f -v citydbTemp\n</code></pre> <p>We have now created a 3DCityDB image that contains data that can e.g. be pushed to a Docker registry or exported as TAR. When creating containers from this image, it is not required to specify any configuration parameter as you usually would, when creating a fresh 3DCityDB container.</p> LinuxWindows CMD <pre><code>docker run --name cdbWithData --rm -p 5432:5432 \\\n3dcitydb/3dcitydb-pg:17-3.5-5.0.0-railwayScene_LoD3\n</code></pre> <pre><code>docker run --name cdbWithData --rm -p 5432:5432 ^\n3dcitydb/3dcitydb-pg:17-3.5-5.0.0-railwayScene_LoD3\n</code></pre> <p>To connect to the database, use the credentials you set in step 2. The following example lists the tables of the DB running in the container using <code>psql</code>.</p> <pre><code>export PGPASSWORD=postgres\nquery='SELECT COUNT(*) FROM citydb.cityobject;'\npsql -h localhost -p 5432 -U postgres -d postgres -c \"$query\"\n\n# count\n# -------\n#   231\n# (1 row)\n</code></pre> </li> </ol>","tags":["3dcitydb","docker","image","postgresql","postgis","performance tuning"]},{"location":"3dcitydb/docker/#performance-tuning","title":"Performance tuning","text":"<p>The configuration of the PostgreSQL database has significant impact on performance, e.g. for data <code>import</code> and <code>export</code> operations. PostgreSQL databases offer a wide range of configuration parameters that affect database performance and enable e.g. parallelization of queries. Database optimization is a complex topic but using PGTune you can easily get a set of configuration options, that may help to increase database performance.</p> <ol> <li> <p>Visit the PGTune website, fill in the form and generate a set of parameters for your system. You will get something like this:</p> <pre><code># DB Version: 13\n# OS Type: linux\n# DB Type: mixed\n# Total Memory (RAM): 8 GB\n# CPUs num: 8\n# Connections num: 20\n# Data Storage: ssd\n\nmax_connections = 20\nshared_buffers = 2GB\neffective_cache_size = 6GB\nmaintenance_work_mem = 512MB\ncheckpoint_completion_target = 0.9\nwal_buffers = 16MB\ndefault_statistics_target = 100\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nwork_mem = 13107kB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\nmax_worker_processes = 8\nmax_parallel_workers_per_gather = 4\nmax_parallel_workers = 8\nmax_parallel_maintenance_workers = 4\n</code></pre> </li> <li> <p>Pass these configuration parameters to <code>postgres</code> (see emphasized line) using the <code>-c</code> option when starting your 3DCityDB container with <code>docker run</code>.</p> LinuxWindows CMD <pre><code>docker run -d -i -t --name citydb -p 5432:5342 \\\n-e SRID=25832 \\\n-e POSTGRES_PASSWORD=changeMe \\\n3dcitydb/3dcitydb-pg postgres \\\n-c max_connections=20 \\\n-c shared_buffers=2GB \\\n-c effective_cache_size=6GB \\\n-c maintenance_work_mem=512MB \\\n-c checkpoint_completion_target=0.9 \\\n-c wal_buffers=16MB \\\n-c default_statistics_target=100 \\\n-c random_page_cost=1.1 \\\n-c effective_io_concurrency=200 \\\n-c work_mem=13107kB \\\n-c min_wal_size=1GB \\\n-c max_wal_size=4GB \\\n-c max_worker_processes=8 \\\n-c max_parallel_workers_per_gather=4 \\\n-c max_parallel_workers=8 \\\n-c max_parallel_maintenance_workers=4\n</code></pre> <pre><code>docker run -d -i -t --name citydb -p 5432:5342 ^\n-e SRID=25832 ^\n-e POSTGRES_PASSWORD=changeMe ^\n3dcitydb/3dcitydb-pg postgres ^\n-c max_connections=20 ^\n-c shared_buffers=2GB ^\n-c effective_cache_size=6GB ^\n-c maintenance_work_mem=512MB ^\n-c checkpoint_completion_target=0.9 ^\n-c wal_buffers=16MB ^\n-c default_statistics_target=100 ^\n-c random_page_cost=1.1 ^\n-c effective_io_concurrency=200 ^\n-c work_mem=13107kB ^\n-c min_wal_size=1GB ^\n-c max_wal_size=4GB ^\n-c max_worker_processes=8 ^\n-c max_parallel_workers_per_gather=4 ^\n-c max_parallel_workers=8 ^\n-c max_parallel_maintenance_workers=4\n</code></pre> </li> </ol>","tags":["3dcitydb","docker","image","postgresql","postgis","performance tuning"]},{"location":"3dcitydb/docker/#hints-for-highly-parallel-systems","title":"Hints for highly parallel systems","text":"<p>If you are running 3DCityDB Docker on a server with many CPUs, a lot of queries can run in parallel, if you apply suitable tuning options as described above. For highly parallel queries PostgreSQL might exceed shared memory space. Thus, it is recommended to increase Docker shared memory size using the <code>--shm-size</code> option of <code>docker run</code>. Make sure PostgreSQL's <code>shared_buffers</code> option is increased accordingly, as shown in the example below. Testing indicates that increasing the PostgreSQL <code>max_locks_per_transaction</code> option is necessary too for large performance gains.</p> <p>Let's assume a server with following configuration:</p> <pre><code># DB Version: 17\n# OS Type: linux\n# DB Type: dw\n# Total Memory (RAM): 32 GB\n# CPUs num: 16\n# Connections num: 100\n# Data Storage: ssd\n\nmax_connections = 100\nshared_buffers = 8GB\neffective_cache_size = 24GB\nmaintenance_work_mem = 2GB\ncheckpoint_completion_target = 0.9\nwal_buffers = 16MB\ndefault_statistics_target = 500\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nwork_mem = 5242kB\nhuge_pages = try\nmin_wal_size = 4GB\nmax_wal_size = 16GB\nmax_worker_processes = 16\nmax_parallel_workers_per_gather = 8\nmax_parallel_workers = 16\nmax_parallel_maintenance_workers = 4\n</code></pre> LinuxWindows CMD <pre><code>docker run -d -i -t --name citydb -p 5432:5342 \\\n    --shm-size=8g \\\n    -e SRID=25832 \\\n    -e POSTGRES_PASSWORD=changeMe \\\n3dcitydb/3dcitydb-pg postgres \\\n    -c max_connections=100 \\\n    -c shared_buffers=8GB \\\n    -c effective_cache_size=24GB \\\n    -c maintenance_work_mem=2GB \\\n    -c checkpoint_completion_target=0.9 \\\n    -c wal_buffers=16MB \\\n    -c default_statistics_target=500 \\\n    -c random_page_cost=1.1 \\\n    -c effective_io_concurrency=200 \\\n    -c work_mem=5242kB \\\n    -c huge_pages=try \\\n    -c min_wal_size=4GB \\\n    -c max_wal_size=16GB \\\n    -c max_worker_processes=16 \\\n    -c max_parallel_workers_per_gather=8 \\\n    -c max_parallel_workers=16 \\\n    -c max_parallel_maintenance_workers=4 \\\n    -c max_locks_per_transaction=1024\n</code></pre> <pre><code>docker run -d -i -t --name citydb -p 5432:5342 ^\n    --shm-size=8g ^\n    -e SRID=25832 ^\n    -e POSTGRES_PASSWORD=changeMe ^\n3dcitydb/3dcitydb-pg postgres ^\n    -c max_connections=100 ^\n    -c shared_buffers=8GB ^\n    -c effective_cache_size=24GB ^\n    -c maintenance_work_mem=2GB ^\n    -c checkpoint_completion_target=0.9 ^\n    -c wal_buffers=16MB ^\n    -c default_statistics_target=500 ^\n    -c random_page_cost=1.1 ^\n    -c effective_io_concurrency=200 ^\n    -c work_mem=5242kB ^\n    -c huge_pages=try ^\n    -c min_wal_size=4GB ^\n    -c max_wal_size=16GB ^\n    -c max_worker_processes=16 ^\n    -c max_parallel_workers_per_gather=8 ^\n    -c max_parallel_workers=16 ^\n    -c max_parallel_maintenance_workers=4 ^\n    -c max_locks_per_transaction=1024\n</code></pre>","tags":["3dcitydb","docker","image","postgresql","postgis","performance tuning"]},{"location":"3dcitydb/feature-module/","title":"Feature module","text":"<p>The Feature module defines the tables for storing city objects, including their attributes and relationships with other features, geometries, and appearances. It provides a streamlined yet powerful framework capable of representing all city objects defined in CityGML.</p> <p></p> <p>Figure 1. Feature module of the 3DCityDB <code>v5</code> relational schema.</p>","tags":["3dcitydb","relational schema","feature","property","address"]},{"location":"3dcitydb/feature-module/#feature-table","title":"<code>FEATURE</code> table","text":"<p>The <code>FEATURE</code> table is the central table in the 3DCityDB <code>v5</code> relational schema. It serves as the primary storage for all city objects and uniquely identifiable entities such as buildings, roads, or vegetation objects within your city model.</p> <p>Each feature is assigned a unique <code>id</code> as the primary key. The <code>objectid</code> is a string identifier used to uniquely reference a feature within the database and datasets. It is recommended to use a globally unique value for <code>objectid</code> and ensure this column is always populated. The <code>identifier</code> column provides an optional identifier to uniquely distinguish the feature across different systems and potentially multiple versions of the same real-world object. It must be accompanied by a code space, stored in the <code>identifier_codespace</code> column, which indicates the authority responsible for maintaining the <code>identifier</code>.</p> <p>The <code>objectclass_id</code> enforces the type of the feature, such as building, window, city furniture, or tree. It serves as a foreign key to the <code>OBJECTCLASS</code> table, which lists all feature types supported by the 3DCityDB instance.</p> <p>The bi-temporal timestamp pairs <code>creation_date</code> and <code>termination_date</code>, along with <code>valid_from</code> and <code>valid_to</code>, enable the management of feature history. The <code>creation_date</code> and <code>termination_date</code> refer to database time, indicating when the feature was inserted or terminated in the database, while <code>valid_from</code> and <code>valid_to</code> define the feature's lifespan in the real world. The <code>creation_date</code> shall be automatically populated when the feature is first imported into the 3DCityDB, unless the input dataset already contains a value. The <code>termination_date</code> can be used as a flag to indicate that a feature version is no longer active, without physically deleting the feature from the database.</p> <p>The columns <code>last_modification_date</code>, <code>updating_person</code>, <code>reason_for_update</code>, and <code>lineage</code> are specific to 3DCityDB and are not defined in CityGML. These metadata fields capture details about the feature's origin, its update history, the person responsible for changes, and the reasons behind those updates.</p> <p>The spatial <code>envelope</code> column stores the minimal 3D rectangle that encloses the features. This column can be used for efficient spatial queries of features.</p>","tags":["3dcitydb","relational schema","feature","property","address"]},{"location":"3dcitydb/feature-module/#property-table","title":"<code>PROPERTY</code> table","text":"<p>The <code>PROPERTY</code> table is the central place for storing feature properties in the 3DCityDB. Each property is recorded with its name, namespace, data type, and value. This design ensures flexibility and extensibility, allowing the addition of new properties without schema changes. Properties can represent attributes or relationships linking features, geometries, and appearances.</p> <p>Which properties are available for a given feature?</p> <p>As described above, each feature must be assigned a feature type from the <code>OBJECTCLASS</code> table. This table includes a JSON-based type definition specifying the properties available for a feature. It also includes inheritance information, enabling you to look up properties inherited from superfeatures. Check out the Metadata module for more information.</p> <p>The property's name and namespace are stored in the <code>name</code> and <code>namespace_id</code> columns, respectively. The <code>namespace_id</code> is a foreign key referencing a namespace from the <code>NAMESPACE</code> table. Properties are linked to their owning feature via <code>feature_id</code>, which points to the <code>FEATURE</code> table.</p> <p>The <code>datatype_id</code> column enforces the property\u2019s data type and uses a type definition in the <code>DATATYPE</code> table. The value of the property is stored in one or more <code>val_*</code> columns, depending on its data type.</p>","tags":["3dcitydb","relational schema","feature","property","address"]},{"location":"3dcitydb/feature-module/#simple-and-complex-attributes","title":"Simple and complex attributes","text":"<p>Simple attribute values such as integers, doubles, strings, or timestamps are stored in the corresponding <code>val_int</code>, <code>val_double</code>, <code>val_string</code>, or <code>val_timestamp</code> columns. Boolean values are stored in the <code>val_int</code> column, with <code>0</code> representing false and <code>1</code> representing true. Array values of attributes are represented as JSON arrays in the <code>val_array</code> column, with items that can either be simple values or JSON objects.</p> <p>The <code>val_content</code> column can hold arbitrary content as a character blob, while the <code>val_content_mime_type</code> column specifies the MIME type of the content. This setup can be used to store property values in the format they appear in the original input datasets (e.g., GML/XML or JSON).</p> <p>The <code>PROPERTY</code> table also supports complex attributes, which may include both a simple value and nested attributes of either simple or complex types. When the value and the nested attributes can be represented using multiple <code>val_*</code> columns, the entire complex attribute can still be stored in a single row. For example, a measurement with a unit can be stored with the value in the <code>val_double</code> column and the unit in the <code>val_uom</code> column.</p> <p>When complex types cannot be captured in a single row, they are instead represented hierarchically within the <code>PROPERTY</code> table. Nested attributes reference their parent attribute through the <code>parent_id</code> foreign key, which links to the <code>id</code> primary key of the parent property. This structure enables the representation of hierarchies with arbitrary depth.</p>","tags":["3dcitydb","relational schema","feature","property","address"]},{"location":"3dcitydb/feature-module/#relationships","title":"Relationships","text":"<p>In addition to attributes, the <code>PROPERTY</code> table stores relationships that define how a feature is connected to other objects. These relationships are stored as separate rows and are not mixed with attribute values in the same row.</p> <p>Relationships to other features are represented by the <code>feature_id</code> column, linking to related features in the <code>FEATURE</code> table. The <code>val_relation_type</code> defines the type of the feature relationship as an integer:</p> <ul> <li><code>0</code> for \"relates\" (a general association between features), and</li> <li><code>1</code> for \"contains\" (a subfeature relationship, where the referenced feature is considered a part of the parent feature).</li> </ul> <p>Note</p> <p>The relation type has specific implications. For example, \"contained\" features are deleted along with their parent features, while \"related\" features are not (see delete functions).</p> <p>Geometries are linked to features through the <code>val_geometry_id</code> column, which references the <code>GEOMETRY_DATA</code> table. The optional <code>val_lod</code> indicates the Level of Detail (LoD) of the geometry.</p> <p>Implicit geometries are referenced via the <code>val_implicitgeom_id</code> foreign key and are also stored in the <code>GEOMETRY_DATA</code> table. In addition to <code>val_lod</code>, the transformation matrix and reference point needed to define the feature's implicit representation are stored in <code>val_array</code> and <code>val_implicitgeom_refpoint</code>.</p> <p>Appearance and address information are linked using the <code>val_appearance_id</code> and <code>val_address_id</code> foreign keys, referencing the <code>APPEARANCE</code> and <code>ADDRESS</code> tables.</p>","tags":["3dcitydb","relational schema","feature","property","address"]},{"location":"3dcitydb/feature-module/#examples","title":"Examples","text":"<p>In which columns do you store or look up property values?</p> <p>The <code>PROPERTY</code> table is type-enforced, with each data type defined in the <code>DATATYPE</code> table. This table includes a JSON-based type definition for all attributes and relationships, that clearly specifies which <code>val_*</code> column the property value should be stored in and whether a property has nested properties. Each nested property will have its own data type and type definition. Check out the Metadata module for more information.</p> <p>To demonstrate how feature properties are stored in the <code>PROPERTY</code> table based on their data type, let's use the <code>name</code> attribute of city objects as an example. The <code>name</code> attribute is of type <code>core:Code</code>, with a value that is a string-based term and an optional <code>codeSpace</code> attribute. The JSON type definition from the <code>DATATYPE</code> table is as follows:</p> <pre><code>{\n  \"identifier\": \"core:Code\",\n  \"description\": \"Code is a basic type for a string-based term, keyword, or name that can additionally have a code space.\",\n  \"table\": \"property\",\n  \"value\": {\n    \"column\": \"val_string\",\n    \"type\": \"string\"\n  },\n  \"properties\": [\n    {\n      \"name\": \"codeSpace\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies the code space of the term, typically a dictionary, thesaurus, classification scheme, authority, or pattern for the term.\",\n      \"value\": {\n        \"column\": \"val_codespace\",\n        \"type\": \"string\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Based on this definition, the <code>core:Code</code> value is stored as a string in the <code>val_string</code> column, while the nested <code>codeSpace</code> attribute, also a string, is mapped to the <code>val_codespace</code> column. Since the type definition does not require linking the <code>codeSpace</code> via <code>parent_id</code>, both values are stored within the same row, as shown below. Note that all other <code>PROPERTY</code> columns have been omitted for brevity.</p> id name parent_id val_string val_codespace ... 1 \"name\" <code>NULL</code> \"myBuilding\" \"https://example.org/buildings\" ... <p>The <code>height</code> of CityGML buildings can be represented using the <code>con:Height</code> data type, which serves as example of a more complex type. The JSON type definition for this data type in the <code>DATATYPE</code> table is shown below:</p> con:Heightcore:Measurecore:String <pre><code>{\n  \"identifier\": \"con:Height\",\n  \"description\": \"Height represents a vertical distance (measured or estimated) between a low reference and a high reference.\",\n  \"table\": \"property\",\n  \"value\": {\n    \"property\": 0\n  },\n  \"properties\": [\n    {\n      \"name\": \"value\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/construction/5.0\",\n      \"description\": \"Specifies the value of the height above or below ground.\",\n      \"type\": \"core:Measure\",\n      \"join\": {\n        \"table\": \"property\",\n        \"fromColumn\": \"id\",\n        \"toColumn\": \"parent_id\"\n      }\n    },\n    {\n      \"name\": \"status\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/construction/5.0\",\n      \"description\": \"Indicates the way the height has been captured.\",\n      \"type\": \"core:String\",\n      \"join\": {\n        \"table\": \"property\",\n        \"fromColumn\": \"id\",\n        \"toColumn\": \"parent_id\"\n      }\n    },\n    {\n      \"name\": \"lowReference\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/construction/5.0\",\n      \"description\": \"Indicates the low point used to calculate the value of the height.\",\n      \"type\": \"core:Code\",\n      \"join\": {\n        \"table\": \"property\",\n        \"fromColumn\": \"id\",\n        \"toColumn\": \"parent_id\"\n      }\n    },\n    {\n      \"name\": \"highReference\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/construction/5.0\",\n      \"description\": \"Indicates the high point used to calculate the value of the height.\",\n      \"type\": \"core:Code\",\n      \"join\": {\n        \"table\": \"property\",\n        \"fromColumn\": \"id\",\n        \"toColumn\": \"parent_id\"\n      }\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  \"identifier\": \"core:Measure\",\n  \"description\": \"Measure is a basic type that represents an amount encoded as double value with a unit of measurement.\",\n  \"table\": \"property\",\n  \"value\": {\n    \"column\": \"val_double\",\n    \"type\": \"double\"\n  },\n  \"properties\": [\n    {\n      \"name\": \"uom\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies the unit of measurement of the amount.\",\n      \"value\": {\n        \"column\": \"val_uom\",\n        \"type\": \"string\"\n      }\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  \"identifier\": \"core:String\",\n  \"description\": \"String is a basic type that represents a sequence of characters.\",\n  \"table\": \"property\",\n  \"value\": {\n    \"column\": \"val_string\",\n    \"type\": \"string\"\n  }\n}\n</code></pre> <p>This type definition specifies that <code>con:Height</code> has four nested attributes:</p> <ol> <li><code>value</code> of type <code>core:Measure</code>: Represents a measurement, with the value stored in <code>val_double</code> and the unit in    <code>val_uom</code>.</li> <li><code>status</code> of type <code>core:String</code>: A simple string stored in <code>val_string</code>.</li> <li><code>lowReference</code> of type <code>core:Code</code>: As explained earlier, a string stored in <code>val_string</code>, with the code space stored    in <code>val_codespace</code>.</li> <li><code>highReference</code> of type <code>core:Code</code>: Stored the same way as <code>lowReference</code>.</li> </ol> <p>Additionally, the <code>\"join\"</code> property in the JSON defines a hierarchical relationship, where each of these attributes is linked back to the parent through the <code>parent_id</code> foreign key. This means that each nested attribute should be stored in a separate row, all referencing the same parent <code>id</code>. Since <code>con:Height</code> does not store an own <code>\"value\"</code>, the parent row will have <code>NULL</code> in all <code>val_*</code> columns.</p> id name parent_id val_string val_double val_uom val_codespace ... 1 \"height\" <code>NULL</code> <code>NULL</code> <code>NULL</code> <code>NULL</code> <code>NULL</code> ... 2 \"value\" 1 <code>NULL</code> 11.0 \"m\" <code>NULL</code> ... 3 \"status\" 1 \"measured\" <code>NULL</code> <code>NULL</code> <code>NULL</code> ... 4 \"lowReference\" 1 \"lowestGroundPoint\" <code>NULL</code> <code>NULL</code> \"https://references.org/heights\" ... 5 \"highReference\" 1 \"highestRoofEdge\" <code>NULL</code> <code>NULL</code> \"https://references.org/heights\" ...","tags":["3dcitydb","relational schema","feature","property","address"]},{"location":"3dcitydb/feature-module/#address-table","title":"<code>ADDRESS</code> table","text":"<p>Although <code>Address</code> is a feature type in CityGML, it is not stored in the <code>FEATURE</code> table. Instead, it is mapped to a dedicated <code>ADDRESS</code> table in the 3DCityDB relational schema. Address data is valuable in its own right and serves as foundation for specialized location services. Storing addresses in a separate table enables more efficient indexing, querying, and updates without impacting the <code>FEATURE</code> table, which may contain a large number of city objects and spatial features.</p> <p>The columns <code>objectid</code>, <code>identifier</code>, and <code>identifier_codespace</code> in the <code>ADDRESS</code> table are used to store unique identifiers for an address object, serving the same purpose as in the <code>FEATURE</code> table, as explained above. Address information is then mapped to the following dedicated columns:</p> Column Description <code>street</code> Holds the name of the street or road where the address is located. <code>house_number</code> Stores the building or house number. <code>po_box</code> Stores the post office box number associated with the address, if applicable. <code>zip_code</code> Holds the postal or ZIP code, helping to define the location more precisely. <code>city</code> Stores the name of the city or locality. <code>state</code> Contains the name of the state, province, or region. <code>country</code> Stores the name of the country in which the address resides. <code>free_text</code> Allows the storage of address information as unstructured text. It can be used to supplement or replace the other structured fields. <code>multi_point</code> Stores the geolocation of an address as multi-point geometry, enabling efficient spatial queries and reverse location services. <p>Together, these columns provide a comprehensive and flexible structure for storing address data in a variety of formats and contexts. However, if the original address information is more complex and needs to be preserved, the <code>content</code> column can be used to store the address data in its original format as a character blob, with the <code>content_mime_type</code> column specifying the MIME type of the content.</p> <p>Note</p> <p>The multi-point geometry of an address must be provided in the same Coordinate Reference System (CRS) as defined for your entire 3DCityDB instance.</p>","tags":["3dcitydb","relational schema","feature","property","address"]},{"location":"3dcitydb/geometry-module/","title":"Geometry module","text":"<p>The Geometry module contains the tables for storing feature geometries, as well as implicit geometries. These implicit geometries can be reused as templates for multiple features, following the CityGML implicit geometry concept.</p> <p></p> <p>Figure 1. Geometry module of the 3DCityDB <code>v5</code> relational schema.</p>","tags":["3dcitydb","relational schema","geometry","implicit geometry"]},{"location":"3dcitydb/geometry-module/#geometry_data-table","title":"<code>GEOMETRY_DATA</code> table","text":"<p>The <code>GEOMETRY_DATA</code> table serves as the central location for storing both explicit and implicit geometry data of the features in the 3DCityDB. It supports various geometry types, including points, lines, surface-based geometries, and volume geometries.</p>","tags":["3dcitydb","relational schema","geometry","implicit geometry"]},{"location":"3dcitydb/geometry-module/#feature-geometries","title":"Feature geometries","text":"<p>Explicit feature geometries, which are geometries with real-world coordinates, are stored in the <code>geometry</code> column. This column uses a predefined spatial data type from the database system running the 3DCityDB to store the geometry data. All geometries must be stored with 3D coordinates and must be provided in the Coordinate Reference System (CRS) defined for the 3DCityDB instance. To enable efficient spatial queries, the <code>geometry</code> column is indexed by default.</p> <p>The link between a feature stored in the <code>FEATURE</code> table and its geometries is stored as a geometry property in the <code>PROPERTY</code> table. Additionally, the <code>GEOMETRY_DATA</code> table contains a <code>feature_id</code> foreign key, providing a back-link to the feature. This setup allows you to query features and follow to the geometry, or query geometries and trace back to the feature.</p>","tags":["3dcitydb","relational schema","geometry","implicit geometry"]},{"location":"3dcitydb/geometry-module/#implicit-geometries","title":"Implicit geometries","text":"<p>Implicit geometries are stored in the <code>implicit_geometry</code> column of the <code>GEOMETRY_DATA</code> table. Unlike feature geometries, implicit geometries use local coordinates, which allows them to serve as templates for multiple city objects in the database. This is also the reason why they are stored in a separate column, rather than in the <code>geometry</code> column. Since implicit geometries are not assigned to specific features directly, the <code>feature_id</code> column is set to <code>NULL</code>. Instead, they are referenced from the <code>IMPLICIT_GEOMETRY</code> table.</p> <p>Implicit geometries are typically not involved in spatial queries, so the <code>implicit_geometry</code> column does not have a spatial index by default.</p>","tags":["3dcitydb","relational schema","geometry","implicit geometry"]},{"location":"3dcitydb/geometry-module/#json-based-metadata","title":"JSON-based metadata","text":"<p>The use of predefined spatial database types for storing both explicit and implicit geometries presents two main challenges:</p> <ol> <li> <p>Geometry types: CityGML features use a wide range of geometry types, including primitives (i.e.,    points, lines, surfaces, and volume geometries) and composite or aggregate geometries, all based on    the ISO 19107 spatial schema standard. However, the predefined spatial database types typically cover only a    subset of these, limiting the ability to fully represent all CityGML geometries.</p> </li> <li> <p>Reuse and referencing: CityGML allows geometries to be reused by reference and assigned textures or colors.    For this, each geometry and its components requires unique identifiers. However, spatial database types    typically store only raw coordinates, lacking the ability to assign unique identifiers, which limits effective    referencing and reuse.</p> </li> </ol> <p>Previous versions of 3DCityDB addressed these challenges by decomposing surface geometries into individual polygons, each stored in a separate row with a unique identifier. A hierarchical structure grouped the polygons by their original geometry type. While this enabled efficient referencing, it required recomposing geometries on-the-fly for spatial queries, making them slower and less efficient. Additionally, it increased storage requirements and was only applied to surface-based geometries, not points or lines.</p> <p>The 3DCityDB <code>v5</code> solution of using spatial database types to store entire geometries, without decomposition, greatly improves spatial query performance and reduces storage requirements. To preserve the ability to reuse and reference geometries and their parts, and to maintain the expressivity of CityGML geometry types, JSON-based metadata is stored alongside the geometry in the <code>geometry_properties</code> column.</p> <p>To illustrate the structure and use of this JSON metadata, consider storing a CityGML solid geometry in PostgreSQL/PostGIS. The PostGIS-specific data type used is <code>POLYHEDRALSURFACE Z</code>, which stores a simple array of polygons. The following snippet demonstrates how a unit cube is represented as a polyhedral surface consisting of six polygons. The equivalent CityGML <code>Solid</code> geometry is shown in a second tab.</p> POLYHEDRALSURFACE ZCityGML Solid <pre><code>POLYHEDRALSURFACE Z (\n  ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0)),\n  ((0 0 0, 0 1 0, 0 1 1, 0 0 1, 0 0 0)),\n  ((0 0 0, 1 0 0, 1 0 1, 0 0 1, 0 0 0)),\n  ((1 1 1, 1 0 1, 0 0 1, 0 1 1, 1 1 1)),\n  ((1 1 1, 1 0 1, 1 0 0, 1 1 0, 1 1 1)),\n  ((1 1 1, 1 1 0, 0 1 0, 0 1 1, 1 1 1))\n)\n</code></pre> <pre><code>&lt;gml:Solid gml:id=\"mySolid\"&gt;\n  &lt;gml:exterior&gt;\n    &lt;gml:Shell gml:id=\"myOuterShell\"&gt;\n      &lt;gml:surfaceMember&gt;\n        &lt;gml:Polygon gml:id=\"first\"&gt;\n          &lt;gml:exterior&gt;\n            &lt;gml:LinearRing&gt;\n              &lt;gml:posList&gt;0 0 0 0 1 0 1 1 0 1 0 0 0 0 0&lt;/gml:posList&gt;\n            &lt;/gml:LinearRing&gt;\n          &lt;/gml:exterior&gt;\n        &lt;/gml:Polygon&gt;\n      &lt;/gml:surfaceMember&gt;\n      &lt;gml:surfaceMember&gt;\n        &lt;gml:Polygon gml:id=\"second\"&gt;\n          &lt;gml:exterior&gt;\n            &lt;gml:LinearRing&gt;\n              &lt;gml:posList&gt;0 0 0 0 1 0 0 1 1 0 0 1 0 0 0&lt;/gml:posList&gt;\n            &lt;/gml:LinearRing&gt;\n          &lt;/gml:exterior&gt;\n        &lt;/gml:Polygon&gt;\n      &lt;/gml:surfaceMember&gt;\n      &lt;gml:surfaceMember&gt;\n        &lt;gml:Polygon gml:id=\"third\"&gt;\n          &lt;gml:exterior&gt;\n            &lt;gml:LinearRing&gt;\n              &lt;gml:posList&gt;0 0 0 1 0 0 1 0 1 0 0 1 0 0 0&lt;/gml:posList&gt;\n            &lt;/gml:LinearRing&gt;\n          &lt;/gml:exterior&gt;\n        &lt;/gml:Polygon&gt;\n      &lt;/gml:surfaceMember&gt;\n      &lt;gml:surfaceMember&gt;\n        &lt;gml:Polygon gml:id=\"fourth\"&gt;\n          &lt;gml:exterior&gt;\n            &lt;gml:LinearRing&gt;\n              &lt;gml:posList&gt;1 1 1 1 0 1 0 0 1 0 1 1 1 1 1&lt;/gml:posList&gt;\n            &lt;/gml:LinearRing&gt;\n          &lt;/gml:exterior&gt;\n        &lt;/gml:Polygon&gt;\n      &lt;/gml:surfaceMember&gt;\n      &lt;gml:surfaceMember&gt;\n        &lt;gml:Polygon gml:id=\"fifth\"&gt;\n          &lt;gml:exterior&gt;\n            &lt;gml:LinearRing&gt;\n              &lt;gml:posList&gt;1 1 1 1 0 1 1 0 0 1 1 0 1 1 1&lt;/gml:posList&gt;\n            &lt;/gml:LinearRing&gt;\n          &lt;/gml:exterior&gt;\n        &lt;/gml:Polygon&gt;\n      &lt;/gml:surfaceMember&gt;\n      &lt;gml:surfaceMember&gt;\n        &lt;gml:Polygon gml:id=\"sixth\"&gt;\n          &lt;gml:exterior&gt;\n            &lt;gml:LinearRing&gt;\n              &lt;gml:posList&gt;1 1 1 1 1 0 0 1 0 0 1 1 1 1 1&lt;/gml:posList&gt;\n            &lt;/gml:LinearRing&gt;\n          &lt;/gml:exterior&gt;\n        &lt;/gml:Polygon&gt;\n      &lt;/gml:surfaceMember&gt;\n    &lt;/gml:Shell&gt;\n  &lt;/gml:exterior&gt;\n&lt;/gml:Solid&gt;\n</code></pre> <p>Unlike the PostGIS polyhedral surface, the CityGML <code>Solid</code> geometry has an additional <code>CompositeSurface</code> to represent the outer shell formed by the polygons. Moreover, the solid, the composite surface, and each polygon have an identifier that allows the reuse of the component and the assignment of textures or colors. The following JSON object encodes this extra metadata and links it to the <code>POLYHEDRALSURFACE Z</code> representation:</p> <pre><code>{\n  \"type\": 9, // (1)!\n  \"objectId\": \"mySolid\",\n  \"children\": [\n    {\n      \"type\": 6, // (2)!\n      \"objectId\": \"myOuterShell\"\n    },\n    {\n      \"type\": 5, // (3)!\n      \"objectId\": \"first\",\n      \"parent\": 0,\n      \"geometryIndex\": 0\n    },\n    {\n      \"type\": 5,\n      \"objectId\": \"second\",\n      \"parent\": 0,\n      \"geometryIndex\": 1\n    },\n    {\n      \"type\": 5,\n      \"objectId\": \"third\",\n      \"parent\": 0,\n      \"geometryIndex\": 2\n    },\n    {\n      \"type\": 5,\n      \"objectId\": \"fourth\",\n      \"parent\": 0,\n      \"geometryIndex\": 3\n    },\n    {\n      \"type\": 5,\n      \"objectId\": \"fifth\",\n      \"parent\": 0,\n      \"geometryIndex\": 4\n    },\n    {\n      \"type\": 5,\n      \"objectId\": \"sixth\",\n      \"parent\": 0,\n      \"geometryIndex\": 5\n    }\n  ]\n}\n</code></pre> <ol> <li>A value of <code>9</code> means <code>Solid</code>.</li> <li>A value of <code>6</code> means <code>CompositeSurface</code>.</li> <li>A value of <code>5</code> means <code>Polygon</code>.</li> </ol> <p>The metadata is interpreted as follows: The <code>\"type\"</code> property of the JSON object classifies the geometry as a <code>Solid</code> (<code>type = 9</code>), with a unique <code>\"objectId\"</code> of <code>\"mySolid\"</code>. The <code>\"children\"</code> array lists all the components of the <code>Solid</code> and establishes a hierarchical relationship between them. The first item in the <code>\"children\"</code> array represents the outer shell of the solid (<code>type = 6</code>) and is identified as <code>\"myOuterShell\"</code>. As defined in ISO 19107, the outer shell acts as a container but does not directly reference a specific geometry from the polyhedral surface.</p> <p>The other six items in the <code>\"children\"</code> array represent the individual polygons (<code>type = 5</code>) that form the outer shell. Each polygon has its own unique <code>\"objectId\"</code>. The <code>\"parent\"</code> field contains a <code>0</code>-based reference into the <code>\"children\"</code> array and defines the parent of the component. In this example, a value of <code>0</code> indicates that the polygon belongs to the outer shell. The <code>\"geometryIndex\"</code> is a <code>0</code>-based index linking the child to a specific polygon of the polyhedral surface stored in the <code>geometry</code> column.</p> <p>Summary</p> <p>This simple JSON structure works for mapping any CityGML geometry type onto a spatial database type. In summary, the main idea is that the primitives in the spatial database type (points, lines, polygons) are referenced by the <code>geometryIndex</code>, while the <code>children</code> and <code>parent</code> structure enables embedding the primitives into any CityGML geometry hierarchy. The <code>objectId</code> provides a unique identifier for each component, ensuring that each geometry and its parts can be individually referenced and distinguished within the database.</p> <p>The following list shows all supported values for the <code>type</code> attribute in the JSON metadata, mapping them to their corresponding CityGML geometry types:</p> <pre><code>    1: Point\n    2: MultiPoint\n    3: LineString\n    4: MultiLineString\n    5: Polygon\n    6: CompositeSurface\n    7: TriangulatedSurface\n    8: MultiSurface\n    9: Solid\n    10: CompositeSolid\n    11: MultiSolid\n</code></pre> <p>In addition to <code>\"objectId\"</code>, <code>\"type\"</code>, and <code>\"children\"</code> mentioned above, the JSON metadata object can also include the <code>\"is2D\"</code> property. When <code>\"is2D\"</code> is set to <code>true</code>, the geometry should be interpreted as 2D. However, it must still be stored using 3D coordinates in the <code>geometry</code> column (e.g., with a height value of <code>0</code>). Tools processing the geometry should ignore height values when <code>\"is2D\"</code> is set.</p> <p>Additionally, each component in the <code>\"children\"</code> array can have an <code>\"isReversed\"</code> property. This flag indicates whether the coordinates of the component were flipped during import to reverse its orientation. This can occur, for example, when importing CityGML datasets that contain orientable primitives such as <code>gml:OrientableSurface</code> with their <code>orientation</code> attribute set to <code>\"-\"</code>. The <code>\"isReversed\"</code> property enables tools to export the component as orientable primitive again.</p> <p>Tip</p> <p>The 3DCityDB software package includes a JSON Schema specification that defines the allowed structure of the JSON metadata object. You can find this schema file, named <code>geometry-properties.schema.json</code>, in the <code>json-schema</code> folder of the software package.</p>","tags":["3dcitydb","relational schema","geometry","implicit geometry"]},{"location":"3dcitydb/geometry-module/#implicit_geometry-table","title":"<code>IMPLICIT_GEOMETRY</code> table","text":"<p>The <code>IMPLICIT_GEOMETRY</code> table implements the concept of implicit geometries in CityGML. An implicit geometry is a template that is stored only once in the 3DCityDB and can be reused by multiple city objects. Examples of implicit geometries include 3D tree models, where different tree species and heights are represented as template geometries. These tree models can then be instantiated at various locations for specific tree features according to their species.</p> <p>Each tree feature can specify a reference point where the template geometry should be placed, along with an individual 3x4 transformation matrix to apply scaling, rotation, and translation to the model. The relationship between a feature in the <code>FEATURE</code> table and an implicit geometry in the <code>IMPLICIT_GEOMETRY</code> table is established through a corresponding entry in the <code>PROPERTY</code> table. The feature-specific reference point and transformation matrix are stored with this relationship in the <code>PROPERTY</code> table (see here).</p> <p>The <code>IMPLICIT_GEOMETRY</code> table supports three methods for storing template geometries:</p> <ol> <li>Stored as geometries with local coordinates: These geometries are saved in the <code>implicit_geometry</code> column of the    <code>GEOMETRY_DATA</code> table, as explained earlier. The geometry is then referenced through the <code>relative_geometry_id</code> foreign key.</li> <li>Stored as binary blobs: The 3D model is stored in a specific data format as a binary object in the <code>library_object</code>    column.</li> <li>Stored as references to external 3D models: In this case, the 3D model is referenced through a URI stored in the    <code>reference_to_library</code> column, pointing to an external file or system.</li> </ol> <p>For both methods 2 and 3, the <code>mime_type</code> column should specify the MIME type of the binary 3D model or external file. This ensures that the 3D model can be processed correctly according to its format (e.g., <code>model/gltf+json</code> for a glTF model or <code>application/vnd.collada+xml</code> for a COLLADA model). Additionally, the <code>mime_type_codespace</code> column can store an optional code space for the MIME type, providing further context or classification.</p> <p>Finally, the <code>objectid</code> column provides a unique identifier for the implicit geometry, ideally globally unique.</p> <p>Tip</p> <p>The recommended approach for storing implicit geometries is to store them in the <code>GEOMETRY_DATA</code> table with local coordinates. Storing arbitrary binary 3D models carries the risk that tools may not be able to process the models correctly.</p>","tags":["3dcitydb","relational schema","geometry","implicit geometry"]},{"location":"3dcitydb/metadata-module/","title":"Metadata module","text":"<p>The Metadata module provides meta-information about the 3DCityDB instance and its city model data. The 3DCityDB <code>v5</code> enforces type constraints, requiring features in the <code>FEATURE</code> table and properties in the <code>PROPERTY</code> table to have a type defined in the Metadata module. The predefined types of the Metadata module implement the CityGML 3.0 Conceptual Model (CM), making the 3DCityDB <code>v5</code> a complete implementation of CityGML 3.0. CityGML versions 2.0 and 1.0 are supported by mapping their elements to the predefined types.</p> <p>The Metadata module is extensible, allowing the addition of user-defined types and properties to store domain-specific data not covered by CityGML. As a result, the 3DCityDB <code>v5</code> fully supports the CityGML Application Domain Extension (ADE) mechanism.</p> <p></p> <p>Figure 1. Metadata module of the 3DCityDB <code>v5</code> relational schema.</p>","tags":["3dcitydb","ade","database srs","datatype","metadata","namespace","objectclass","relational schema"]},{"location":"3dcitydb/metadata-module/#namespace-table","title":"<code>NAMESPACE</code> table","text":"<p>All types and properties in the 3DCityDB <code>v5</code> must be associated with a namespace. This helps avoid name collisions and logically categorizes the content stored in the 3DCityDB <code>v5</code> according to the CityGML 3.0 CM. Namespaces are recorded in the <code>NAMESPACE</code> table and populated with the following values when setting up a 3DCityDB instance.</p> id alias namespace 1 core http://3dcitydb.org/3dcitydb/core/5.0 2 dyn http://3dcitydb.org/3dcitydb/dynamizer/5.0 3 gen http://3dcitydb.org/3dcitydb/generics/5.0 4 luse http://3dcitydb.org/3dcitydb/landuse/5.0 5 pcl http://3dcitydb.org/3dcitydb/pointcloud/5.0 6 dem http://3dcitydb.org/3dcitydb/relief/5.0 7 tran http://3dcitydb.org/3dcitydb/transportation/5.0 8 con http://3dcitydb.org/3dcitydb/construction/5.0 9 tun http://3dcitydb.org/3dcitydb/tunnel/5.0 10 bldg http://3dcitydb.org/3dcitydb/building/5.0 11 brid http://3dcitydb.org/3dcitydb/bridge/5.0 12 app http://3dcitydb.org/3dcitydb/appearance/5.0 13 grp http://3dcitydb.org/3dcitydb/cityobjectgroup/5.0 14 veg http://3dcitydb.org/3dcitydb/vegetation/5.0 15 vers http://3dcitydb.org/3dcitydb/versioning/5.0 16 wtr http://3dcitydb.org/3dcitydb/waterbody/5.0 17 frn http://3dcitydb.org/3dcitydb/cityfurniture/5.0 18 depr http://3dcitydb.org/3dcitydb/deprecated/5.0 <p>The namespaces are closely aligned with the thematic modules defined in the CityGML 3.0 CM. Each namespace is associated with an <code>alias</code>, which acts as a shortcut for the namespace and must be unique across all entries in the <code>NAMESPACE</code> table.</p> <p>The <code>depr</code> namespace serves a special purpose by identifying deprecated types and properties used to store content from CityGML 2.0 and 1.0. Since CityGML 3.0 is not fully backward compatible, such content cannot be mapped to predefined types and properties in other namespaces. This ensures that deprecated content can be stored, maintaining full support for CityGML 2.0 and 1.0.</p> <p>The list of namespaces in the <code>NAMESPACE</code> table is not exhaustive and can be extended with user-defined namespaces, typically from an ADE. In this case, the <code>ade_id</code> foreign key must reference the ADE registered in the <code>ADE</code> table that defines the namespace.</p>","tags":["3dcitydb","ade","database srs","datatype","metadata","namespace","objectclass","relational schema"]},{"location":"3dcitydb/metadata-module/#objectclass-table","title":"<code>OBJECTCLASS</code> table","text":"<p>The <code>OBJECTCLASS</code> table serves as the registry for all feature types supported by the 3DCityDB <code>v5</code>. Every feature stored in the <code>FEATURE</code> table must be associated with a feature type from this table. When setting up a new 3DCityDB instance, the table is populated with type definitions for all feature classes defined in the CityGML 3.0 CM, including abstract classes.</p> <p>Every feature type registered in the <code>OBJECTCLASS</code> table is uniquely identified by its name and namespace, which are stored in the <code>classname</code> and <code>namespace_id</code> columns, respectively. The <code>namespace_id</code> is a foreign key referencing a namespace from the <code>NAMESPACE</code> table.</p> <p>The flags <code>is_abstract</code> and <code>is_toplevel</code> determine whether the feature type is abstract or a top-level feature, based on the corresponding feature class definition in the CityGML 3.0 CM. For both flags, a value of <code>1</code> means true, and <code>0</code> represents false.</p> <p>Note</p> <p>Abstract feature types cannot be used as a type for features in the <code>FEATURE</code> table.</p> <p>Type inheritance is represented by the <code>superclass_id</code> column, which serves as a foreign key linking a subtype to its supertype. Transitive inheritance is supported, allowing feature types to form hierarchical structures.</p> <p>Users can extend the <code>OBJECTCLASS</code> table with custom feature types, typically from an ADE. As mentioned earlier, the <code>ade_id</code> foreign key must point to the ADE registered in the <code>ADE</code> table that defines the feature type. Ensure that the correct supertype is defined for custom feature types.</p>","tags":["3dcitydb","ade","database srs","datatype","metadata","namespace","objectclass","relational schema"]},{"location":"3dcitydb/metadata-module/#json-based-schema-mapping","title":"JSON-based schema mapping","text":"<p>In addition to the type information stored in the columns mentioned above, the <code>schema</code> column contains a JSON-based schema mapping that provides additional details about the feature type and its mapping to the relational schema of the 3DCityDB <code>v5</code>, including feature properties and their data types.</p> <p>Tip</p> <p>The JSON-based schema mapping is essential for understanding how feature types and their properties are represented and retrieved in the 3DCityDB <code>v5</code>. Tools can automatically parse and interpret it to interact with the database.</p> <p>The example below shows the JSON definitions for the <code>Road</code> feature type and the common supertype <code>AbstractObject</code>.</p> tran:Roadcore:AbstractObject <pre><code>{\n  \"identifier\": \"tran:Road\",\n  \"description\": \"A Road is a transportation space used by vehicles, bicycles and/or pedestrians.\",\n  \"table\": \"feature\",\n  \"properties\": [\n    {\n      \"name\": \"class\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/transportation/5.0\",\n      \"description\": \"Indicates the specific type of the Road.\",\n      \"type\": \"core:Code\"\n    },\n    {\n      \"name\": \"function\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/transportation/5.0\",\n      \"description\": \"Specifies the intended purposes of the Road.\",\n      \"type\": \"core:Code\"\n    },\n    {\n      \"name\": \"usage\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/transportation/5.0\",\n      \"description\": \"Specifies the actual uses of the Road.\",\n      \"type\": \"core:Code\"\n    },\n    {\n      \"name\": \"section\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/transportation/5.0\",\n      \"description\": \"Relates to the sections that are part of the Road.\",\n      \"type\": \"core:FeatureProperty\",\n      \"target\": \"tran:Section\"\n    },\n    {\n      \"name\": \"intersection\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/transportation/5.0\",\n      \"description\": \"Relates to the intersections that are part of the Road.\",\n      \"type\": \"core:FeatureProperty\",\n      \"target\": \"tran:Intersection\"\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  \"identifier\": \"core:AbstractObject\",\n  \"description\": \"AbstractObject is the abstract superclass of all feature and object types.\",\n  \"table\": \"feature\",\n  \"properties\": [\n    {\n      \"name\": \"id\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies the internal database ID of the object.\",\n      \"value\": {\n        \"column\": \"id\",\n        \"type\": \"integer\"\n      }\n    },\n    {\n      \"name\": \"objectId\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies the identifier of the object that is unique within the database. Using a globally unique identifier is recommended.\",\n      \"value\": {\n        \"column\": \"objectid\",\n        \"type\": \"string\"\n      }\n    },\n    {\n      \"name\": \"identifier\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies an optional identifier of the object that is globally unique.\",\n      \"value\": {\n        \"column\": \"identifier\",\n        \"type\": \"string\"\n      }\n    },\n    {\n      \"name\": \"codeSpace\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies the code space of the identifier, typically a reference to the maintaining authority.\",\n      \"value\": {\n        \"column\": \"identifier_codespace\",\n        \"type\": \"string\"\n      },\n      \"parent\": 1\n    },\n    {\n      \"name\": \"envelope\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies the minimum bounding box that encloses the entire object.\",\n      \"value\": {\n        \"column\": \"envelope\",\n        \"type\": \"core:Envelope\"\n      }\n    },\n    {\n      \"name\": \"objectClassId\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies the internal object class ID of the object.\",\n      \"value\": {\n        \"column\": \"objectclass_id\",\n        \"type\": \"integer\"\n      }\n    },\n    {\n      \"name\": \"lastModificationDate\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Indicates the date and time at which the object was last updated in the database.\",\n      \"value\": {\n        \"column\": \"last_modification_date\",\n        \"type\": \"timestamp\"\n      }\n    },\n    {\n      \"name\": \"updatingPerson\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies the person who last updated the object in the database.\",\n      \"value\": {\n        \"column\": \"updating_person\",\n        \"type\": \"string\"\n      }\n    },\n    {\n      \"name\": \"reasonForUpdate\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies the reason for the last update of the object in the database.\",\n      \"value\": {\n        \"column\": \"reason_for_update\",\n        \"type\": \"string\"\n      }\n    },\n    {\n      \"name\": \"lineage\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies the lineage information of the object.\",\n      \"value\": {\n        \"column\": \"lineage\",\n        \"type\": \"string\"\n      }\n    },\n    {\n      \"name\": \"description\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies a text description of the object.\",\n      \"type\": \"core:StringOrRef\"\n    },\n    {\n      \"name\": \"descriptionReference\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies a reference to a remote text description of the object.\",\n      \"type\": \"core:Reference\"\n    },\n    {\n      \"name\": \"name\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies a label or identifier of the object, commonly a descriptive name.\",\n      \"type\": \"core:Code\"\n    }\n  ]\n}\n</code></pre> <p>Each feature type is represented as a JSON object and includes an <code>\"identifier\"</code>, which combines the namespace alias and type name for unique identification and reference. It also has a <code>\"description\"</code> property that defines the type, based on CityGML 3.0 definitions . The <code>\"table\"</code> property specifies the 3DCityDB table where the feature is stored, typically the <code>FEATURE</code> table.</p> <p>The <code>\"properties\"</code> array lists the feature type's properties as separate JSON objects. Each property has a <code>\"name\"</code>, matching the name from CityGML 3.0, and a <code>\"namespace\"</code>, with a value from the <code>NAMESPACE</code> table. These values must be used for the <code>name</code> and <code>namespace_id</code> columns when the property is stored in the <code>PROPERTY</code> table. The CityGML 3.0 definition of the property is available as <code>\"description\"</code>.</p> <p>Note</p> <p>To get the list of all properties for a given feature, be sure to combine the <code>\"properties\"</code> of its feature type with the <code>\"properties\"</code> of all its supertypes.</p> <p>There are two ways to define the data type of each property:</p> <ol> <li>Using the <code>\"type\"</code> property, which references a predefined data type from the <code>DATATYPE</code> table    via its identifier (the default method).</li> <li>Using the <code>\"value\"</code> property to define the data type inline in the JSON object.</li> </ol> <p>The data type referenced through <code>\"type\"</code> defines all details on how to store the property values (see the <code>DATATYPE</code> table). When the property is stored in the <code>PROPERTY</code> table based on its type definition (the default), it is implicitly linked to the feature instance through the <code>feature_id</code> column of the <code>PROPERTY</code> table.</p> <p>Examples of defining a data type inline using <code>\"value\"</code> can be found in the JSON definition of <code>core:AbstractObject</code> shown above. A <code>\"value\"</code> includes the <code>\"column\"</code> name where the value is stored and its database-specific data <code>\"type\"</code>. By default, it is assumed that the column belongs to the table defined for the feature type.</p> <p>If the referenced <code>\"type\"</code> is not stored in the <code>PROPERTY</code> table, or the column of the inline-defined <code>\"value\"</code> does not belong to the feature table, the JSON object can include a <code>\"join\"</code> or <code>\"joinTable\"</code> property to specify the target table storing the property and how it is linked from the feature table. The example below shows the <code>\"join\"</code> definition for the <code>\"imageURI\"</code> property in the <code>core:AbstractTexture</code> type:</p> <pre><code>{\n  \"name\": \"imageURI\",\n  \"namespace\": \"http://3dcitydb.org/3dcitydb/appearance/5.0\",\n  \"description\": \"Specifies the URI that points to the external texture image.\",\n  \"value\": {\n    \"column\": \"image_uri\",\n    \"type\": \"string\"\n  },\n  \"join\": {\n    \"table\": \"tex_image\",\n    \"fromColumn\": \"tex_image_id\",\n    \"toColumn\": \"id\"\n  }\n}\n</code></pre> <p>Properties of type <code>core:FeatureProperty</code> or <code>core:GeometryProperty</code> are used to link a feature to another feature or a geometry representation. The JSON objects for these properties must include an additional <code>\"target\"</code> property, which holds the identifier of the referenced feature type or geometry type as its value. The following two properties, taken from the <code>core:AbstractObject</code> feature type, illustrate this.</p> Feature propertyGeometry property <pre><code>{\n  \"name\": \"boundary\",\n  \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n  \"description\": \"Relates to surfaces that bound the space.\",\n  \"type\": \"core:FeatureProperty\",\n  \"target\": \"core:AbstractSpaceBoundary\"\n}\n</code></pre> <pre><code>{\n  \"name\": \"lod1Solid\",\n  \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n  \"description\": \"Relates to a 3D Solid geometry that represents the space in Level of Detail 1.\",\n  \"type\": \"core:GeometryProperty\",\n  \"target\": \"core:AbstractSolid\"\n}\n</code></pre> <p>Tip</p> <p>The 3DCityDB software package includes a JSON Schema specification that defines the allowed structure of the schema mapping for feature types. You can find this schema file, named <code>schema-mapping.schema.json</code>, in the <code>json-schema</code> folder of the software package.</p>","tags":["3dcitydb","ade","database srs","datatype","metadata","namespace","objectclass","relational schema"]},{"location":"3dcitydb/metadata-module/#datatype-table","title":"<code>DATATYPE</code> table","text":"<p>Similar to the <code>OBJECTCLASS</code> table, the <code>DATATYPE</code> table serves as a registry for all data types supported by 3DCityDB <code>v5</code>. All feature properties stored in the <code>PROPERTY</code> table must reference their data type from this table. Its layout follows that of the <code>OBJECTCLASS</code> table. It is populated with type definitions for all data types defined in the CityGML 3.0 CM, including abstract types, during the setup of the 3DCityDB <code>v5</code>.</p> <p>Every data type registered in the <code>DATATYPE</code> table is uniquely identified by its name and namespace, which are stored in the <code>typename</code> and <code>namespace_id</code> columns, respectively. The <code>namespace_id</code> is a foreign key referencing a namespace from the <code>NAMESPACE</code> table.</p> <p>The flag <code>is_abstract</code> determines whether the data type is abstract, based on the corresponding definition in the CityGML 3.0 CM. A value of <code>1</code> means true, and <code>0</code> represents false. Similar to feature types, abstract data types cannot be used as a type for a feature property.</p> <p>Type inheritance is represented by the <code>supertype_id</code> column, which serves as a foreign key linking a subtype to its supertype. Transitive inheritance is supported, allowing data types to form hierarchical structures.</p> <p>Users can extend the <code>DATATYPE</code> table with custom data types, typically from an ADE. As with feature types, the <code>ade_id</code> foreign key must point to the ADE registered in the <code>ADE</code> table that defines the data type. Ensure that the correct supertype is defined for custom data types.</p>","tags":["3dcitydb","ade","database srs","datatype","metadata","namespace","objectclass","relational schema"]},{"location":"3dcitydb/metadata-module/#json-based-schema-mapping_1","title":"JSON-based schema mapping","text":"<p>Each data type defines the structure and format for storing property values in the database, including details on the property value format and the table and column where the value is stored. This schema mapping information is available in the <code>schema</code> column in JSON format.</p> <p>Tip</p> <p>Similar to feature types, the JSON-based schema mapping is crucial for understanding how properties are represented and retrieved in the 3DCityDB <code>v5</code>. The JSON format can be easily parsed and interpreted by tools, enabling automatic interaction with the database.</p> <p>Primitive data types for simple attributes, such as integers, doubles, strings, or timestamps, are defined as shown below for the <code>core:String</code> type.</p> <pre><code>{\n  \"identifier\": \"core:String\",\n  \"description\": \"String is a basic type that represents a sequence of characters.\",\n  \"table\": \"property\",\n  \"value\": {\n    \"column\": \"val_string\",\n    \"type\": \"string\"\n  }\n}\n</code></pre> <p>All data types have a unique <code>\"identifier\"</code>, which combines its namespace alias and type name, along with a <code>\"description\"</code> that provides its definition from CityGML 3.0. The <code>\"table\"</code> property specifies the 3DCityDB table where the data type is stored, typically the <code>PROPERTY</code> table. For simple types, the <code>\"value\"</code> object defines the target <code>\"column\"</code> and its database-specific data <code>\"type\"</code> for storing the attribute value.</p> <p>In addition to simple types, the 3DCityDB supports complex types, which may include both a simple value and nested properties of either simple or complex types.</p> core:Codecore:ExternalReferencecon:Height <pre><code>{\n  \"identifier\": \"core:Code\",\n  \"description\": \"Code is a basic type for a string-based term, keyword, or name that can additionally have a code space.\",\n  \"table\": \"property\",\n  \"value\": {\n    \"column\": \"val_string\",\n    \"type\": \"string\"\n  },\n  \"properties\": [\n    {\n      \"name\": \"codeSpace\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies the code space of the term, typically a dictionary, thesaurus, classification scheme, authority, or pattern for the term.\",\n      \"value\": {\n        \"column\": \"val_codespace\",\n        \"type\": \"string\"\n      }\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  \"identifier\": \"core:ExternalReference\",\n  \"description\": \"ExternalReference is a reference to a corresponding object in another information system, for example in the German cadastre (ALKIS), the German topographic information system (ATKIS), or the OS UK MasterMap.\",\n  \"table\": \"property\",\n  \"properties\": [\n    {\n      \"name\": \"targetResource\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies the URI that points to the object in the external information system.\",\n      \"type\": \"core:URI\"\n    },\n    {\n      \"name\": \"informationSystem\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies the URI that points to the external information system.\",\n      \"value\": {\n        \"column\": \"val_codespace\",\n        \"type\": \"string\"\n      }\n    },\n    {\n      \"name\": \"relationType\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/core/5.0\",\n      \"description\": \"Specifies a URI that additionally qualifies the ExternalReference. The URI can point to a definition from an external ontology (e.g. the sameAs relation from OWL) and allows for mapping the ExternalReference to RDF triples.\",\n      \"value\": {\n        \"column\": \"val_string\",\n        \"type\": \"string\"\n      }\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  \"identifier\": \"con:Height\",\n  \"description\": \"Height represents a vertical distance (measured or estimated) between a low reference and a high reference.\",\n  \"table\": \"property\",\n  \"value\": {\n    \"property\": 0\n  },\n  \"properties\": [\n    {\n      \"name\": \"value\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/construction/5.0\",\n      \"description\": \"Specifies the value of the height above or below ground.\",\n      \"type\": \"core:Measure\",\n      \"join\": {\n        \"table\": \"property\",\n        \"fromColumn\": \"id\",\n        \"toColumn\": \"parent_id\"\n      }\n    },\n    {\n      \"name\": \"status\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/construction/5.0\",\n      \"description\": \"Indicates the way the height has been captured.\",\n      \"type\": \"core:String\",\n      \"join\": {\n        \"table\": \"property\",\n        \"fromColumn\": \"id\",\n        \"toColumn\": \"parent_id\"\n      }\n    },\n    {\n      \"name\": \"lowReference\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/construction/5.0\",\n      \"description\": \"Indicates the low point used to calculate the value of the height.\",\n      \"type\": \"core:Code\",\n      \"join\": {\n        \"table\": \"property\",\n        \"fromColumn\": \"id\",\n        \"toColumn\": \"parent_id\"\n      }\n    },\n    {\n      \"name\": \"highReference\",\n      \"namespace\": \"http://3dcitydb.org/3dcitydb/construction/5.0\",\n      \"description\": \"Indicates the high point used to calculate the value of the height.\",\n      \"type\": \"core:Code\",\n      \"join\": {\n        \"table\": \"property\",\n        \"fromColumn\": \"id\",\n        \"toColumn\": \"parent_id\"\n      }\n    }\n  ]\n}\n</code></pre> <p>The nested properties of a complex data type are listed in the <code>\"properties\"</code> array as separate JSON objects. Each nested property has a <code>\"name\"</code>, matching the name from CityGML 3.0, and a <code>\"namespace\"</code>, with a value from the <code>NAMESPACE</code> table. The CityGML 3.0 definition of the property is available as <code>\"description\"</code>.</p> <p>The data type of a nested property can be specified in one of two ways:</p> <ol> <li>As a simple type defined inline using the <code>\"value\"</code> property, as explained above.</li> <li>As a reference to a data type from the <code>DATATYPE</code> table via its identifier using the <code>\"type\"</code> property.</li> </ol> <p>Note</p> <p>Complex data types are not required to have a <code>\"value\"</code> member but can consist solely of nested <code>\"properties\"</code> (see the <code>core:ExternalReference</code> example). Alternatively, they can designate one of their nested properties as <code>\"value\"</code> by using a <code>0</code>-based index into the properties array (see the <code>con:Height</code> example).</p> <p>By default, the data type's value and all its nested properties are assumed to be stored in separate columns of the same row in the data type's table. To deviate from this rule, <code>\"join\"</code> or <code>\"joinTable\"</code> properties can be added to nested properties to specify their target table and how it is linked to the data type's table.</p> <p>The <code>core:ExternalReference</code> type shown above is an example where all nested properties are stored in different <code>val_*</code> columns within a single row of the <code>PROPERTY</code> table, ensuring a compact representation. However, for the <code>con:Height</code> type, storing all properties in one row is not possible due to conflicting target columns. Therefore, each nested property is stored in a separate row of <code>PROPERTY</code> and joined with the parent row representing the data type itself. See here for an example of how a <code>con:Height</code> value is stored in the <code>PROPERTY</code> table.</p> <p>Tip</p> <p>The complete JSON Schema specification for defining data types is provided in the file <code>schema-mapping.schema.json</code>, which can be found in the <code>json-schema</code> folder of the 3DCityDB software package.</p>","tags":["3dcitydb","ade","database srs","datatype","metadata","namespace","objectclass","relational schema"]},{"location":"3dcitydb/metadata-module/#database_srs-table","title":"<code>DATABASE_SRS</code> table","text":"<p>The <code>DATABASE_SRS</code> table holds information about the Coordinate Reference System (CRS) of the 3DCityDB <code>v5</code> instance. This CRS is defined during the database setup and applies to all geometries stored in the 3DCityDB (with a few exceptions, such as implicit geometries). The <code>DATABASE_SRS</code> table contains only two columns with the following meanings:</p> Column Description <code>srid</code> The database-specific SRID (Spatial Reference ID) of the CRS defined for the 3DCityDB instance. The SRID is typically identical to the EPSG code. <code>srs_name</code> The OGC-compliant name of the CRS. The <code>srs_name</code> is, for instance, written to CityGML/CityJSON files when exporting data from the database. <p>Tip</p> <p>The coordinate reference system can be changed at any time after setup using the database function <code>citydb_pkg.change_schema_srid</code>. However, changing the values directly in the <code>DATABASE_SRS</code> table will have no impact on the geometries stored in the database. Refer to the database functions section for more information.</p>","tags":["3dcitydb","ade","database srs","datatype","metadata","namespace","objectclass","relational schema"]},{"location":"3dcitydb/metadata-module/#ade-table","title":"<code>ADE</code> table","text":"<p>The 3DCityDB <code>v5</code> relational schema fully supports the CityGML Application Domain Extension (ADE) mechanism, enabling the storage of domain-specific data that extends beyond the predefined feature and data types of CityGML. The <code>ADE</code> table serves as a registry for all ADEs added to the database. Each ADE is assigned a unique <code>id</code> as the primary key, with its name, version string, and human-readable description stored as metadata in the <code>name</code>, <code>version</code>, and <code>description</code> columns, respectively.</p> <p>In the context of 3DCityDB <code>v5</code>, an ADE is a collection of user-defined feature types, data types, and namespaces. These extensions are linked to their corresponding ADE via the <code>ade_id</code> foreign key in the <code>OBJECTCLASS</code>, <code>DATATYPE</code>, and <code>NAMESPACE</code> tables, referencing the <code>id</code> column of the ADE table.</p> <p>Warning</p> <p>Although ADE support is implemented in the 3DCityDB <code>v5</code> relational schema, no tool is currently available to automatically register an ADE in the <code>ADE</code> table or generate the necessary feature types, data types, and namespaces based on the ADE data model. Additionally, the <code>citydb-tool</code> command-line utility included in 3DCityDB <code>v5</code> does not yet support importing or exporting ADE data. We are working on improvements, so stay tuned!</p>","tags":["3dcitydb","ade","database srs","datatype","metadata","namespace","objectclass","relational schema"]},{"location":"3dcitydb/relational-schema/","title":"Relational schema overview","text":"<p>The 3D City Database <code>v5</code> is a major revision of the previous <code>v4</code> release. The database schema has been completely redesigned, significantly simplified, and restructured. Unlike <code>v4</code>, it no longer uses individual feature tables with dedicated attribute columns. Instead, the schema is streamlined with fewer tables, including a single <code>FEATURE</code> table for storing all features and objects, and a single <code>PROPERTY</code> table that holds most attributes and associations.</p> <p>The following figure illustrates the complete 3DCityDB <code>v5</code> relational database schema.</p> <p></p> <p>Figure 1. Relation schema of the 3DCityDB <code>v5</code>.</p> <p>All tables of the relation schema are logically grouped into five modules, which are discussed in the following chapters:</p> <ul> <li>Feature module: Contains the core tables for storing feature information, excluding geometry and appearance data.</li> <li>Geometry module: Contains tables for storing both explicit and implicit geometry data.</li> <li>Appearance module: Contains tables for storing appearance information.</li> <li>Metadata module: Holds meta-information about features and their properties.</li> <li>Codelist module: Stores codelists with their corresponding values.</li> </ul> <p>Note</p> <p>Although conceptually the database model is applicable to any database system, this chapter uses PostgreSQL-specific figures and examples.</p>","tags":["3dcitydb","relational schema","overview"]},{"location":"citydb-tool/","title":"citydb-tool","text":"<p><code>citydb-tool</code> is the default command-line client for the 3D City Database <code>v5</code>. It supports importing and exporting city model data, as well as data and database management operations. The command-line interface (CLI) offers various commands for interacting with the database, each with its own parameters and options. In addition to manual execution in a shell, <code>citydb-tool</code> can be automated, integrated with other software, and used in workflows and pipelines.</p>","tags":["citydb-tool","overview","features"]},{"location":"citydb-tool/#key-features","title":"Key features","text":"<ul> <li>Support for CityGML 3.0, 2.0, and 1.0</li> <li>Support for CityJSON 2.0, 1.1, and 1.0, including CityJSONSeq</li> <li>On-the-fly upgrade and downgrade between versions</li> <li>Import and export of datasets of any file size</li> <li>Multiple import strategies for consistent city model updates</li> <li>Deletion and termination of city objects with support for object histories</li> <li>Advanced querying capabilities based on OGC CQL2 and SQL</li> <li>Extensible via user-defined plugins</li> <li>Easy deployment and execution in a Docker container</li> <li>Seamless integration into automation workflows for streamlined processes</li> </ul> <p>Tip</p> <p><code>citydb-tool</code> is more than a CLI. It also provides an easy-to-use Java API, making it simple to integrate 3DCityDB support into your own Java applications.</p>","tags":["citydb-tool","overview","features"]},{"location":"citydb-tool/#installing-and-launching","title":"Installing and launching","text":"<p>To obtain citydb-tool, follow the download instructions. Java is required to run the software. For more information, consult the system requirements.</p> <p>citydb-tool is distributed as a ZIP package and does not require installation. Simply extract the package to a directory of your choice. Inside this directory, you will find the <code>citydb</code> start script for running the tool. Two versions of this start script are provided:</p> <ol> <li><code>citydb</code> for UNIX/Linux/macOS systems; and</li> <li><code>citydb.bat</code> for Windows systems.</li> </ol> <p>To launch citydb-tool, open a shell, navigate to the citydb-tool installation directory, and run the following command to display a general help message in the console. On UNIX/Linux systems, you may first need to adjust file permissions to make the script executable.</p> LinuxWindows CMD <pre><code>chmod u+x citydb\n./citydb --help\n</code></pre> <pre><code>citydb --help    # you can omit the .bat file extension\n</code></pre> <p>If your system is set up correctly and the <code>citydb --help</code> command runs successfully, you should see output similar to the example below.</p> <p></p> <p>Figure 1. Running <code>citydb --help</code> in the Windows Command Prompt.</p>","tags":["citydb-tool","overview","features"]},{"location":"citydb-tool/#using-environment-variables-for-launch","title":"Using environment variables for launch","text":"<p>citydb-tool supports the following environment variables to configure the launch process.</p> Environment variable Description <code>JAVA_HOME</code> Specifies the directory where the Java Runtime Environment (JRE) or Java Development Kit (JDK) is installed on your system. <code>DEFAULT_JVM_OPTS</code> Defines Java Virtual Machine (JVM) options for the launch process. <code>JAVA_OPTS</code> Functions like <code>DEFAULT_JVM_OPTS</code>, but takes precedence over it. <code>CITYDB_OPTS</code> Functions like <code>JAVA_OPTS</code> and <code>DEFAULT_JVM_OPTS</code>, but takes precedence over both. <p><code>JAVA_HOME</code> defines the JRE or JDK that citydb-tool will use. This is helpful if you want to use a different version of Java than the system default or if the Java installation is not automatically detected, preventing citydb-tool from launching.</p> <p>citydb-tool is launched with default JVM options, which can be overridden by setting the <code>CITYDB_OPTS</code> environment variable. You can also use <code>JAVA_OPTS</code> or <code>DEFAULT_JVM_OPTS</code> to pass JVM options to the <code>citydb</code> script. For example, to increase the JVM's maximum heap size, the option <code>-Xmx</code> can be used. The following command shows how to set <code>JAVA_HOME</code> to specify the Java installation and use <code>CITYDB_OPTS</code> to allocate two gigabytes for the heap space.</p> LinuxWindows CMD <pre><code>export JAVA_HOME=\"/path/to/your/java/installation\"\nexport CITYDB_OPTS=\"-Xmx2g\"\n\n./citydb import citygml \\\n    -H localhost -d citydb -u citydb_user -p mySecret \\\n    /my/city.gml\n</code></pre> <pre><code>set JAVA_HOME=\"C:\\path\\to\\your\\java\\installation\"\nset CITYDB_OPTS=\"-Xmx2g\"\n\ncitydb import citygml citygml ^\n    -H localhost -d citydb -u citydb_user -p mySecret ^\n    C:\\my\\city.gml\n</code></pre> <p>Additional JVM options, such as <code>-Xms</code> for the initial heap size or <code>-Dproperty=value</code> for system properties, can also be added as needed.</p> <p>Tip</p> <p>The default JVM options are typically sufficient for most use cases and should only be overridden if necessary. Advanced users can also modify the <code>citydb</code> start script directly to adjust the launch configuration and add custom JVM options.</p>","tags":["citydb-tool","overview","features"]},{"location":"citydb-tool/cli/","title":"CLI overview","text":"<p><code>citydb</code> is the main command of citydb-tool. It requires a subcommand to perform a specific operation on a 3DCityDB <code>v5</code> instance, such as importing, exporting, and deleting city model data. It also defines common options that apply to all subcommands.</p>","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#synopsis","title":"Synopsis","text":"<pre><code>citydb [OPTIONS] COMMAND\n</code></pre>","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#options","title":"Options","text":"Option Description Default value <code>[@&lt;filename&gt;...]</code> One or more argument files containing options. <code>-h</code>, <code>--help</code> Show a help message and exit. <code>-V</code>, <code>--version</code> Print version information and exit. <code>--config-file=&lt;file&gt;</code> Load configuration from this file. <code>-L</code>, <code>--log-level=&lt;level&gt;</code> Log level: <code>fatal</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code>, <code>trace</code>. <code>info</code> <code>--log-file=&lt;file&gt;</code> Write log messages to this file. <code>--pid-file=&lt;file&gt;</code> Create a file containing the process ID. <code>--plugins=&lt;dir&gt;</code> Load plugins from this directory. <code>--use-plugin=&lt;plugin[=true|false]&gt;[,&lt;plugin[=true|false]&gt;...]</code> Enable or disable plugins with a matching fully qualified class name. <code>true</code>","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#commands","title":"Commands","text":"Command Description <code>help</code> Display help information about the specified command. <code>import</code> Import data in a supported format. <code>export</code> Export data in a supported format. <code>delete</code> Delete features from the database. <code>index</code> Perform index operations. <p>Note</p> <p>If plugins are registered for citydb-tool, they may extend the command list by adding their own commands to the CLI.</p>","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#usage","title":"Usage","text":"","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#version-and-3dcitydb-support","title":"Version and 3DCityDB support","text":"<p>The <code>--version</code> option displays the version of citydb-tool along with the supported 3DCityDB versions. A <code>+</code> sign next to a 3DCityDB version indicates that support starts with that version and includes all subsequent patch updates. Below is an example output.</p> <pre><code>$ citydb --version\ncitydb-tool version 1.0.0\nSupported 3DCityDB versions: 5.0.0+\n(C) 2022-2025 virtualcitysystems GmbH\n</code></pre>","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#help-and-cli-documentation","title":"Help and CLI documentation","text":"<p>To get help for a specific command, use the <code>--help</code> option. This will display a help message, including the command's synopsis and its available options. If the command has subcommands, the <code>--help</code> option applies to the command immediately preceding it. Alternatively, you can use the <code>help</code> command followed by the desired <code>COMMAND</code>, which can also be a subcommand, to get the same information.</p> Help optionHelp command <pre><code>citydb --help\ncitydb import --help\ncitydb import citygml --help\n# ...\n</code></pre> <pre><code>citydb help\ncitydb help import\ncitydb import help citygml\n# ...\n</code></pre>","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#logging","title":"Logging","text":"<p>citydb-tool logs events such as activities or errors in the console, with each entry including a timestamp, severity level, and a descriptive message. The <code>--log-level</code> option controls the level of logging output shown in the console. It will include all events of the specified severity and those of higher severity. Available levels are:</p> <ul> <li><code>fatal</code>: Critical errors causing immediate termination</li> <li><code>error</code>: Non-recoverable errors</li> <li><code>warn</code>: Warnings about potential issues</li> <li><code>info</code>: General operational messages (default)</li> <li><code>debug</code>: Detailed debugging information</li> <li><code>trace</code>: Most detailed logs for troubleshooting</li> </ul> <p>Log messages can also be recorded in a log file specified with the <code>--log-file</code> option. The log level set with the <code>--log-level</code> option also applies to the log file.</p> <p>Note</p> <p>The log file will be truncated at startup if it already exists.</p>","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#configuration-files","title":"Configuration files","text":"<p>Options and settings for executing a citydb-tool command can also be loaded from a JSON-encoded configuration file specified with <code>--config-file</code>. Configuration files override default settings and can be used alongside command-line options for flexibility. However, command-line options always take precedence. Each CLI command defines its own JSON structure. For more information, see the JSON configuration chapter.</p> LinuxWindows CMD <pre><code>./citydb export citygml [...] \\\n    --config-file=/path/to/my-config.json\n</code></pre> <pre><code>citydb export citygml [...] ^\n    --config-file=C:\\path\\to\\my-config.json\n</code></pre> <p>Note</p> <p>Some commands may provide options exclusively in the JSON configuration, without corresponding command-line options.</p>","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#plugins","title":"Plugins","text":"<p>citydb-tool provides a flexible plugin mechanism for adding custom functionality, allowing plugins to introduce new commands or extend existing ones. Plugins are typically distributed as a ZIP package containing the plugin's  Java Archive (JAR) file and any additional resources.</p> <p>To install a plugin, unzip it (if necessary) and place the files in the <code>plugins</code> subfolder within the citydb-tool installation directory. For better organization, it is recommended to create a separate subfolder for each plugin. citydb-tool will automatically detect and load the plugins from this location, logging successfully loaded plugins separately in the console. To uninstall a plugin, simply delete its folder from the <code>plugins</code> subfolder.</p> <p>The <code>--plugins</code> option allows you to specify a different location for loading plugins. To enable or disable plugins, use the <code>--use-plugin</code> option followed by the fully qualified Java class name and a value of <code>true</code> (enable) or <code>false</code> (disable) (default: <code>true</code>). Disabled plugins will not be loaded. Multiple plugins can be specified as a comma-separated list as shown below.</p> LinuxWindows CMD <pre><code>./citydb export citygml [...] \\\n    --plugins=/path/to/my/plugins \\\n    --use-plugin=com.example.PluginA=true,com.example.PluginB=false\n</code></pre> <pre><code>citydb export citygml [...] ^\n    --plugins=/path/to/my/plugins ^\n    --use-plugin=com.example.PluginA=true,com.example.PluginB=false\n</code></pre> <p>Tip</p> <p>Refer to the plugin's documentation for details on its functionality, available CLI commands, options, and the fully qualified class name for the <code>--use-plugin</code> option. The class name will also be printed to the console when the plugin is loaded by citydb-tool.</p>","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#exit-codes","title":"Exit codes","text":"<p>citydb-tool uses exit codes to indicate the success or failure of an operation. These codes help users and scripts determine whether the execution was successful or if an error occurred. Below are the exit codes used by citydb-tool:</p> <ul> <li><code>0</code>: The operation completed successfully without errors</li> <li><code>1</code>: The operation terminated abnormally due to errors or issues</li> <li><code>2</code>: Invalid input for an option or parameter</li> <li>Greater than <code>2</code>: Specific operation errors</li> </ul>","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#cli-tips-and-tricks","title":"CLI tips and tricks","text":"","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#specifying-options","title":"Specifying options","text":"<p>Options that take a value can be specified using an equal sign (<code>=</code>) or a space. This applies to both short and long options. Short options that do not take a value can be grouped behind a single <code>-</code> delimiter, followed by at most one short option that requires a value.</p> <p>The following generic examples are all equivalent, assuming <code>-f</code> is a short form for <code>--file</code>:</p> <pre><code>&lt;command&gt; -a -b -c --file=my-file.txt \n&lt;command&gt; -ab -c --file my-file.txt \n&lt;command&gt; -abc -f my-file.txt \n&lt;command&gt; -abcf=my-file.txt \n</code></pre> <p>Multi-value options, such as <code>--use-plugin</code>, can accept one or more values. If multiple values are needed, they can either be provided as a comma-separated list or by specifying the option multiple times.</p> <p>The following examples are all valid:</p> <pre><code>citydb --use-plugin=com.example.PluginA,com.example.PluginB=false\ncitydb --use-plugin=com.example.PluginA --use-plugin=com.example.PluginB=false\n</code></pre>","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#double-dash-delimiter","title":"Double dash delimiter","text":"<p>citydb-tool supports the <code>--</code> delimiter to separate options from positional arguments. Any argument after <code>--</code> is treated as a positional parameter, even if it matches an option name.</p> <p>For example, consider the following <code>import citygml</code> command to import the CityGML file <code>my-city.gml</code>:</p> <pre><code>citydb import citygml [...] --db-password my-city.gml\n</code></pre> <p>The <code>--db-password</code> option of citydb-tool either takes a password as a value or, if left empty, prompts the user for input. In this example, the user intended to be prompted for a password. However, <code>my-city.gml</code> will instead be interpreted as the password rather than the input file. To prevent this, use the <code>--</code> delimiter:</p> <pre><code>citydb import citygml [...] --db-password -- my-city.gml\n</code></pre>","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#abbreviated-options-and-commands","title":"Abbreviated options and commands","text":"<p>To simplify CLI usage, citydb-tool provides short forms for some options (e.g., <code>-h</code> for <code>--help</code>). Additionally, long options without a specific short form can be abbreviated by using the initial letter(s) of the first component and optionally of one or more subsequent components of the option name. \"Components\" are separated by <code>-</code> (dash) characters or by case. For example, both <code>--CamelCase</code> and <code>--kebab-case</code> consist of two components.</p> <p>The following are valid abbreviations for <code>--super-long-option</code>, which has three components:</p> <pre><code>--sup, --slo, --s-l-o, --s-lon, --s-opt, --sLon, --sOpt, --soLoOp (...)\n</code></pre> <p>The same abbreviation syntax can also be used for command names. However, abbreviations for both options and commands must be unambiguous. For example, the command <code>import city</code> could be interpreted as both <code>import citygml</code> and <code>import cityjson</code>, leading to a conflict. In such cases, citydb-tool will abort and display an error message to prevent ambiguity.</p>","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/cli/#argument-files","title":"Argument files","text":"<p>When a command line includes many options or long arguments, system limitations on command length may become an issue. Argument files (<code>@-files</code>) help overcome this limitation by allowing arguments to be stored in a separate file. You can specify one or more argument files by prefixing their filenames with <code>@</code> on the command line. The contents of each <code>@-file</code> are automatically expanded into the argument list.</p> <p>Arguments in an <code>@-file</code> can be separated by spaces or newlines. Arguments containing spaces must be enclosed in double (<code>\"</code>) or single (<code>'</code>) quotes. Within quoted values, quotes are escaped with a backslash (<code>\\</code>), and backslashes are escaped by doubling them (<code>\\\\</code>). Lines starting with <code>#</code> are comments and are ignored. The argument file can also contain references to additional <code>@-files</code>, which will be processed recursively.</p> <p>For example, suppose an <code>@-file</code> exists at <code>/home/foo/args</code>, containing the following logging and database connection options:</p> <pre><code># This line is a comment and is ignored\n--log-level=debug\n--log-file=/path/to/my/logfile.log\n--db-host=localhost\n--db-name=citydb\n--db-user=citydb_user\n--db-password=changeMe\n</code></pre> <p>This <code>@-file</code> can be used with a citydb-tool command as shown below. The specified path can be either absolute or relative to the current directory.</p> <pre><code>citydb index status @/home/foo/args \n</code></pre> <p>You can also use multiple <code>@-files</code> on the command line to logically group their contents.</p> <pre><code>citydb index status @/home/foo/db-args @/home/foo/logging-args \n</code></pre> <p>Tip</p> <p>Although <code>@-files</code> are intended for a different purpose, they can be used similarly to configuration files to execute commands with different options depending on the scenario or use case. However, it is recommended to use configuration files whenever possible.</p> <p>Warning</p> <p>Argument files have a limitation: parameter or option values enclosed in quotes must not be preceded by an equal sign. For example, <code>--my-option=\"foo bar\"</code> will not work inside an argument file. To work around this, either omit the equal sign (<code>--my-option \"foo bar\"</code>) or enclose the entire expression in quotes (<code>\"--my-option=\\\"foo bar\\\"\"</code>).</p>","tags":["citydb-tool","command-line interface","CLI"]},{"location":"citydb-tool/config/","title":"JSON configuration","text":"<p>The options and settings for executing a citydb-tool command can be defined in a JSON-encoded configuration file, offering an alternative to manually specifying them via the command line. The configuration file organizes options into functional sections, with each command using one or more sections based on its specific task and operation.</p> <p>The example below illustrates the basic structure of the configuration file, highlighting the main sections. A configuration file can include all sections for reusability across different commands, or it may contain only the sections needed for a specific command.</p> <pre><code>{\n  \"databaseOptions\": {...},\n  \"importOptions\": {...},\n  \"readOptions\": {...},\n  \"exportOptions\": {...},\n  \"writeOptions\": {...},\n  \"deleteOptions\": {...},\n  ...\n}\n</code></pre>","tags":["citydb-tool","JSON","config"]},{"location":"citydb-tool/config/#configuration-sections","title":"Configuration sections","text":"<p>The purpose of each configuration section is outlined below. Their content and usage for different citydb-tool commands are explained in more detail in the following chapters.</p> Section Description <code>\"databaseOptions\"</code> Defines connection details for one or more 3DCityDB instances, usable by all commands that require a database connection. <code>\"importOptions\"</code> Defines options for controlling the import process. <code>\"readOptions\"</code> Specifies settings for reading input files, including format-specific options. <code>\"exportOptions\"</code> Defines options for controlling the export process. <code>\"writeOptions\"</code> Specifies settings for writing output files, including format-specific options. <code>\"deleteOptions\"</code> Defines options for controlling the delete process. <p>You can load configuration files using the <code>--config-file</code> option when executing citydb-tool commands.</p> LinuxWindows CMD <pre><code>./citydb import citygml \\\n    --config-file=/path/to/my-config.json \\\n    my-city.gml\n</code></pre> <pre><code>citydb import citygml ^\n    --config-file=C:\\path\\to\\my-config.json ^\n    my-city.gml\n</code></pre> <p>Tip</p> <ul> <li>Configuration files can be used alongside command-line options for flexibility. However, command-line options always   take precedence.</li> <li>Some commands may provide options exclusively in the JSON configuration, without corresponding command-line options.</li> <li>If plugins are registered for citydb-tool, they may extend the configuration by adding their   own sections.</li> </ul>","tags":["citydb-tool","JSON","config"]},{"location":"citydb-tool/cql2/","title":"CQL2 query language","text":"<p>CQL2 (Common Query Language 2) is an advanced query language used to filter and query spatial and attribute data within the citydb-tool. It allows users to define precise queries for exporting or deleting features based on attribute values, spatial properties, or logical conditions.</p> <p>CQL2 is a standard maintained by the OGC (Open Geospatial Consortium) and serves as an evolution of the original CQL language, providing better expressiveness and flexibility for data filtering.</p> <p>Key Features of CQL2</p> <ul> <li>Expressive Syntax: Combines logical operators with a rich set of functions for building complex queries.</li> <li>Spatial Filtering: Supports geospatial functions to filter data based on spatial relationships.</li> <li>Ease of Use: Simple, human-readable expressions that are easy to construct and interpret.</li> </ul>","tags":["cql2","query","filter","spatial filter","attribute filter"]},{"location":"citydb-tool/cql2/#using-cql2-with-citydb-tool","title":"Using CQL2 with citydb-tool","text":"<p>citydb-tool allows the use of the <code>-f</code> or <code>--filter</code> option followed by a CQL2 expression to filter data when exporting or deleting records. This enables users to select only the relevant subset of data based on attribute values, spatial conditions, or both.</p> <ul> <li>Text-based (string) encoding</li> <li>JSON-based encoding</li> </ul> <p>Both encodings are supported by citydb-tool, giving you flexibility in how you structure your filters.</p>","tags":["cql2","query","filter","spatial filter","attribute filter"]},{"location":"citydb-tool/cql2/#syntax","title":"Syntax","text":"<p>The general syntax for using CQL2 with citydb-tool is:</p> <pre><code>citydb [command] -f \"&lt;CQL2 Expression&gt;\"\n</code></pre> <p>Where <code>&lt;CQL2 Expression&gt;</code> is a valid CQL2 query that defines the filtering conditions for the data export.</p>","tags":["cql2","query","filter","spatial filter","attribute filter"]},{"location":"citydb-tool/cql2/#writing-cql2-expressions","title":"Writing CQL2 expressions","text":"<p>A CQL2 expression consists of attribute names, operators, and values. It can also include spatial functions to handle geospatial conditions.</p>","tags":["cql2","query","filter","spatial filter","attribute filter"]},{"location":"citydb-tool/cql2/#understanding-literals","title":"Understanding literals","text":"<p>In CQL2, literals are direct values that appear in your filter expressions. Common types of literals include:</p> <ul> <li>Strings: Enclosed in single quotes in text-based queries (e.g., <code>'Forest tree 3'</code>), or as JSON strings in JSON-based queries (e.g., <code>'Forest tree 3'</code>).</li> <li>Numbers: Used without quotes in both text-based and JSON-based queries (e.g., <code>&gt; 10</code> or <code>10</code> in JSON).</li> <li>Booleans: Typically represented as <code>true</code> or <code>false</code>.</li> <li>Dates/Times: Represented in ISO-8601 format (e.g., <code>'2023-01-31'</code> or <code>'2023-01-31'</code> in JSON), if your data or schema supports date/time attributes.</li> </ul>","tags":["cql2","query","filter","spatial filter","attribute filter"]},{"location":"citydb-tool/cql2/#attribute-references","title":"Attribute references","text":"","tags":["cql2","query","filter","spatial filter","attribute filter"]},{"location":"citydb-tool/cql2/#implicit-vs-explicit-attribute-references","title":"Implicit vs. explicit attribute references","text":"<p>When writing CQL2 queries, it's important to correctly reference attributes by their full property names rather than relying on implicit assumptions. While some query tools allow shorthand notations for convenience, the proper CQL2 syntax requires explicit attribute references.</p> <p>For example, in some cases, a query like:</p> <pre><code>citydb export citygml --filter=\"height &gt; 1\"\n</code></pre> <p>might work as expected, but it is a simplified form. The correct way is to specify the full property path. For instance, if the attribute height belongs to the bldg (building) namespace, the correct query should be:</p> <pre><code>citydb export citygml --filter=\"bldg.height &gt; 1\"\n</code></pre>","tags":["cql2","query","filter","spatial filter","attribute filter"]},{"location":"citydb-tool/cql2/#advanced-handling-of-namespaces-and-complex-attributes","title":"Advanced handling of namespaces and complex attributes","text":"<p>In 3D CityDB, attributes may be defined with namespaces or at nested (child) levels. This advanced scenario requires careful handling:</p> <p>Namespaces &amp; Object Classes: Use a colon (:) to separate namespace prefixes from attribute names. For example, the object class Building might be referenced as bldg:Building. citydb-tool recognizes alias names for object classes, but incorrect casing or namespace mismatches can lead to errors since the system is extremely case sensitive.</p> <p>Property Paths: Use dot (.) notation to define paths to nested attributes (e.g., bldg.details.height). While top-level attributes can be referenced with a simple name, lower-level or child attributes require explicit, fully qualified paths.</p> <p>Multi-occurring Values: For attributes that occur multiple times (arrays), reference specific occurrences using list notation (e.g., property[1] for the first occurrence). Note: Indexing starts at 1 rather than 0.</p> <p>Generic Attributes and Datatype Specification: When dealing with generic attributes (such as those in a property table) where the database does not infer the data type automatically, you may need to explicitly specify the expected datatype using a cast-like syntax (e.g., ::datatype similar to PostgreSQL conventions).</p> <p>For example, using the -t option to specify the feature type along with -f for the filter:</p> <pre><code>citydb export citygml -t Building -f \"bldg:height &lt; 15\"\n</code></pre> <p>Here, Building is the target object class (with its associated namespace alias), and bldg:height is the explicitly referenced attribute. This explicit approach minimizes ambiguity\u2014especially important when attributes are defined on child levels or in complex structures.</p>","tags":["cql2","query","filter","spatial filter","attribute filter"]},{"location":"citydb-tool/cql2/#attribute-filtering","title":"Attribute filtering","text":"<p>Filter based on attribute values using comparison operators such as =, !=, &lt;, &lt;=, &gt;, and &gt;=. Logical operators AND, OR, and NOT can be used to combine conditions.</p>","tags":["cql2","query","filter","spatial filter","attribute filter"]},{"location":"citydb-tool/cql2/#basic-example","title":"Basic example","text":"Text-based FilterJSON-based filter <pre><code>citydb export citygml --filter=\"name = 'Forest tree 3'\" -o filtered_tree.gml\n</code></pre> <pre><code>{\n  \"op\": \"=\",\n  \"args\": [\n    { \"property\": \"name\" },\n    \"Forest tree 3\"\n  ]\n}\n</code></pre>","tags":["cql2","query","filter","spatial filter","attribute filter"]},{"location":"citydb-tool/cql2/#combining-with-logical-operators","title":"Combining with logical operators","text":"Text-based filterJSON-based filter LinuxWindows CMD <pre><code>citydb export citygml \\\n      --filter=\"name = 'Forest tree 3' AND height &gt; '1'\" \\\n      -o filtered_tree.gml\n</code></pre> <pre><code>citydb export citygml ^\n      --filter=\"name = 'Forest tree 3' AND height &gt; '1'\" ^\n      -o filtered_tree.gml\n</code></pre> <pre><code>{\n  \"op\": \"AND\",\n  \"args\": [\n    {\n      \"op\": \"=\",\n      \"args\": [\n        { \"property\": \"name\" },\n        \"Forest tree 3\"\n      ]\n    },\n    {\n      \"op\": \"&gt;\",\n      \"args\": [\n        { \"property\": \"height\" },\n        \"1\"\n      ]\n    }\n  ]\n}\n</code></pre>","tags":["cql2","query","filter","spatial filter","attribute filter"]},{"location":"citydb-tool/cql2/#filtering-with-lists","title":"Filtering with lists","text":"Text-based filterJSON-based filter LinuxWindows CMD <pre><code>citydb export citygml \\\n      --filter=\"name IN ('Forest tree 1', 'Forest tree 2', 'Forest tree 3')\" \\\n      -o filtered_trees.gml\n</code></pre> <pre><code>citydb export citygml ^\n      --filter=\"name IN ('Forest tree 1', 'Forest tree 2', 'Forest tree 3')\" ^\n      -o filtered_trees.gml\n</code></pre> <pre><code>{\n  \"op\": \"IN\",\n  \"args\": [\n    { \"property\": \"name\" },\n    [\"Forest tree 1\", \"Forest tree 2\", \"Forest tree 3\"]\n  ]\n}\n</code></pre>","tags":["cql2","query","filter","spatial filter","attribute filter"]},{"location":"citydb-tool/cql2/#spatial-filtering","title":"Spatial filtering","text":"<p>Use spatial functions to filter based on the spatial relationship of geometries. Commonly used functions include:</p> <ul> <li><code>intersects</code>: Returns true if two geometries intersect.</li> <li><code>contains</code>: Returns true if one geometry contains another.</li> <li><code>within</code>: Returns true if one geometry is within another.</li> </ul>","tags":["cql2","query","filter","spatial filter","attribute filter"]},{"location":"citydb-tool/cql2/#example","title":"Example","text":"Text-based filterJSON-based filter LinuxWindows CMD <pre><code>citydb export citygml \\\n      --filter=\"S_INTERSECTS(Envelope, \\\n      BBOX(-560.8678155819734, 604.1012795512906, \\\n      -553.8099297783192, 627.1318523068805))\" \\\n      @options.txt -o=output.gml\n</code></pre> <pre><code>citydb export citygml ^\n      --filter=\"S_INTERSECTS(Envelope, ^\n      BBOX(-560.8678155819734, 604.1012795512906, ^\n      -553.8099297783192, 627.1318523068805))\" ^\n      @options.txt -o=output.gml\n</code></pre> <pre><code>{\n  \"op\": \"func\",\n  \"function\": \"S_INTERSECTS\",\n  \"args\": [\n    { \"property\": \"Envelope\" },\n    {\n      \"op\": \"func\",\n      \"function\": \"BBOX\",\n      \"args\": [\n        -560.8678155819734,\n        604.1012795512906,\n        -553.8099297783192,\n        627.1318523068805\n      ]\n    }\n  ]\n}\n</code></pre>","tags":["cql2","query","filter","spatial filter","attribute filter"]},{"location":"citydb-tool/database/","title":"Database connection","text":"<p>Most citydb-tool commands require a connection to a 3DCityDB <code>v5</code> instance. Connection details can be specified via command-line options, argument files, JSON configuration files, or environment variables.</p>","tags":["database","connection options","3dcitydb"]},{"location":"citydb-tool/database/#using-command-line-options","title":"Using command-line options","text":"Option Description Default value <code>-H</code>, <code>--db-host=&lt;host&gt;</code> Name of the host on which the 3DCityDB is running. <code>-P</code>, <code>--db-port=&lt;port&gt;</code> Port of the 3DCityDB server. 5432 <code>-d</code>, <code>--db-name=&lt;database&gt;</code> Name of the 3DCityDB database to connect to. <code>-S</code>, <code>--db-schema=&lt;schema&gt;</code> Schema to use when connecting to the 3DCityDB. <code>citydb</code> or username <code>-u</code>, <code>--db-username=&lt;user&gt;</code> Username to use when connecting to the 3DCityDB. <code>-p</code>, <code>--db-password[=&lt;password&gt;]</code> Password to use when connecting to the 3DCityDB. Leave empty to be prompted. <code>--db-property=&lt;property=value&gt;[,&lt;property=value&gt;...]</code> Database-specific connection properties. <p>Use <code>--db-host</code> to specify the network name or IP address of the database server. The <code>--db-name</code> option defines the name of the 3DCityDB <code>v5</code> instance, while <code>--db-schema</code> sets the database schema to connect to. For PostgreSQL, the default schema is <code>citydb</code>. Additional schemas can be created using the database scripts included in the 3DCityDB <code>v5</code> software package.</p> <p>The username and password for connecting to the 3DCityDB are set with <code>--db-username</code> and <code>--db-password</code>. You can provide the password directly or leave it empty to be prompted for input before connecting. The prompt will time out after 60 seconds. If this option is omitted, citydb-tool will attempt to connect without a password.</p> <p>In addition to the standard connection parameters, database-specific properties can be provided through the <code>--db-property</code> option to configure the JDBC driver behavior. These properties should be specified as a comma-separated list of <code>property=value</code> pairs.</p> <p>The example below shows how to use the database connection options. It includes the PostgreSQL-specific <code>ssl</code> parameter to establish an SSL connection.</p> LinuxWindows CMD <pre><code>./citydb export citygml \\\n    -H localhost \\\n    -d citdb \\\n    -u citydb_user \\\n    -p mySecret \\\n    --db-property=ssl=true \\\n    -o output.gml\n</code></pre> <pre><code>citydb export citygml ^\n    -H localhost ^\n    -d citdb ^\n    -u citydb_user ^\n    -p mySecret ^\n    --db-property=ssl=true ^\n    -o output.gml\n</code></pre> <p>Tip</p> <p>Consult the database documentation for an overview of supported JDBC connection properties. For PostgreSQL, further details can be found here.</p>","tags":["database","connection options","3dcitydb"]},{"location":"citydb-tool/database/#using-configuration-files","title":"Using configuration files","text":"<p>citydb-tool supports loading options and settings from a JSON-encoded configuration file, as described here. The JSON structure for storing database connection options is illustrated below.</p> <pre><code>{\n  \"databaseOptions\": {\n    \"connections\": {\n      \"myFirstConnection\": {\n        \"host\": \"localhost\",\n        \"port\": 5432,\n        \"database\": \"citydb\",\n        \"schema\": \"citydb\",\n        \"user\": \"citydb_user\",\n        \"password\": \"mySecret\",\n        \"properties\": {\n          \"ssl\": true\n        },\n        \"poolOptions\": {\n          \"loginTimeout\": 120\n        }\n      },\n      \"mySecondConnection\": {\n        \"host\": \"the.host.de\",\n        \"database\": \"3dcitydb\",\n        \"user\": \"citydb_user\",\n        \"password\": \"mySecret\"\n      }\n    },\n    \"defaultConnection\": \"myFirstConnection\"\n  }\n}\n</code></pre> <p>Database connection options are defined in the <code>\"databaseOptions\"</code> object within the configuration file. The <code>\"connections\"</code> key contains one or more connection configurations, each identified by a unique, user-defined name. In the example above, <code>myFirstConnection</code> and <code>mySecondConnection</code> define connections to different 3DCityDB <code>v5</code> instances with distinct settings. The <code>\"defaultConnection\"</code> key specifies which connection to use. It can be omitted if only one connection is defined.</p> <p>Each connection can include the following properties, closely aligned with the corresponding command-line options:</p> Property Description Default value <code>\"host\"</code> Name of the host on which the 3DCityDB is running. <code>\"port\"</code> Port of the 3DCityDB server. 5432 <code>\"database\"</code> Name of the 3DCityDB database to connect to. <code>\"schema\"</code> Schema to use when connecting to the 3DCityDB <code>citydb</code> or username <code>\"user\"</code> Username to use when connecting to the 3DCityDB. <code>\"password\"</code> Password to use when connecting to the 3DCityDB <code>\"properties\"</code> Database-specific connection properties provided as key-value pairs. <code>\"poolOptions\"</code> Connection pool options provided as key-value pairs. <p>The <code>\"poolOptions\"</code> property is available only in the JSON configuration and is not exposed as a command-line option. It configures internal connection pool behavior. Currently, the only supported option is <code>\"loginTimeout\"</code>, which sets the maximum time (in seconds) to wait for a connection attempt before timing out (default: <code>60</code> seconds). Additional pool options may be added in future versions.</p> <p>You can use a configuration file as shown below.</p> <pre><code>citydb export citygml --config-file=/path/to/config.json -o output.gml\n</code></pre> <p>Note</p> <p>Connection options from a configuration file can be used alongside command-line options, in which case command-line options take precedence.</p> <p>Warning</p> <p>Storing passwords in a configuration file in clear text may pose a security risk. Consider using an environment variable for the password instead, or leave the <code>--db-password</code> option empty to be prompted.</p>","tags":["database","connection options","3dcitydb"]},{"location":"citydb-tool/database/#using-argument-files","title":"Using argument files","text":"<p>You can also store the database connection options in an argument file and reference it in the command using the <code>@</code> symbol. The contents of the argument file are automatically expanded into the argument list. For more information on using argument files, refer to the section here.</p> <p>For example, suppose the following database options are stored in an <code>@-file</code> located at <code>/home/foo/db-args</code>:</p> <pre><code>--db-host=localhost\n--db-port=5432\n--db-name=citdb\n--db-schema=citydb\n--db-username=citydb_user\n--db-password=mySecret\n--db-property=ssl=true\n</code></pre> <p>This <code>@-file</code> can then be used as shown below.</p> <pre><code>citydb export citygml @/home/foo/db-args -o output.gml\n</code></pre> <p>Warning</p> <p>Storing passwords in an argument file in clear text may pose a security risk. Consider using an environment variable for the password instead, or leave the <code>--db-password</code> option empty to be prompted.</p>","tags":["database","connection options","3dcitydb"]},{"location":"citydb-tool/database/#using-environment-variables","title":"Using environment variables","text":"<p>Environment variables allow for dynamic definition of database connection details. This approach is useful for automated scripts, CI/CD pipelines, or when credentials should not be hard-coded. It is also ideal for running citydb-tool in Docker environments, where environment variables can be easily passed into containers at runtime.</p> <p>The following environment variables for defining database connection details are supported by citydb-tool and closely align with the command-line options:</p> Environment variable Description <code>CITYDB_HOST</code> Name of the host on which the 3DCityDB is running. <code>CITYDB_PORT</code> Port of the 3DCityDB server. <code>CITYDB_NAME</code> Name of the 3DCityDB database to connect to. <code>CITYDB_SCHEMA</code> Schema to use when connecting to the 3DCityDB. <code>CITYDB_USER</code> Username to use when connecting to the 3DCityDB. <code>CITYDB_PASSWORD</code> Password to use when connecting to the 3DCityDB. <code>CITYDB_CONN_PROPS</code> Database-specific connection properties provided as comma-separated list of <code>property=value</code> pairs. <p>The following command demonstrates how to use these environment variables to dynamically specify database connection details.</p> LinuxWindows CMD <pre><code>export CITYDB_HOST=localhost\nexport CITYDB_PORT=5432\nexport CITYDB_NAME=citdb\nexport CITYDB_SCHEMA=citydb\nexport CITYDB_USER=citydb_user\nexport CITYDB_PASSWORD=mySecret\nexport CITYDB_CONN_PROPS=ssl=true\n\n./citydb export citygml -o output.gml\n</code></pre> <pre><code>set CITYDB_HOST=localhost\nset CITYDB_PORT=5432\nset CITYDB_NAME=citdb\nset CITYDB_SCHEMA=citydb\nset CITYDB_USER=citydb_user\nset CITYDB_PASSWORD=mySecret\nset CITYDB_CONN_PROPS=ssl=true\n\ncitydb export citygml -o output.gml\n</code></pre> <p>Note</p> <p>Environment variables can be used alongside command-line options and configuration files. However, they have the lowest precedence and are overridden by these options.</p>","tags":["database","connection options","3dcitydb"]},{"location":"citydb-tool/delete-config/","title":"Delete configuration","text":"<p>The configuration settings for the <code>delete</code> command are shown below.</p> <p>Tip</p> <p>The names and purposes of the JSON properties align closely with their counterparts in the command-line options. Where applicable, the description of each JSON property links to the command-line option for more details.</p> <pre><code>{\n  \"deleteOptions\": {\n    \"mode\": \"terminate\",\n    \"terminateWithSubFeatures\": true,\n    \"terminationDate\": \"2018-07-01T00:00:00\",\n    \"lineage\": \"myLineage\",\n    \"updatingPerson\": \"myUpdatingPerson\",\n    \"reasonForUpdate\": \"myReasonForUpdate\",\n    \"query\": {...},\n    \"validityOptions\": {...}\n  }\n}\n</code></pre>","tags":["citydb-tool","delete","config"]},{"location":"citydb-tool/delete-config/#general-delete-options","title":"General delete options","text":"Property Description Default value <code>\"mode\"</code> Delete mode: <code>delete</code>, <code>terminate</code>. <code>terminate</code> <code>\"terminateWithSubFeatures\"</code> Also terminate sub-features. <code>true</code> <code>\"terminationDate\"</code> Time in <code>&lt;YYYY-MM-DD&gt;</code> or <code>&lt;YYYY-MM-DDThh:mm:ss[(+|-)hh:mm]&gt;</code> format to use as termination date. <code>now</code> <code>\"lineage\"</code> Lineage to use for the features. <code>\"updatingPerson\"</code> Name of the user responsible for the import. database user <code>\"reasonForUpdate\"</code> Reason for importing the data.","tags":["citydb-tool","delete","config"]},{"location":"citydb-tool/delete-config/#query-options","title":"Query options","text":"<p>The <code>\"query\"</code> property is a container object for the following query and filtering options.</p> <pre><code>{\n  \"query\": {\n    \"featureTypes\": [ // (1)!\n      {\n        \"name\": \"bldg:Building\"\n      },\n      {\n        \"name\": \"Road\",\n        \"namespace\": \"http://3dcitydb.org/3dcitydb/transportation/5.0\"\n      }\n    ],\n    \"filter\": {\n      \"op\": \"s_intersects\",\n      \"args\": [\n        {\n          \"property\": \"core:envelope\"\n        },\n        {\n          \"bbox\": [10.0,10.0,20.0,20.0]\n        }\n      ]\n    },\n    \"filterSrs\": { // (2)!\n      \"srid\": 4326,\n      \"identifier\": \"http://www.opengis.net/def/crs/EPSG/0/4326\"\n    },\n    \"countLimit\": {\n      \"limit\": 1000,\n      \"startIndex\": 20\n    }\n  }\n}\n</code></pre> <ol> <li>The <code>\"name\"</code> property is mandatory. To avoid ambiguity, use the format <code>\"prefix:name\"</code> with a namespace alias as prefix or    specify the full namespace using the <code>\"namespace\"</code> property.</li> <li>Use either <code>\"srid\"</code>, <code>\"identifier\"</code>, or both to define the target CRS.</li> </ol> Property Description Default value <code>\"featureTypes\"</code> Array of JSON objects specifying the features to process. Each object must include the <code>\"name\"</code> of the feature type. To avoid ambiguity, use the format <code>\"prefix:name\"</code> with a namespace alias or specify the full namespace using the <code>\"namespace\"</code> property. <code>\"filter\"</code> A CQL2 filter expression, encoded as CQL2 text or JSON. <code>\"filterSrs\"</code> Specifies a CRS for filter geometries that differs from the 3DCityDB CRS. Use the <code>\"srid\"</code> or <code>\"identifier\"</code> property to define the filter CRS. <code>\"countLimit\"</code> The <code>\"limit\"</code> property sets the maximum number of features to export, and the <code>\"startIndex\"</code> property defines the <code>0</code>-based index within the result set to export.","tags":["citydb-tool","delete","config"]},{"location":"citydb-tool/delete-config/#validity-options","title":"Validity options","text":"<p>The <code>\"validityOptions\"</code> property is a container object for filtering features based on their validity.</p> <pre><code>{\n  \"validityOptions\": {\n    \"mode\": \"valid\",\n    \"reference\": \"database\",\n    \"at\": \"2018-07-01\",\n    \"lenient\": false\n  }\n}\n</code></pre> Property Description Default value <code>\"mode\"</code> Process features by validity: <code>valid</code>, <code>invalid</code>, <code>all</code>. <code>valid</code> <code>\"at\"</code> Check validity at a specific point in time. If provided, the time must be in <code>&lt;YYYY-MM-DD&gt;</code> or <code>&lt;YYYY-MM-DDThh:mm:ss[(+|-)hh:mm]&gt;</code> format. <code>\"reference\"</code> Validity time reference: <code>database</code>, <code>realWorld</code>. <code>database</code> <code>\"lenient\"</code> Ignore incomplete validity intervals of features. <code>false</code>","tags":["citydb-tool","delete","config"]},{"location":"citydb-tool/delete/","title":"Delete command","text":"<p>The <code>delete</code> command removes or terminates features in the 3DCityDB <code>v5</code>. It is built on top of the corresponding database functions to perform these operations.</p> <p>Tip</p> <p>Be cautious when using the <code>delete</code> command, as it starts the delete process immediately. There is no 'Are you sure?' prompt. You can first run the command in preview mode, which leaves the database unchanged.</p>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#synopsis","title":"Synopsis","text":"<pre><code>citydb delete [OPTIONS]\n</code></pre>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#options","title":"Options","text":"<p>The <code>delete</code> command inherits global options from the main <code>citydb</code> command. Additionally, it defines general delete, query and filter, and metadata options.</p>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#global-options","title":"Global options","text":"Option Description Default value <code>[@&lt;filename&gt;...]</code> One or more argument files containing options. <code>-h</code>, <code>--help</code> Show a help message and exit. <code>-V</code>, <code>--version</code> Print version information and exit. <code>--config-file=&lt;file&gt;</code> Load configuration from this file. <code>-L</code>, <code>--log-level=&lt;level&gt;</code> Log level: <code>fatal</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code>, <code>trace</code>. <code>info</code> <code>--log-file=&lt;file&gt;</code> Write log messages to this file. <code>--pid-file=&lt;file&gt;</code> Create a file containing the process ID. <code>--plugins=&lt;dir&gt;</code> Load plugins from this directory. <code>--use-plugin=&lt;plugin[=true|false]&gt;[,&lt;plugin[=true|false]&gt;...]</code> Enable or disable plugins with a matching fully qualified class name. <code>true</code> <p>For more details on the global options and usage hints, see here.</p>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#delete-options","title":"Delete options","text":"Option Description Default value <code>--temp-dir=&lt;dir&gt;</code> Store temporary files in this directory. <code>-m</code>, <code>--delete-mode=&lt;mode&gt;</code> Delete mode: <code>delete</code>, <code>terminate</code>. <code>terminate</code> <code>--[no-]terminate-all</code> Also terminate sub-features. <code>true</code> <code>--index-mode=&lt;mode&gt;</code> Index mode: keep, drop, drop_create. Consider dropping indexes when processing large quantities of data. <code>keep</code> <code>--preview</code> Run in preview mode. Features will not be deleted. <code>-c</code>, <code>--commit=&lt;number&gt;</code> Commit changes after deleting this number of features.","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#metadata-options-for-termination-operation","title":"Metadata options for termination operation","text":"Option Description Default value <code>--termination-date=&lt;time&gt;</code> Time in <code>&lt;YYYY-MM-DD&gt;</code> or <code>&lt;YYYY-MM-DDThh:mm:ss[(+|-)hh:mm]&gt;</code> format to use as termination date. <code>now</code> <code>--lineage=&lt;lineage&gt;</code> Lineage to use for the features. <code>--updating-person=&lt;name&gt;</code> Name of the user responsible for the delete. database user <code>--reason-for-update=&lt;reason&gt;</code> Reason for deleting the data.","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#query-and-filter-options","title":"Query and filter options","text":"Option Description Default value <code>-t</code>, <code>--type-name=&lt;[prefix:]name&gt;[,&lt;[prefix:]name&gt;...]</code> Names of the features to process. <code>-f</code>, <code>--filter=&lt;cql2-text&gt;</code> Filter to apply when retrieving features. Use the extended CQL2 filtering language of the 3DCityDB. <code>--filter-crs=&lt;crs&gt;</code> SRID or identifier of the CRS to use for geometries in the filter expression. 3DCityDB CRS <code>--sql-filter=&lt;sql&gt;</code> SQL query expression to use as filter. <code>--limit=&lt;count&gt;</code> Maximum number of features to process. <code>--start-index=&lt;index&gt;</code> Index within the input set from which features are processed.","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#time-based-feature-history-options","title":"Time-based feature history options","text":"Option Description Default value <code>-M</code>, <code>--validity=&lt;mode&gt;</code> Process features by validity: <code>valid</code>, <code>invalid</code>, <code>all</code>. <code>valid</code> <code>-T</code>, <code>--validity-at=&lt;time&gt;</code> Check validity at a specific point in time. If provided, the time must be in <code>&lt;YYYY-MM-DD&gt;</code> or <code>&lt;YYYY-MM-DDThh:mm:ss[(+|-)hh:mm]&gt;</code> format. <code>--validity-reference=&lt;source&gt;</code> Validity time reference: <code>database</code>, <code>real_world</code> <code>database</code> <code>--lenient-validity</code> Ignore incomplete validity intervals of features.","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#database-connection-options","title":"Database connection options","text":"Option Description Default value <code>-H</code>, <code>--db-host=&lt;host&gt;</code> Name of the host on which the 3DCityDB is running. <code>-P</code>, <code>--db-port=&lt;port&gt;</code> Port of the 3DCityDB server. 5432 <code>-d</code>, <code>--db-name=&lt;database&gt;</code> Name of the 3DCityDB database to connect to. <code>-S</code>, <code>--db-schema=&lt;schema&gt;</code> Schema to use when connecting to the 3DCityDB. <code>citydb</code> or username <code>-u</code>, <code>--db-username=&lt;user&gt;</code> Username to use when connecting to the 3DCityDB. <code>-p</code>, <code>--db-password[=&lt;password&gt;]</code> Password to use when connecting to the 3DCityDB. Leave empty to be prompted. <code>--db-property=&lt;property=value&gt;[,&lt;property=value&gt;...]</code> Database-specific connection properties. <p>For more details on the database connection options and usage hints, see here.</p>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#usage","title":"Usage","text":"","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#delete-mode","title":"Delete mode","text":"<p>The delete mode, defined by the <code>--delete-mode</code> option, determines how features are deleted in the database. The available modes are:</p> <ul> <li><code>delete</code>: Features are physically removed from the database, helping keep it streamlined and focused on the most   recent versions of features.</li> <li><code>terminate</code>: Features are not physically removed but are marked as terminated by setting their <code>termination_date</code>   property to the timestamp of the operation, which allows retaining the feature history. This is the default mode.</li> </ul> <p>Both modes delete a feature along with its \"contained\" subfeatures, which are considered part of the feature. The <code>--no-terminate-all</code> option changes this default behavior for termination. Terminating all subfeatures can take significantly longer than just terminating the feature itself, so it is important to evaluate whether cascading termination is necessary based on your use cases and scenarios.</p> <p>Note</p> <ul> <li>The <code>delete</code> command operates on non-terminated features unless specified otherwise. See   below for instructions on how to delete historical versions.</li> <li>Terminated features cannot be terminated again; they can only be physically removed.</li> <li>Unlike \"contained\" subfeatures, \"related\" subfeatures are not deleted. For the distinction between the two,   refer to this section.</li> </ul>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#committing-the-deletion","title":"Committing the deletion","text":"<p>By default, the delete operation is committed only after it completes successfully. If an error occurs or the operation is aborted, no features are deleted, leaving the database unchanged.</p> <p>Alternatively, you can use the <code>--commit</code> option to specify the number of features after which the delete operation is committed. This breaks the operation into smaller batches, with each batch being committed individually. In this case, the all-or-nothing strategy applies to each batch rather than the entire operation.</p> <p>Tip</p> <p>In rare situations, deleting a very large quantity of features with a single delete operation may require more SQL commands than the database allows per transaction. The <code>--commit</code> option helps prevent such large deletes from failing. For PostgreSQL, the maximum allowed number of SQL commands per transaction is 2<sup>32</sup>.</p>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#previewing-the-deletion","title":"Previewing the deletion","text":"<p>The <code>--preview</code> option runs the deletion in preview mode. The <code>delete</code> command is processed as if the deletion were taking place, but no changes are made to the database. This mode helps identify potential issues, such as conflicts or errors, before they affect the database, ensuring the actual delete operation proceeds as expected.</p>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#filtering-features-to-delete","title":"Filtering features to delete","text":"<p>The <code>delete</code> command offers several filtering options to control which features are deleted from the 3DCityDB <code>v5</code> instance.</p>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#feature-type-filter","title":"Feature type filter","text":"<p>The <code>--type-name</code> option specifies one or more feature types to delete. For each feature type, provide its type name as defined in the <code>OBJECTCLASS</code> table of the 3DCityDB <code>v5</code>. To avoid ambiguity, you can use the namespace alias from the <code>NAMESPACE</code> table as a prefix in the format <code>prefix:name</code>. Only features matching the specified type will be deleted.</p>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#cql2-based-filtering","title":"CQL2-based filtering","text":"<p>citydb-tool supports the OGC Common Query Language (CQL2) as the default language for filtering features from the 3DCityDB <code>v5</code>. CQL2 enables both attribute-based and spatial filtering, offering advanced comparison operators, spatial functions, and logical operators. Only features that meet the specified filter criteria will be deleted.</p> <p>CQL2 filter expressions are passed to the <code>delete</code> command using the <code>--filter</code> option. Be sure to enclose them in quotes if needed. When applying spatial filters, the filter geometries are assumed to be in the same CRS as the 3DCityDB instance. To specify a different CRS, use the <code>--filter-crs</code> option and provide the SRID (e.g., <code>4326</code> for WGS84).</p> <p>Tip</p> <p>For more details on using CQL2 with the 3DCityDB <code>v5</code>, refer to the CQL2 documentation.</p> <p>The example below demonstrates how to delete buildings based on their <code>height</code> property.</p> LinuxWindows CMD <pre><code>./citydb delete [...] \\\n    --type-name=bldg:Building \\\n    --filter=\"con:height &gt; 15\"\n</code></pre> <pre><code>citydb delete [...] ^\n    --type-name=bldg:Building ^\n    --filter=\"con:height &gt; 15\"\n</code></pre> <p>To apply a bounding box filter to the <code>envelope</code> property of features, you can use the following CQL2 filter expression.</p> LinuxWindows CMD <pre><code>./citydb delete [...] \\\n    --filter=\"s_intersects(core:envelope, bbox(13.369,52.506,13.405,52.520))\" \\\n    --filter-crs=4326\n</code></pre> <pre><code>citydb delete [...] ^\n    --filter=\"s_intersects(core:envelope, bbox(13.369,52.506,13.405,52.520))\" ^\n    --filter-crs=4326\n</code></pre>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#sql-based-filtering","title":"SQL-based filtering","text":"<p>The <code>--sql-filter</code> option allows the use of SQL <code>SELECT</code> statements as a filter expressions, providing access to all details of the relational schema. Any <code>SELECT</code> statement supported by the underlying database system is permitted, as long as it returns only a list of <code>id</code> values from the FEATURE table. Only features included in the returned list will be considered for deletion.</p> <p>Below is a simple example of filtering features based on their identifier in the <code>objectid</code> column of the <code>FEATURE</code> table. The <code>SELECT</code> statement must be enclosed in quotes, and special characters may need to be escaped.</p> LinuxWindows CMD <pre><code>./citydb delete [...] \\\n    --sql-filter=\"SELECT id FROM feature WHERE objectid IN ('ABC', 'DEF')\"\n</code></pre> <pre><code>citydb delete [...] ^\n    --sql-filter=\"SELECT id FROM feature WHERE objectid IN ('ABC', 'DEF')\"\n</code></pre>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#count-filter","title":"Count filter","text":"<p>The <code>--limit</code> option sets the maximum number of features to delete. The <code>--start-index</code> option defines the <code>0</code>-based index of the first feature to delete. These options can be used separately or together to control the total number of features deleted.</p> <p>Note</p> <ul> <li>When using multiple filters, all conditions must be satisfied for a feature to be deleted.</li> <li>Configuration and argument files are an excellent way   to store complex filter expressions and easily reuse them.</li> </ul>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#deleting-historical-versions","title":"Deleting historical versions","text":"<p>The bi-temporal intervals <code>[creation_date, termination_date)</code> and <code>[valid_from, valid_to)</code> enable feature histories in the 3DCityDB <code>v5</code> (see here). The first interval defines the feature's lifespan in the database, indicating when it was inserted and terminated, while the second interval represents the feature\u2019s real-world lifespan.</p> <p>A feature's validity depends on whether its time interval is bounded or unbounded:</p> <ul> <li>Unbounded (no end point): The feature is currently valid.</li> <li>Bounded: The feature was valid during the specified interval but is no longer valid.</li> </ul> <p>The <code>--validity</code> option controls which features are deleted based on their validity:</p> <ul> <li><code>valid</code>: Deletes only features that are currently valid. This is the default mode.</li> <li><code>invalid</code>: Deletes only historical features that are no longer valid.</li> <li><code>all</code>: Deletes all features, regardless of their validity.</li> </ul> <p>The <code>--validity-reference</code> option specifies whether validity is determined based on database time (<code>database</code>, default) or real-world time (<code>real_world</code>).</p> <p>Additionally, the <code>--validity-at</code> option allows you to check the validity of features at a specific point in time in the past. You can provide this time as either a date (<code>&lt;YYYY-MM-DD&gt;</code>) or a date-time with an optional UTC offset (<code>&lt;YYYY-MM-DDThh:mm:ss[(+|-)hh:mm]&gt;</code>). Only features that were either <code>valid</code> or <code>invalid</code> at the specified time will be deleted.</p> <p>The example below demonstrates how to physically remove all features that were terminated before 2018-07-01, and are thus <code>invalid</code> at that date:</p> LinuxWindows CMD <pre><code>./citydb delete [...] \\\n    --mode=delete \\\n    --validity=invalid \\\n    --validity-at=2018-07-01 \\\n    --validity-referene=database\n</code></pre> <pre><code>citydb delete [...] ^\n    --mode=delete ^\n    --validity=invalid ^\n    --validity-at=2018-07-01 ^\n    --validity-referene=database\n</code></pre> <p>Note</p> <p>Validity checks are strict by default. Use <code>--lenient-validity</code> to treat time intervals as valid, even if their start point is undefined.</p>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#managing-indexes-during-deletion","title":"Managing indexes during deletion","text":"<p>When deleting data, database indexes are updated in real time, which can slow down the delete process, especially with large databases. The <code>--index-mode</code> option offers the following modes for handling indexes during the delete operation:</p> <ul> <li><code>keep</code>: The indexes remain unchanged. This is the default mode.</li> <li><code>drop</code>: The indexes are removed before the delete operation starts, improving delete performance.</li> <li><code>drop_create</code>: Similar to <code>drop</code>, but the indexes are re-created after the deletion completes, ensuring they are   available for subsequent queries.</li> </ul> <p>Note</p> <p>Dropping and re-creating indexes can also take a significant amount of time, depending on the size of the database. This mode is beneficial when deleting large amounts of features. However, as the database grows, the overhead of dropping and re-creating indexes may outweigh the benefits, especially when deleting smaller sets of features.</p> <p>Tip</p> <p>The <code>index</code> command allows you to manage indexes independently of the delete operation, giving you greater control over index handling.</p>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/delete/#defining-termination-metadata","title":"Defining termination metadata","text":"<p>When running in <code>terminate</code> mode, the metadata of the affected features in the database can be updated to track information about the termination process.</p> <p>The options <code>--lineage</code>, <code>--updating-person</code>, and <code>--reason-for-update</code> can be used to specify the feature\u2019s origin, the person responsible for the termination, and the reason for the termination. The termination timestamp can be set to a specific point in time using <code>--termination-date</code>, provided as either a date (<code>&lt;YYYY-MM-DD&gt;</code>) or a date-time with an optional UTC offset (<code>&lt;YYYY-MM-DDThh:mm:ss[(+|-)hh:mm]&gt;</code>).</p> <p>This metadata is specific to 3DCityDB and is not part of the CityGML standard (see also here). If not provided, the termination timestamp is set to the time of the operation, and the username used to establish the 3DCityDB database connection will be used as the default value for <code>--updating-person</code>.</p> <p>Note</p> <p>The termination timestamp specified with <code>--termination-date</code> will apply to all features. Be careful when selecting a timestamp, as the feature's validity in the database is determined by the time interval <code>[creation_date, termination_date)</code>. To maintain a valid feature history, these intervals should not overlap for the same real-world feature instance.</p>","tags":["citydb-tool","delete"]},{"location":"citydb-tool/docker/","title":"citydb-tool Docker","text":"<p>The citydb-tool Docker images expose the capabilities of the citydb-tool CLI for dockerized applications and workflows. Using Docker is the quickest way to get started with citydb-tool, as no setup and installed Java runtime are required. See here for more on how to get Docker.</p> <p>Docker image compatibility</p> <p>3DCityDB <code>v5</code> introduces a substantially changed database schema, that requires a new set of tools.</p> <p>    Currently, only citydb-tool is compatible with 3DCityDB <code>v5</code>.    </p> <p>Usage of 3DCityDB <code>v4</code> tools (3DCityDB Importer/Exporter, 3D Web Map Client, 3DCityDB Web Feature Service (WFS)) is still possible by migrating data to a 3DCityDB <code>v4</code>. See here for more details on compatibility of CityGML versions and citydb-tools, and how to migrate data between versions.</p>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#tldr","title":"TL;DR","text":"LinuxWindows CMD <pre><code>docker run --rm --name citydb-tool [-i -t] \\\n  [-e CITYDB_HOST=the.host.de] \\\n  [-e CITYDB_PORT=5432] \\\n  [-e CITYDB_NAME=theDBName] \\\n  [-e CITYDB_SCHEMA=theCityDBSchemaName] \\\n  [-e CITYDB_USERNAME=theUsername] \\\n  [-e CITYDB_PASSWORD=theSecretPass] \\\n  [-v /my/data/:/data] \\\n3dcitydb/citydb-tool[:TAG] COMMAND\n</code></pre> <pre><code>docker run --rm --name citydb-tool [-i -t] ^\n  [-e CITYDB_HOST=the.host.de] ^\n  [-e CITYDB_PORT=5432] ^\n  [-e CITYDB_NAME=theDBName] ^\n  [-e CITYDB_SCHEMA=theCityDBSchemaName] ^\n  [-e CITYDB_USERNAME=theUsername] ^\n  [-e CITYDB_PASSWORD=theSecretPass] ^\n  [-v \"c:\\users\\me\\mydata:/data\" ] ^\n3dcitydb/citydb-tool[:TAG] COMMAND\n</code></pre> <p>Tip</p> <p>Use the <code>help</code> command to list all CLI parameters and arguments. For subcommands (e.g. <code>import citygml</code>) us this syntax <code>import help citygml</code> to show CLI options.</p>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#image-versions","title":"Image versions","text":"<p>The citydb-tool Docker images are based on Eclpise Temurin JRE 21. They are available from 3DCityDB DockerHub or Github Container registry (ghcr.io).</p> Dockerhubghcr.io <pre><code>docker pull 3dcitydb/citydb-tool\n</code></pre> <pre><code>docker pull ghcr.io/3dcitydb/citydb-tool\n</code></pre>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#tags","title":"Tags","text":"<p>We publish images for two types of events. For each release on Github (e.g. <code>v1.2.3</code>) we provide a set of images using the citydb-tool version as tag. The tags composed of <code>&lt;major&gt;.&lt;minor&gt;</code> and <code>&lt;major&gt;</code> are volatile and point to the latest citydb-tool release. For instance, the images tagged <code>1</code> or <code>1.2</code> will point to <code>1.2.3</code>, if this is the latest version. This is useful if you want automatic updates for minor or micro releases. The <code>latest</code> tag points alway to the latest release version.</p> Dockerhubghcr.io <pre><code>docker pull 3dcitydb/citydb-tool:1.0.0\ndocker pull 3dcitydb/citydb-tool:1.0\ndocker pull 3dcitydb/citydb-tool:1\ndocker pull 3dcitydb/citydb-tool:latest\n</code></pre> <pre><code>docker pull ghcr.io/3dcitydb/citydb-tool:1.0.0\ndocker pull ghcr.io/3dcitydb/citydb-tool:1.0\ndocker pull ghcr.io/3dcitydb/citydb-tool:1\ndocker pull ghcr.io/3dcitydb/citydb-tool:latest\n</code></pre> <p>For each push to the main branch of the citydb-tool repository we publish a fresh version of the edge image tag.</p> <p>Warning</p> <p>The <code>edge</code> image contains the latest state of development. It may contain bugs and should not be used for production purposes. Only use this image if you have a specific reason, e.g. testing an unreleased feature.</p> Dockerhubghcr.io <pre><code>docker pull 3dcitydb/citydb-tool:edge\n</code></pre> <pre><code>docker pull ghcr.io/3dcitydb/citydb-tool:edge\n</code></pre>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#version-overview","title":"Version overview","text":"<p>Following table gives an overview on the available image versions and sizes.</p> Tag Build status Size edge latest 1.0.0 <p>Note</p> <p>Minor releases are not listed in this table.</p> <p>The latest citydb-tool version is: </p> <p>The latest image version on DockerHub is: </p>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#usage-and-configuration","title":"Usage and configuration","text":"<p>The citydb-tool Docker images do not require configuration for most use cases and allow the usage of the  <code>citydb-tool</code> CLI out of the box. Simply append the citydb-tool command you want to execute to the <code>docker run</code> command line. The commands of <code>citydb-tool</code> are documented here.</p> <pre><code>docker run -i -t --rm --name citydb-tool 3dcitydb/citydb-tool COMMAND\n</code></pre>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#help-and-cli-documentation","title":"Help and CLI documentation","text":"<p>Use the <code>help</code> command to see the CLI documentation and list all available commands:</p> <pre><code>docker run -i -t --rm 3dcitydb/citydb-tool help\n</code></pre> <p>Run <code>help COMMAND</code> to see the CLI documentation for a specific command:</p> <pre><code>docker run -i -t --rm 3dcitydb/citydb-tool help import\ndocker run -i -t --rm 3dcitydb/citydb-tool help export\ndocker run -i -t --rm 3dcitydb/citydb-tool help delete\n# ...\n</code></pre> <p>To see the usage description of a subcommand, use the <code>help</code> function of the top level command:</p> <pre><code>docker run -i -t --rm 3dcitydb/citydb-tool import help citygml\n</code></pre>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#mounts-for-data-import-and-export","title":"Mounts for data import and export","text":"<p>All import and export operations require a mounted directory for exchanging data between the host system and the container. Use the <code>-v</code> or <code>--mount</code> options of the <code>docker run</code> command to mount a directory or file. The default working directory inside the container is <code>/data</code>.</p> Mount a folderMount current working directory LinuxWindows CMD <pre><code># mount /my/data/ on the host system to /data\ndocker run -i -t --rm --name citydb-tool \\\n  -v /my/data/:/data \\\n3dcitydb/citydb-tool COMMAND\n</code></pre> <pre><code># mount /my/data/ on the host system to /data\ndocker run -i -t --rm --name citydb-tool ^\n  -v \"c:\\users\\me\\mydata:/data\" ^\n3dcitydb/citydb-tool COMMAND\n</code></pre> LinuxWindows CMD <pre><code># Mount the current working directory on the host system to /data\ndocker run -i -t --rm --name citydb-tool \\\n  -v $PWD:/data \\\n3dcitydb/citydb-tool COMMAND\n</code></pre> <pre><code># Mount the current working directory on the host system to /data\ndocker run -i -t --rm --name citydb-tool ^\n  -v \"%cd%:/data\" ^\n3dcitydb/citydb-tool COMMAND\n</code></pre> <p>Tip</p> <p>Watch out for correct paths when working with mounts! All paths passed to the citydb-tool CLI have to be specified from the container's perspective. If you are not familiar with Docker volumes and bind mounts go through the Docker volume guide.</p> <p>In order to allocate an interactive console session for the container process, you must use the <code>docker run</code> options <code>-i</code> and <code>-t</code> together. This comes in handy, for instance, if you don't want to pass the password for the 3DCityDB connection on the command line but rather want to be prompted to enter it interactively on the console. You must use the <code>-p</code> option of the citydb-tool CLI without a value for this purpose as shown in the example below.</p> LinuxWindows CMD <pre><code>docker run -i -t --rm --name citydb-tool \\\n  -v /my/data/:/data \\\n3dcitydb/citydb-tool import \\\n  -H my.host.de -d citydb -u postgres -p \\\n  bigcity.gml\n</code></pre> <pre><code>docker run -i -t --rm --name citydb-tool ^\n  -v \"c:\\users\\me\\mydata:/data\" ^\n3dcitydb/citydb-tool import ^\n  -H my.host.de -d citydb -u postgres -p ^\n  bigcity.gml\n</code></pre> <p>The <code>docker run</code> command offers further options to configure the container process. Please check the official reference for more information.</p>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#environment-variables","title":"Environment variables","text":"<p>The citydb-tool Docker images support the following environment variables to set the credentials for the connection to a 3DCityDB instance. A detailed documentation of the environment variables is available here.</p> <p>Warning</p> <p>When running the citydb-tool on the command line, the values of these variables will be used as input if a corresponding CLI option is not available. The CLI options always take precedence over the environmental variables.</p> <code>CITYDB_HOST=hostname or ip</code> <p>Name of the host or IP address on which the 3DCityDB is running.</p> <code>CITYDB_PORT=port</code> <p>Port of the 3DCityDB to connect to. Default is 5432, the default PostgreSQL port.</p> <code>CITYDB_NAME=DB name</code> <p>Name of the 3DCityDB database to connect to. Default is <code>postgres</code>.</p> <code>CITYDB_SCHEMA=citydb</code> <p>Schema to use when connecting to the 3DCityDB (default: <code>citydb</code> or <code>username</code>).</p> <code>CITYDB_USERNAME=username</code> <p>Username to use when connecting to the 3DCityDB.</p> <p><code>CITYDB_PASSWORD=thePassword</code></p> <p>Password to use when connecting to the 3DCityDB.</p>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#user-management-and-file-permissions","title":"User management and file permissions","text":"<p>When exchanging files between the host system and the citydb-tool container, it is import to make sure that files and directories have permissions set correctly. For security reasons (see here) the citydb-tool runs as non-root user by default inside the container. The default user is named <code>impexp</code> with user and group identifier (uid, gid) = <code>1000</code>.</p> LinuxWindows CMD <pre><code>docker run --rm --entrypoint bash 3dcitydb/citydb-tool \\\n  -c \"cat /etc/passwd | grep ubuntu\"\n# ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash\n</code></pre> <pre><code>docker run --rm --entrypoint bash 3dcitydb/citydb-tool ^\n  -c \"cat /etc/passwd | grep ubuntu\"\n# ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash\n</code></pre> <p>As 1000 is the default uid/gid for the first user on many Linux distributions in most cases you won't notice this, as the user on the host system is going to have the same uid/gid as inside the container. However, if you are facing file permission issues, you can run the citydb-tool container as another user with the <code>-u</code> option of the <code>docker run</code> command. This way you can make sure, that the right permissions are set on generated files in the mounted directory.</p> <p>The following example illustrates how to use the <code>-u</code> option to pass the user ID of your current host's user.</p> LinuxWindows CMD <pre><code>docker run --rm --name citydb-tool \\\n  -u $(id -u):$(id -g) \\\n  -v /my/data/:/data \\\n3dcitydb/citydb-tool COMMAND\n</code></pre> <pre><code>docker run --rm --name citydb-tool ^\n  -u $(id -u):$(id -g) ^\n  -v \"c:\\users\\me\\mydata:/data\" ^\n3dcitydb/citydb-tool COMMAND\n</code></pre>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#build-your-own-images","title":"Build your own images","text":"<p>3DCityDB citydb-tool images are easy to build on your own. The image supports two build arguments:</p> <code>BUILDER_IMAGE_TAG='21-jdk-noble'</code> <p>Tag off the image to use for the build stage. This is usually not required to set. All available Eclipse Temurin image tags can be found here.</p> <code>RUNTIME_IMAGE_TAG='21-jre-noble'</code> <p>Tag off the image to use for the runtime stage. This is usually not required to set. It can be used to set a specific base image version. All available Eclipse Temurin image tags can be found here.</p>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#build-process","title":"Build process","text":"<ol> <li> <p>Clone the citydb-tool Github repository and navigate to the cloned repo:</p> <pre><code>git clone https://github.com/3dcitydb/citydb-tool.git\ncd citydb-tool\n</code></pre> </li> <li> <p>Checkout the release version, branch, or commit you want to build form. Available release tags, branches, and commits can be found on Github.</p> <pre><code>git checkout [TAG|BRANCH|COMMIT]\n</code></pre> </li> <li> <p>Build the image using <code>docker build</code>:</p> <pre><code>docker build -t 3dcitydb/citydb-tool .\n</code></pre> </li> </ol>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#examples","title":"Examples","text":"<p>For the following examples we assume that a 3DCityDB instance with the following settings is running:</p> <pre><code>DB HOSTNAME   my.host.de\nDB PORT       5432\nDB NAME       citydb\nDB USERNAME   postgres\nDB PASSWORD   changeMe\n</code></pre>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#importing-citygml","title":"Importing CityGML","text":"<p>This section provides some examples for importing CityGML datasets. Refer to <code>import</code> for a detailed description of the citydb-tool CLI import command.</p> <p>Import the CityGML dataset <code>/home/me/mydata/bigcity.gml</code> on you host system into the DB given above:</p> LinuxWindows CMD <pre><code>docker run --rm --name citydb-tool \\\n  -v /home/me/mydata/:/data \\\n3dcitydb/citydb-tool import citygml \\\n  -H my.host.de -d citydb -u postgres -p changeMe \\\n  bigcity.gml\n</code></pre> <pre><code>docker run --rm --name citydb-tool ^\n  -v \"c:\\users\\me\\mydata:/data\" ^\n3dcitydb/citydb-tool import citygml ^\n  -H my.host.de -d citydb -u postgres -p changeMe ^\n  bigcity.gml\n</code></pre> <p>Note</p> <p>Since the host directory <code>/home/me/mydata/</code> is mounted to the default working directory <code>/data</code> inside the container, you can simply reference your input file by its filename instead of using an absolute path.</p> <p>Import all CityGML datasets from <code>/home/me/mydata/</code> on your host system into the DB given above:</p> LinuxWindows CMD <pre><code>docker run --rm --name citydb-tool \\\n  -v /home/me/mydata/:/data \\\n3dcitydb/citydb-tool import citygml \\\n  -H my.host.de -d citydb -u postgres -p changeMe \\\n  /data/\n</code></pre> <pre><code>docker run --rm --name citydb-tool ^\n  -v \"c:\\users\\me\\mydata:/data\" ^\n3dcitydb/citydb-tool import citygml ^\n  -H my.host.de -d citydb -u postgres -p changeMe ^\n  /data/\n</code></pre>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#exporting-citygml","title":"Exporting CityGML","text":"<p>This section provides some examples for exporting CityGML datasets. Refer to <code>export</code> for a detailed description of the citydb-tool CLI export command.</p> <p>Export all data from the DB given above to <code>/home/me/mydata/output.gml</code>:</p> LinuxWindows CMD <pre><code>docker run --rm --name citydb-tool \\\n  -v /home/me/mydata/:/data \\\n3dcitydb/citydb-tool export \\\n  -H my.host.de -d citydb -u postgres -p changeMe \\\n  -o output.gml\n</code></pre> <pre><code>docker run --rm --name citydb-tool ^\n  -v \"c:\\users\\me\\mydata:/data\" ^\n3dcitydb/citydb-tool export ^\n  -H my.host.de -d citydb -u postgres -p changeMe ^\n  -o output.gml\n</code></pre>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#citydb-tool-docker-combined-with-3dcitydb-docker","title":"citydb-tool Docker combined with 3DCityDB Docker","text":"<p>This example shows how to use the 3DCityDB and citydb-tool Docker images in conjunction. We will download a CityGML 2.0 test dataset, create a 3DCityDB, import the test data, and create a CityGML 3.0 and CityJSON export.</p>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#data-preparation","title":"Data preparation","text":"<p>Let's begin by downloading a test dataset:  Railway Scene LoD3 dataset</p> <p>For this example we assume the downloaded data is at your current working directory. We use the well known <code>$PWD</code> environment variable to specify all paths in the following, e.g. <code>$PWD/Railway_Scene_LoD3.zip</code>. Below are some examples for common Linux tools to download the file, but you can use the URL above too.</p> <code>wget</code><code>curl</code> <pre><code>wget \"https://github.com/3dcitydb/importer-exporter/raw/master/resources/samples/Railway%20Scene/Railway_Scene_LoD3.zip\"\n</code></pre> <pre><code>curl -LO \"https://github.com/3dcitydb/importer-exporter/raw/master/resources/samples/Railway%20Scene/Railway_Scene_LoD3.zip\"\n</code></pre> <p>The test dataset uses following coordinate reference system:</p> <pre><code>SRID        3068\nSRS_NAME    urn:ogc:def:crs,crs:EPSG::3068,crs:EPSG::5783\n</code></pre> <p>You can read this information from the unpacked CityGML <code>.gml</code> files <code>srsName</code> property or extract it with a text search utility like <code>grep</code>.</p> <pre><code>grep -i -m 1 srsName Railway_Scene_LoD3_exp.gml\n</code></pre>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#networking-preparation","title":"Networking preparation","text":"<p>The next step is to bring up a Docker network called <code>citydb-net</code>. We will attach all containers in this example to this network using the <code>--network</code> option of <code>docker run</code>. This will allow us to use container names as hostnames for connecting <code>citydb-tool</code> to the database.</p> <pre><code># docker network remove citydb-net\n\ndocker network create citydb-net\n</code></pre> <p>Tip</p> <p>There are many other networking options to connect Docker containers. Take a look at the Docker networking overview to learn more.</p>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#3dcitydb-creation","title":"3DCityDB creation","text":"<p>Now let's create a a 3DCityDB instance using the 3DCityDB Docker images. We name the container <code>citydb</code> (line 3), attach it to the network created above (line 4), and use the <code>SRID</code> and <code>SRS_NAME</code> of our test dataset (line 6-7).</p> LinuxWindows CMD <pre><code># docker rm -f -v citydb\n\ndocker run -t -d --name citydb \\\n  --network citydb-net \\\n  -e POSTGRES_PASSWORD=changeMe \\\n  -e SRID=3068 \\\n  -e SRS_NAME=\"urn:ogc:def:crs,crs:EPSG::3068,crs:EPSG::5783\" \\\n3dcitydb/3dcitydb-pg\n</code></pre> <pre><code># docker rm -f -v citydb\n\ndocker run -t -d --name citydb ^\n  --network citydb-net ^\n  -e POSTGRES_PASSWORD=changeMe ^\n  -e SRID=3068 ^\n  -e SRS_NAME=\"urn:ogc:def:crs,crs:EPSG::3068,crs:EPSG::5783\" ^\n3dcitydb/3dcitydb-pg\n</code></pre> <p>We now have a 3DCityDB instance running with these properties:</p> <pre><code>3DCityDB Version    5.0.0\nSRID                3068\nSRS_NAME            urn:ogc:def:crs,crs:EPSG::3068,crs:EPSG::5783\nDBNAME              postgres\nSCHEMA NAME         citydb\nDBUSER              postgres\nDBPASSWORD          changeMe\n</code></pre> <p>To verify this, you can check the console log of the database container:</p> <pre><code>docker logs citydb\n</code></pre>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#import-data","title":"Import data","text":"<p>The next step is to import our data to the 3DCityDB. Therefore, we need to mount our working directory (<code>$PWD</code>) containing the downloaded <code>.zip</code> file to the container, as shown in line 3. The emphasized line shows how to use the container name from the first step as hostname when both containers are attached to the same Docker network.</p> LinuxWindows CMD <pre><code>docker run -i -t --rm --name citydb-tool \\\n  --network citydb-net \\\n  -v \"$PWD:/data\" \\\n3dcitydb/citydb-tool:edge import citygml \\\n  -H citydb \\\n  -d postgres \\\n  -u postgres \\\n  -p changeMe \\\n  \"Railway_Scene_LoD3.zip\"\n</code></pre> <pre><code>docker run -i -t --rm --name citydb-tool ^\n  --network citydb-net ^\n  -v \"%cd%:/data\" ^\n3dcitydb/citydb-tool:edge import citygml ^\n  -H citydb ^\n  -d postgres ^\n  -u postgres ^\n  -p changeMe ^\n  \"Railway_Scene_LoD3.zip\"\n</code></pre>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#export-citygml-v30","title":"Export CityGML v3.0","text":"<p>Now, with our data inside the 3DCityDB, let's use the citydb-tool to create a CityGML 3.0 export of the entire dataset. As CityGML 3.0 is the default export option, there are no additional options required for the export command. Same as for the import step above, we mount our current working directory for data exchange with the container. Additionally, we add the <code>-o</code> option to specify an output file name <code>Railway_Scene_LoD3_CityGML_v3.gml</code> (line 10) and set the container to run as the current user and group to make sure we have sufficient permissions for writing the output file (line 2, see here for more on permissions).</p> LinuxWindows CMD <pre><code>docker run -i -t --rm --name citydb-tool \\\n  -u \"$(id -u):$(id -g)\" \\\n  --network citydb-net \\\n  -v \"$PWD:/data\" \\\n3dcitydb/citydb-tool:edge export citygml \\\n  -H citydb \\\n  -d postgres \\\n  -u postgres \\\n  -p changeMe \\\n  -o \"Railway_Scene_LoD3_CityGML_v3.gml\"\n</code></pre> <pre><code>docker run -i -t --rm --name citydb-tool ^\n  -u \"$(id -u):$(id -g)\" ^\n  --network citydb-net ^\n  -v \"%cd%:/data\" ^\n3dcitydb/citydb-tool:edge export citygml ^\n  -H citydb ^\n  -d postgres ^\n  -u postgres ^\n  -p changeMe ^\n  -o \"Railway_Scene_LoD3_CityGML_v3.gml\"\n</code></pre>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#export-cityjson","title":"Export CityJSON","text":"<p>Creating a CityJSON export works the same way as described above for CityGML. The only differences are the changed <code>citydb-tool</code> command and export file name, as shown in the highlighted lines.</p> LinuxWindows CMD <pre><code>docker run -i -t --rm --name citydb-tool \\\n  -u \"$(id -u):$(id -g)\" \\\n  --network citydb-net \\\n  -v \"$PWD:/data\" \\\n3dcitydb/citydb-tool:edge export cityjson \\\n  -H citydb \\\n  -d postgres \\\n  -u postgres \\\n  -p changeMe \\\n  -o \"Railway_Scene_LoD3_CityJSON.json\"\n</code></pre> <pre><code>docker run -i -t --rm --name citydb-tool ^\n  -u \"$(id -u):$(id -g)\" ^\n  --network citydb-net ^\n  -v \"%cd%:/data\" ^\n3dcitydb/citydb-tool:edge export cityjson ^\n  -H citydb ^\n  -d postgres ^\n  -u postgres ^\n  -p changeMe ^\n  -o \"Railway_Scene_LoD3_CityJSON.json\"\n</code></pre>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/docker/#cleanup","title":"Cleanup","text":"<p>If you no longer need the 3DCityDB, its container, data volume, and the network can be disposed.</p> <pre><code>docker rm -f -v citydb\ndocker network rm citydb-net\n</code></pre>","tags":["docker","citydb-tool"]},{"location":"citydb-tool/export-citygml/","title":"Export CityGML command","text":"<p>The <code>export citygml</code> command exports city model data from the 3DCityDB <code>v5</code> to a CityGML file.</p>","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#synopsis","title":"Synopsis","text":"<pre><code>citydb export citygml [OPTIONS]\n</code></pre>","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#options","title":"Options","text":"<p>The <code>export citygml</code> command inherits global options from the main <code>citydb</code> command and general export, query and filter, and tiling options from its parent <code>export</code> command. Additionally, it provides CityGML format-specific export options.</p>","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#global-options","title":"Global options","text":"Option Description Default value <code>[@&lt;filename&gt;...]</code> One or more argument files containing options. <code>-h</code>, <code>--help</code> Show a help message and exit. <code>-V</code>, <code>--version</code> Print version information and exit. <code>--config-file=&lt;file&gt;</code> Load configuration from this file. <code>-L</code>, <code>--log-level=&lt;level&gt;</code> Log level: <code>fatal</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code>, <code>trace</code>. <code>info</code> <code>--log-file=&lt;file&gt;</code> Write log messages to this file. <code>--pid-file=&lt;file&gt;</code> Create a file containing the process ID. <code>--plugins=&lt;dir&gt;</code> Load plugins from this directory. <code>--use-plugin=&lt;plugin[=true|false]&gt;[,&lt;plugin[=true|false]&gt;...]</code> Enable or disable plugins with a matching fully qualified class name. <code>true</code> <p>For more details on the global options and usage hints, see here.</p>","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#general-export-options","title":"General export options","text":"Option Description Default value <code>-o</code>, <code>--output=&lt;file&gt;</code> Name of the output file. <code>--output-encoding=&lt;encoding&gt;</code> Encoding to use for the output file. <code>--fail-fast</code> Fail fast on errors. <code>--temp-dir=&lt;dir&gt;</code> Store temporary files in this directory. <code>--threads=&lt;threads&gt;</code> Number of threads to use for parallel processing. <code>--crs=&lt;crs&gt;</code> SRID or identifier of the CRS to use for the coordinates of geometries. 3DCityDB CRS <code>--crs-name=&lt;name&gt;</code> Name of the CRS to use in the output file. <code>--transform=&lt;m0,m1,...,m11|swap-xy&gt;</code> Transform coordinates using a 3x4 matrix in row-major order. Use <code>swap-xy</code> as a shortcut. <p>For more details on the general export options and usage hints, see here.</p>","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#citygml-export-options","title":"CityGML export options","text":"Option Description Default value <code>-v</code>, <code>--citygml-version=&lt;version&gt;</code> CityGML version: <code>3.0</code>, <code>2.0</code>, <code>1.0</code>. <code>3.0</code> <code>--[no-]pretty-print</code> Format and indent output file. <code>true</code> <code>-x</code>, <code>--xsl-transform=&lt;stylesheet&gt;[,&lt;stylesheet&gt;...]</code> Apply XSLT stylesheets to transform output.","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#upgrade-options-for-citygml-20-and-10","title":"Upgrade options for CityGML 2.0 and 1.0","text":"Option Description Default value <code>--use-lod4-as-lod3</code> Use LoD4 as LoD3, replacing an existing LoD3. <code>--map-lod0-roof-edge</code> Map LoD0 roof edges onto roof surfaces. <code>--map-lod1-surface</code> Map LoD1 multi-surfaces onto generic thematic surfaces.","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#query-and-filter-options","title":"Query and filter options","text":"Option Description Default value <code>-t</code>, <code>--type-name=&lt;[prefix:]name&gt;[,&lt;[prefix:]name&gt;...]</code> Names of the features to process. <code>-f</code>, <code>--filter=&lt;cql2-text&gt;</code> Filter to apply when retrieving features. Use the extended CQL2 filtering language of the 3DCityDB. <code>--filter-crs=&lt;crs&gt;</code> SRID or identifier of the CRS to use for geometries in the filter expression. 3DCityDB CRS <code>--sql-filter=&lt;sql&gt;</code> SQL query expression to use as filter. <code>-s</code>, <code>--sort-by=&lt;property[+|-]&gt;[,&lt;property[+|-]&gt;...]</code> Properties and sort orders for sorting features. <code>--limit=&lt;count&gt;</code> Maximum number of features to process. <code>--start-index=&lt;index&gt;</code> Index within the input set from which features are processed. <code>-l</code>, <code>--lod=&lt;lod&gt;[,&lt;lod&gt;...]</code> Export geometries with a matching LoD. <code>--lod-mode=&lt;mode&gt;</code> LoD filter mode: <code>or</code>, <code>and</code>, <code>minimum</code>, <code>maximum</code>. <code>or</code> <code>--lod-search-depth=&lt;0..n|all&gt;</code> Levels of sub-features to search for matching LoDs 0 <code>--no-appearances</code> Do not process appearances. <code>-a</code>, <code>--appearance-theme=&lt;theme&gt;[,&lt;theme&gt;...]</code> Process appearances with a matching theme. Use <code>none</code> for the null theme. <p>For more details on the query and filter options and usage hints, see here.</p>","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#time-based-feature-history-options","title":"Time-based feature history options","text":"Option Description Default value <code>-M</code>, <code>--validity=&lt;mode&gt;</code> Process features by validity: <code>valid</code>, <code>invalid</code>, <code>all</code>. <code>valid</code> <code>-T</code>, <code>--validity-at=&lt;time&gt;</code> Check validity at a specific point in time. If provided, the time must be in <code>&lt;YYYY-MM-DD&gt;</code> or <code>&lt;YYYY-MM-DDThh:mm:ss[(+|-)hh:mm]&gt;</code> format. <code>--validity-reference=&lt;source&gt;</code> Validity time reference: <code>database</code>, <code>real_world</code> <code>database</code> <code>--lenient-validity</code> Ignore incomplete validity intervals of features. <p>For more details on the time-based feature history options and usage hints, see here.</p>","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#tiling-options","title":"Tiling options","text":"Option Description Default value <code>--tile-matrix=&lt;columns,rows&gt;</code> Export tiles in a columns x rows grid. <code>--tile-dimension=&lt;width[unit],height[unit]&gt;</code> Export tiles with specified width and height, aligned with the database CRS grid (default length unit of the CRS assumed). <code>--tile-extent=&lt;x_min,y_min,x_max,y_max[,srid]&gt;</code> Extent to use for tiling. auto-computed <code>--tile-origin=&lt;origin&gt;</code> Tile indexes origin: <code>top_left</code>, <code>bottom_left</code>. <code>top_left</code> <p>For more details on the tiling options and usage hints, see here.</p>","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#database-connection-options","title":"Database connection options","text":"Option Description Default value <code>-H</code>, <code>--db-host=&lt;host&gt;</code> Name of the host on which the 3DCityDB is running. <code>-P</code>, <code>--db-port=&lt;port&gt;</code> Port of the 3DCityDB server. 5432 <code>-d</code>, <code>--db-name=&lt;database&gt;</code> Name of the 3DCityDB database to connect to. <code>-S</code>, <code>--db-schema=&lt;schema&gt;</code> Schema to use when connecting to the 3DCityDB. <code>citydb</code> or username <code>-u</code>, <code>--db-username=&lt;user&gt;</code> Username to use when connecting to the 3DCityDB. <code>-p</code>, <code>--db-password[=&lt;password&gt;]</code> Password to use when connecting to the 3DCityDB. Leave empty to be prompted. <code>--db-property=&lt;property=value&gt;[,&lt;property=value&gt;...]</code> Database-specific connection properties. <p>For more details on the database connection options and usage hints, see here.</p>","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#usage","title":"Usage","text":"<p>Tip</p> <p>For general usage hints applicable to all subcommands of the <code>export</code> command (including but not limited to <code>export citygml</code>), refer to the documentation for the <code>export</code> command here.</p>","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#specifying-the-citygml-version","title":"Specifying the CityGML version","text":"<p>The <code>export citygml</code> command supports CityGML versions 3.0, 2.0, and 1.0 as output formats. Use the <code>--citygml-version</code> option to select a specific version for export (default: <code>3.0</code>).</p>","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#upgrading-citygml-20-and-10","title":"Upgrading CityGML 2.0 and 1.0","text":"<p>CityGML data can be exported from the 3DCityDB <code>v5</code> in the same version as it was imported, without loss. However, switching CityGML versions between import and export may result in data loss, as CityGML 3.0 is not fully backward compatible with versions 2.0 and 1.0. While citydb-tool applies automatic conversions where possible, certain scenarios require user input.</p> <p>If either CityGML 2.0 or 1.0 is the primary format for your 3DCityDB <code>v5</code>, the following upgrade options are available to resolve compatibility issues when exporting to CityGML 3.0:</p> <ul> <li><code>--use-lod4-as-lod3</code>: Converts LoD4 geometries to LoD3, replacing any existing LoD3.</li> <li><code>--map-lod0-roof-edge</code>: Converts LoD0 roof edge geometries into roof surface features.</li> <li><code>--map-lod1-surface</code>: Converts LoD1 multi-surfaces into generic thematic surface features.</li> </ul> <p>Note</p> <p>The upgrade options are not required if you only manage CityGML 3.0 data in your 3DCityDB <code>v5</code>. However, be cautious when exporting to CityGML 2.0 or 1.0 in this setup, as citydb-tool does not offer downgrade options. Any CityGML 3.0 content that cannot be automatically downgraded during export will be skipped. For more details, refer to the compatibility and data migration guide.</p>","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#applying-xsl-transformations","title":"Applying XSL transformations","text":"<p>XSLT stylesheets enable the on-the-fly transformation of database content before it is written to the CityGML output file. This allows you to modify or restructure the data to meet specific needs, such as changing values, filtering attributes, or removing and replacing entire GML/XML structures.</p> <p>The <code>--xsl-transform</code> option specifies one or more XSLT stylesheets to be applied to the output file. Each stylesheet must be referenced by its filename and path, which can be either absolute or relative to the current directory. Multiple XSLT stylesheets can be listed, separated by commas, to facilitate a multi-step transformation process. In this case, the stylesheets are executed in the specified order, with the output of one stylesheet serving as the input for the next.</p> LinuxWindows CMD <pre><code>./citydb export citygml [...] -o my-city.gml \\\n    --xsl-transform=my-first-stylesheet.xsl,my-second-stylesheet.xsl\n</code></pre> <pre><code>citydb export citygml [...] -o my-city.gml ^\n    --xsl-transform=my-first-stylesheet.xsl,my-second-stylesheet.xsl\n</code></pre> <p>Note</p> <ul> <li>To handle large output files, citydb-tool chunks the export into top-level features, which are then written   to the output file. As a result, each XSLT stylesheet operates on individual top-level features, not the entire file.   Keep this in mind when developing your XSLT.</li> <li>The output of each XSLT stylesheet must be valid CityGML.</li> </ul>","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-citygml/#formatting-the-output","title":"Formatting the output","text":"<p>By default, the <code>export citygml</code> command uses pretty printing to format the GML/XML output. This approach enhances readability by adding line breaks and indentation to clearly represent the hierarchy and nesting of XML elements. In scenarios where human readability is less important, pretty printing can be disabled using the <code>--no-pretty-print</code> option. This reduces file size and optimizes storage and transfer efficiency.</p>","tags":["citydb-tool","CityGML","export"]},{"location":"citydb-tool/export-cityjson/","title":"Export CityJSON command","text":"<p>The <code>export cityjson</code> command exports city model data from the 3DCityDB <code>v5</code> to a CityJSON file. Since CityJSON implements only a subset of the CityGML Conceptual Model, some data may not be fully exportable.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#synopsis","title":"Synopsis","text":"<pre><code>citydb export cityjson [OPTIONS]\n</code></pre>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#options","title":"Options","text":"<p>The <code>export cityjson</code> command inherits global options from the main <code>citydb</code> command and general export, query and filter, and tiling options from its parent <code>export</code> command. Additionally, it provides CityJSON format-specific export options.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#global-options","title":"Global options","text":"Option Description Default value <code>[@&lt;filename&gt;...]</code> One or more argument files containing options. <code>-h</code>, <code>--help</code> Show a help message and exit. <code>-V</code>, <code>--version</code> Print version information and exit. <code>--config-file=&lt;file&gt;</code> Load configuration from this file. <code>-L</code>, <code>--log-level=&lt;level&gt;</code> Log level: <code>fatal</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code>, <code>trace</code>. <code>info</code> <code>--log-file=&lt;file&gt;</code> Write log messages to this file. <code>--pid-file=&lt;file&gt;</code> Create a file containing the process ID. <code>--plugins=&lt;dir&gt;</code> Load plugins from this directory. <code>--use-plugin=&lt;plugin[=true|false]&gt;[,&lt;plugin[=true|false]&gt;...]</code> Enable or disable plugins with a matching fully qualified class name. <code>true</code> <p>For more details on the global options and usage hints, see here.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#general-export-options","title":"General export options","text":"Option Description Default value <code>-o</code>, <code>--output=&lt;file&gt;</code> Name of the output file. <code>--output-encoding=&lt;encoding&gt;</code> Encoding to use for the output file. <code>--fail-fast</code> Fail fast on errors. <code>--temp-dir=&lt;dir&gt;</code> Store temporary files in this directory. <code>--threads=&lt;threads&gt;</code> Number of threads to use for parallel processing. <code>--crs=&lt;crs&gt;</code> SRID or identifier of the CRS to use for the coordinates of geometries. 3DCityDB CRS <code>--crs-name=&lt;name&gt;</code> Name of the CRS to use in the output file. <code>--transform=&lt;m0,m1,...,m11|swap-xy&gt;</code> Transform coordinates using a 3x4 matrix in row-major order. Use <code>swap-xy</code> as a shortcut. <p>For more details on the general export options and usage hints, see here.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#cityjson-export-options","title":"CityJSON export options","text":"Option Description Default value <code>-v</code>, <code>--cityjson-version=&lt;version&gt;</code> CityJSON version: <code>2.0</code>, <code>1.1</code>, <code>1.0</code>. <code>2.0</code> <code>--[no-]json-lines</code> Write output as CityJSON Sequence in JSON Lines format. This option requires CityJSON 1.1 or later. <code>true</code> <code>--pretty-print</code> Format and indent output file. <code>--html-safe</code> Write JSON that is safe to embed into HTML. <code>--vertex-precision=&lt;digits&gt;</code> Number of decimal places to keep for geometry vertices. 3 <code>--template-precision=&lt;digits&gt;</code> Number of decimal places to keep for template vertices. 3 <code>--texture-vertex-precision=&lt;digits&gt;</code> Number of decimal places to keep for texture vertices. 7 <code>--[no-]transform-coordinates</code> Transform coordinates to integer values when exporting in CityJSON 1.0. <code>true</code> <code>--replace-templates</code> Replace template geometries with real coordinates. <code>--[no-]material-defaults</code> Use CityGML default values for material properties. <code>true</code>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#upgrade-options-for-citygml-20-and-10","title":"Upgrade options for CityGML 2.0 and 1.0","text":"Option Description Default value <code>--use-lod4-as-lod3</code> Use LoD4 as LoD3, replacing an existing LoD3.","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#query-and-filter-options","title":"Query and filter options","text":"Option Description Default value <code>-t</code>, <code>--type-name=&lt;[prefix:]name&gt;[,&lt;[prefix:]name&gt;...]</code> Names of the features to process. <code>-f</code>, <code>--filter=&lt;cql2-text&gt;</code> Filter to apply when retrieving features. Use the extended CQL2 filtering language of the 3DCityDB. <code>--filter-crs=&lt;crs&gt;</code> SRID or identifier of the CRS to use for geometries in the filter expression. 3DCityDB CRS <code>--sql-filter=&lt;sql&gt;</code> SQL query expression to use as filter. <code>-s</code>, <code>--sort-by=&lt;property[+|-]&gt;[,&lt;property[+|-]&gt;...]</code> Properties and sort orders for sorting features. <code>--limit=&lt;count&gt;</code> Maximum number of features to process. <code>--start-index=&lt;index&gt;</code> Index within the input set from which features are processed. <code>-l</code>, <code>--lod=&lt;lod&gt;[,&lt;lod&gt;...]</code> Export geometries with a matching LoD. <code>--lod-mode=&lt;mode&gt;</code> LoD filter mode: <code>or</code>, <code>and</code>, <code>minimum</code>, <code>maximum</code>. <code>or</code> <code>--lod-search-depth=&lt;0..n|all&gt;</code> Levels of sub-features to search for matching LoDs 0 <code>--no-appearances</code> Do not process appearances. <code>-a</code>, <code>--appearance-theme=&lt;theme&gt;[,&lt;theme&gt;...]</code> Process appearances with a matching theme. Use <code>none</code> for the null theme. <p>For more details on the query and filter options and usage hints, see here.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#time-based-feature-history-options","title":"Time-based feature history options","text":"Option Description Default value <code>-M</code>, <code>--validity=&lt;mode&gt;</code> Process features by validity: <code>valid</code>, <code>invalid</code>, <code>all</code>. <code>valid</code> <code>-T</code>, <code>--validity-at=&lt;time&gt;</code> Check validity at a specific point in time. If provided, the time must be in <code>&lt;YYYY-MM-DD&gt;</code> or <code>&lt;YYYY-MM-DDThh:mm:ss[(+|-)hh:mm]&gt;</code> format. <code>--validity-reference=&lt;source&gt;</code> Validity time reference: <code>database</code>, <code>real_world</code> <code>database</code> <code>--lenient-validity</code> Ignore incomplete validity intervals of features. <p>For more details on the time-based feature history options and usage hints, see here.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#tiling-options","title":"Tiling options","text":"Option Description Default value <code>--tile-matrix=&lt;columns,rows&gt;</code> Export tiles in a columns x rows grid. <code>--tile-dimension=&lt;width[unit],height[unit]&gt;</code> Export tiles with specified width and height, aligned with the database CRS grid (default length unit of the CRS assumed). <code>--tile-extent=&lt;x_min,y_min,x_max,y_max[,srid]&gt;</code> Extent to use for tiling. auto-computed <code>--tile-origin=&lt;origin&gt;</code> Tile indexes origin: <code>top_left</code>, <code>bottom_left</code>. <code>top_left</code> <p>For more details on the tiling options and usage hints, see here.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#database-connection-options","title":"Database connection options","text":"Option Description Default value <code>-H</code>, <code>--db-host=&lt;host&gt;</code> Name of the host on which the 3DCityDB is running. <code>-P</code>, <code>--db-port=&lt;port&gt;</code> Port of the 3DCityDB server. 5432 <code>-d</code>, <code>--db-name=&lt;database&gt;</code> Name of the 3DCityDB database to connect to. <code>-S</code>, <code>--db-schema=&lt;schema&gt;</code> Schema to use when connecting to the 3DCityDB. <code>citydb</code> or username <code>-u</code>, <code>--db-username=&lt;user&gt;</code> Username to use when connecting to the 3DCityDB. <code>-p</code>, <code>--db-password[=&lt;password&gt;]</code> Password to use when connecting to the 3DCityDB. Leave empty to be prompted. <code>--db-property=&lt;property=value&gt;[,&lt;property=value&gt;...]</code> Database-specific connection properties. <p>For more details on the database connection options and usage hints, see here.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#usage","title":"Usage","text":"<p>Tip</p> <p>For general usage hints applicable to all subcommands of the <code>export</code> command (including but not limited to <code>export cityjson</code>), refer to the documentation for the <code>export</code> command here.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#specifying-the-cityjson-version","title":"Specifying the CityJSON version","text":"<p>The <code>export cityjson</code> command supports CityJSON versions 2.0, 1.1, and 1.0 as output formats. Use the <code>--cityjson-version</code> option to select a specific version for export (default: <code>2.0</code>).</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#streaming-exports","title":"Streaming exports","text":"<p>When exporting to CityJSON 2.0 and 1.1, the default output format is CityJSON Text Sequence (CityJSONSeq), which efficiently supports streaming large exports. Features are exported in chunks as individual <code>CityJSONFeature</code> objects, with each object written to the output file on a separate line. This streaming approach improves memory efficiency, reduces storage requirements, and allows immediate access to the data as it is streamed.</p> <p>If the newline-delimited CityJSONSeq format is not preferred, streaming can be disabled using the <code>--no-json-lines</code> option.</p> <p>Note</p> <p>CityJSON 1.0 does not support CityJSONSeq or streaming.</p> <p>Warning</p> <p>Without streaming, the entire export must be loaded into memory before being written to the output file, which could quickly exceed system memory limits for large exports. In such cases, consider using filters or tiled exports to reduce the export size.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#upgrading-citygml-20-and-10","title":"Upgrading CityGML 2.0 and 1.0","text":"<p>CityJSON does not support LoD4 representations of features as defined in CityGML 2.0 and 1.0. Therefore, if you have imported CityGML 2.0 or 1.0 data containing LoD4 geometries into your 3DCityDB <code>v5</code>, these geometries will be skipped by default when exporting to CityJSON.</p> <p>To address this, you can use the <code>--use-lod4-as-lod3</code> option to map LoD4 geometries to LoD3 during export. However, this will also overwrite any existing LoD3 representation of the features.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#transforming-coordinates","title":"Transforming coordinates","text":"<p>CityJSON applies quantization to the coordinates of the geometry vertices to reduce file size. The coordinates are represented as integer values, with the scale factor and translation required to recover the original coordinates stored as separate <code>\"transform\"</code> property.</p> <p>Quantization is mandatory for CityJSON 2.0 and 1.1, but optional for CityJSON 1.0. By default, the <code>export cityjson</code> command uses quantization for CityJSON 1.0 as well, though it can be disabled using the <code>--no-transform-coordinates</code> option.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#replacing-template-geometries","title":"Replacing template geometries","text":"<p>CityJSON supports the CityGML concept of implicit geometries, enabling template geometries to be defined and stored once in a CityJSON file and reused by multiple features. These template geometries are stored using local coordinates. Features that reference a template must provide both a reference point and a transformation matrix to convert the coordinates to real-world values and place the template correctly within the city model.</p> <p>If the target system consuming the CityJSON export cannot handle template geometries, the <code>--replace-templates</code> option can be used to replace them with real-world coordinates during export.</p> <p>Note</p> <p>Replacing templates will increase the file size and eliminate the benefits of reusing them.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#suppressing-material-defaults","title":"Suppressing material defaults","text":"<p>By default, citydb-tool includes default values for material properties such as <code>\"diffuseColor\"</code>, <code>\"emissiveColor\"</code>, and <code>\"ambientIntensity\"</code> in the output file when specific values for these properties are missing in the database. These defaults are defined in the CityGML Appearance model and help prevent issues with target systems that do not automatically apply them.</p> <p>You can use the <code>--no-material-defaults</code> option to suppress this behavior and omit the properties with default values, which also reduces the file size.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-cityjson/#formatting-the-output","title":"Formatting the output","text":"<p>The <code>export cityjson</code> command provides several options to format the CityJSON output:</p> <ul> <li><code>--vertex-precision</code>: Controls the number of decimal places retained for the coordinates of geometries. The coordinate   values will be rounded to the specified number of decimal places (default: <code>3</code>). This option balances data accuracy   with file size. More decimal places increase precision but may result in a larger file size.</li> <li><code>--template-precision</code>: Similar to <code>--vertex-precision</code>, but affects the number of decimal places for the coordinates   of implicit geometries (default: <code>3</code>).</li> <li><code>--texture-vertex-precision</code>: Similar to <code>--vertex-precision</code>, but affects the number of decimal places for texture   coordinates (default: <code>7</code>).</li> <li><code>--pretty-print</code>: Enhances readability by adding line breaks and indentation to clearly represent the hierarchy and   nesting of JSON elements, but increases file size.</li> <li><code>--html-safe</code>: Escapes special characters in the CityJSON output for safe use in HTML contexts.</li> </ul> <p>Note</p> <p>The <code>--pretty-print</code> option cannot be used with streaming exports that use newline-delimited JSON.</p>","tags":["citydb-tool","CityJSON","export"]},{"location":"citydb-tool/export-config/","title":"Export configuration","text":"<p>The configuration settings for the <code>export</code> command are divided into <code>\"exportOptions\"</code> for general export settings and <code>\"writeOptions\"</code> for output file settings and format-specific options.</p> <p>Tip</p> <p>The names and purposes of the JSON properties align closely with their counterparts in the command-line options. Where applicable, the description of each JSON property links to the command-line option for more details.</p>","tags":["citydb-tool","export","config"]},{"location":"citydb-tool/export-config/#export-options","title":"Export options","text":"<p>The example below illustrates the JSON structure for the export options.</p> <pre><code>{\n  \"exportOptions\": {\n    \"numberOfThreads\": 4,\n    \"targetSrs\": { // (1)!\n      \"srid\": 4326,\n      \"identifier\": \"http://www.opengis.net/def/crs/EPSG/0/4326\"\n    },\n    \"affineTransform\": [0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0],\n    \"lodOptions\": {\n      \"lods\": [\"2\",\"3\"],\n      \"mode\": \"minimum\"\n    },\n    \"appearanceOptions\": {\n      \"exportAppearances\": true,\n      \"themes\": [\"foo\",\"bar\"],\n      \"numberOfTextureBuckets\": 10\n    },\n    \"query\": {...},\n    \"validityOptions\": {...},\n    \"tiling\": {...}\n  }\n}\n</code></pre> <ol> <li>Use either <code>\"srid\"</code>, <code>\"identifier\"</code>, or both to define the target CRS.</li> </ol>","tags":["citydb-tool","export","config"]},{"location":"citydb-tool/export-config/#general-export-options","title":"General export options","text":"Property Description Default value <code>\"numberOfThreads\"</code> Number of threads to use for parallel processing. <code>\"targetSrs\"</code> Specifies the CRS for reprojecting geometries during export. Use the <code>\"srid\"</code> or <code>\"identifier\"</code> property to define the target CRS. <code>\"affineTransform\"</code> Transform coordinates using a 3x4 matrix in row-major order. The matrix coefficients are represented as array. <code>\"lodOptions\"</code> Defines an <code>\"lods\"</code> array and a <code>\"mode\"</code> to specify whether to <code>\"keep\"</code> (default), <code>\"remove\"</code>, or keep only the <code>\"minimum\"</code> or <code>\"maximum\"</code> LoD representation of each feature. <code>\"appearanceOptions\"</code> The <code>\"themes\"</code> array restricts the export of appearances based on their <code>theme</code> property. To exclude all appearances, set the <code>\"exportAppearances\"</code> property to <code>false</code> (default: <code>true</code>).  Use the <code>\"numberOfTextureBuckets\"</code> property to organize exported texture images into subfolders (default: <code>0</code>).","tags":["citydb-tool","export","config"]},{"location":"citydb-tool/export-config/#query-options","title":"Query options","text":"<p>The <code>\"query\"</code> property is a container object for the following query and filtering options.</p> <pre><code>{\n  \"query\": {\n    \"featureTypes\": [ // (1)!\n      {\n        \"name\": \"bldg:Building\"\n      },\n      {\n        \"name\": \"Road\",\n        \"namespace\": \"http://3dcitydb.org/3dcitydb/transportation/5.0\"\n      }\n    ],\n    \"filter\": {\n      \"op\": \"s_intersects\",\n      \"args\": [\n        {\n          \"property\": \"core:envelope\"\n        },\n        {\n          \"bbox\": [10.0,10.0,20.0,20.0]\n        }\n      ]\n    },\n    \"filterSrs\": { // (2)!\n      \"srid\": 4326,\n      \"identifier\": \"http://www.opengis.net/def/crs/EPSG/0/4326\"\n    },\n    \"countLimit\": {\n      \"limit\": 1000,\n      \"startIndex\": 20\n    },\n    \"lodFilter\": {\n      \"lods\": [\"2\",\"3\"],\n      \"mode\": \"or\",\n      \"searchDepth\": 1\n    },\n    \"sorting\": {\n      \"sortBy\": [\n        {\n          \"property\": \"core:objectId\",\n          \"sortOrder\": \"desc\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> <ol> <li>The <code>\"name\"</code> property is mandatory. To avoid ambiguity, use the format <code>\"prefix:name\"</code> with a namespace alias as prefix or    specify the full namespace using the <code>\"namespace\"</code> property.</li> <li>Use either <code>\"srid\"</code>, <code>\"identifier\"</code>, or both to define the target CRS.</li> </ol> Property Description Default value <code>\"featureTypes\"</code> Array of JSON objects specifying the features to process. Each object must include the <code>\"name\"</code> of the feature type. To avoid ambiguity, use the format <code>\"prefix:name\"</code> with a namespace alias as prefix or specify the full namespace using the <code>\"namespace\"</code> property. <code>\"filter\"</code> A CQL2 filter expression, encoded as CQL2 text or JSON. <code>\"filterSrs\"</code> Specifies a CRS for filter geometries that differs from the 3DCityDB CRS. Use the <code>\"srid\"</code> or <code>\"identifier\"</code> property to define the filter CRS. <code>\"countLimit\"</code> The <code>\"limit\"</code> property sets the maximum number of features to export, and the <code>\"startIndex\"</code> property defines the <code>0</code>-based index within the result set to export. <code>\"lodFilter\"</code> Defines an <code>\"lods\"</code> array and a <code>\"mode\"</code> to filter features based on LoD: <code>\"or\"</code> (default) requires any matching LoD, while <code>\"and\"</code> requires all. The <code>\"searchDepth\"</code> sets the number of subfeature levels to search for a matching LoD (default: <code>0</code>). <code>\"sorting\"</code> Array of <code>\"sortBy\"</code> objects to sort the output by a <code>\"property\"</code> (specified as a JSON path) in the given <code>\"sortOrder\"</code>: <code>\"asc\"</code> (default) or <code>\"desc\"</code>.","tags":["citydb-tool","export","config"]},{"location":"citydb-tool/export-config/#validity-options","title":"Validity options","text":"<p>The <code>\"validityOptions\"</code> property is a container object for filtering features based on their validity.</p> <pre><code>{\n  \"validityOptions\": {\n    \"mode\": \"valid\",\n    \"reference\": \"database\",\n    \"at\": \"2018-07-01\",\n    \"lenient\": false\n  }\n}\n</code></pre> Property Description Default value <code>\"mode\"</code> Process features by validity: <code>valid</code>, <code>invalid</code>, <code>all</code>. <code>valid</code> <code>\"at\"</code> Check validity at a specific point in time. If provided, the time must be in <code>&lt;YYYY-MM-DD&gt;</code> or <code>&lt;YYYY-MM-DDThh:mm:ss[(+|-)hh:mm]&gt;</code> format. <code>\"reference\"</code> Validity time reference: <code>database</code>, <code>realWorld</code>. <code>database</code> <code>\"lenient\"</code> Ignore incomplete validity intervals of features. <code>false</code>","tags":["citydb-tool","export","config"]},{"location":"citydb-tool/export-config/#tiling-options","title":"Tiling options","text":"<p>The <code>\"tiling\"</code> property is a container object for defining tiled exports.</p> <pre><code>{\n  \"tiling\": {\n    \"extent\": {\n      \"coordinates\": [10.0,10.0,20.0,20.0],\n      \"srs\": { // (1)!\n        \"srid\": 4326,\n        \"identifier\": \"http://www.opengis.net/def/crs/EPSG/0/4326\"\n      }\n    },\n    \"tileMatrixOrigin\": \"topLeft\",\n    \"scheme\": {...}\n  }\n}\n</code></pre> <ol> <li>Use either <code>\"srid\"</code>, <code>\"identifier\"</code>, or both to define the target CRS.</li> </ol> Property Description Default value <code>\"extent\"</code> Defines a 2D bounding box as tiling extent using a <code>\"coordinates\"</code> array for the lower-left and upper-right corners. If the coordinates differ from the 3DCityDB CRS, a different <code>\"srs\"</code> can be specified with <code>\"srid\"</code> or <code>\"identifier\"</code> property. <code>auto-computed</code> <code>\"tileMatrixOrigin\"</code> Tile indexes origin: <code>topLeft</code>, <code>bottomLeft</code>. <code>topLeft</code> <p>The <code>\"scheme\"</code> property is an object that defines the tiling scheme, with the <code>\"type\"</code> property indicating the specific scheme being used.</p> DimensionMatrix <pre><code>{\n  \"scheme\": {\n    \"type\": \"Dimension\",\n    \"width\": {\n      \"value\": 2.0,\n      \"unit\": \"km\"\n    },\n    \"height\": {\n      \"value\": 2.0,\n      \"unit\": \"km\"\n    }\n  }\n}\n</code></pre> Property Description Default value <code>\"type\"</code> <code>\"Dimension\"</code> (fixed). <code>\"width\"</code> Specifies the width of each tile using the <code>\"value\"</code> property. If the <code>\"unit\"</code> is omitted, the database CRS unit is used. <code>\"height\"</code> Specifies the height of each tile using the <code>\"value\"</code> property. If the <code>\"unit\"</code> is omitted, the database CRS unit is used. <pre><code>{\n  \"scheme\": {\n    \"type\": \"Matrix\",\n    \"columns\": 10,\n    \"rows\": 20\n  }\n}\n</code></pre> Property Description Default value <code>\"type\"</code> <code>\"Matrix\"</code> (fixed). <code>\"columns\"</code> Specifies the number of <code>columns</code> for the resulting grid. <code>1</code> <code>\"rows\"</code> Specifies the number of <code>rows</code> for the resulting grid. <code>1</code>","tags":["citydb-tool","export","config"]},{"location":"citydb-tool/export-config/#write-options","title":"Write options","text":"<p>The JSON structure for storing write options is shown below. Format-specific settings are provided within the <code>\"formatOptions\"</code> container object, with the output format name used as the key for the corresponding settings.</p> <p>Tip</p> <p>You only need to provide format-specific options for the file format that matches your output files.</p> <pre><code>{\n  \"writeOptions\": {\n    \"failFast\": false,\n    \"numberOfThreads\": 4,\n    \"tempDirectory\": \"/path/to/temp\",\n    \"encoding\": \"UTF-8\",\n    \"srsName\": \"http://www.opengis.net/def/crs/EPSG/0/25832\",\n    \"formatOptions\": {\n      \"CityGML\": {...},\n      \"CityJSON\": {...}\n    }\n  }\n}\n</code></pre>","tags":["citydb-tool","export","config"]},{"location":"citydb-tool/export-config/#general-write-options","title":"General write options","text":"Property Description Default value <code>\"failFast\"</code> Fail fast on errors. <code>false</code> <code>\"numberOfThreads\"</code> Number of threads to use for parallel processing. <code>\"tempDirectory\"</code> Store temporary files in this directory. <code>\"encoding\"</code> Encoding to use for the output file. <code>\"srsName\"</code> Name of the CRS to use in the output file.","tags":["citydb-tool","export","config"]},{"location":"citydb-tool/export-config/#citygml-options","title":"CityGML options","text":"<p>The <code>\"CityGML\"</code> property is a container object for CityGML-specific format options.</p> <pre><code>{\n  \"CityGML\": {\n    \"version\": \"3.0\",\n    \"prettyPrint\": true,\n    \"addressMode\": \"columnsFirst\",\n    \"xslTransforms\": [\n      \"/path/to/myFirstStylesheet.xsl\",\n      \"/path/to/mySecondStylesheet.xsl\"\n    ],\n    \"useLod4AsLod3\": false,\n    \"mapLod0RoofEdge\": false,\n    \"mapLod1MultiSurfaces\": false\n  }\n}\n</code></pre> Property Description Default value <code>\"version\"</code> CityGML version: <code>3.0</code>, <code>2.0</code>, <code>1.0</code>. <code>3.0</code> <code>\"prettyPrint\"</code> Format and indent output file. <code>true</code> <code>addressMode</code> Specifies how to construct addresses based on the <code>ADDRESS</code> table: <ul><li><code>columnsOnly</code>: Use only structured address fields.</li><li><code>columnsFirst</code>: Prefer structured columns; fall back to <code>content</code> blob.</li><li><code>xalSourceOnly</code>: Use only the address blob stored in the <code>content</code> column.</li><li><code>xalSourceFirst</code>: Prefer the <code>content</code> blob; fall back to structured columns.</li></ul> <code>columnsFirst</code> <code>\"xslTransforms\"</code> An array of XSLT stylesheets to transform the output, referenced by filename and path (absolute or relative). The stylesheets are applied in the specified order. <code>\"useLod4AsLod3\"</code> Use LoD4 as LoD3, replacing an existing LoD3. <code>false</code> <code>\"mapLod0RoofEdge\"</code> Map LoD0 roof edges onto roof surfaces. <code>false</code> <code>\"mapLod1MultiSurfaces\"</code> Map LoD1 multi-surfaces onto generic thematic surfaces. <code>false</code>","tags":["citydb-tool","export","config"]},{"location":"citydb-tool/export-config/#cityjson-options","title":"CityJSON options","text":"<p>The <code>\"CityJSON\"</code> property is a container object for CityJSON-specific format options.</p> <pre><code>{\n  \"CityJSON\": {\n    \"version\": \"2.0\",\n    \"jsonLines\": true,\n    \"prettyPrint\": false,\n    \"htmlSafe\": false,\n    \"vertexPrecision\": 3,\n    \"templatePrecision\": 3,\n    \"textureVertexPrecision\": 7,\n    \"transformCoordinates\": true,\n    \"replaceTemplateGeometries\": false,\n    \"useMaterialDefaults\": true,\n    \"fallbackTheme\": \"unnamed\",\n    \"useLod4AsLod3\": false,\n    \"writeGenericAttributeTypes\": false\n  }\n}\n</code></pre> Property Description Default value <code>\"version\"</code> CityJSON version: <code>2.0</code>, <code>1.1</code>, <code>1.0</code>. <code>2.0</code> <code>\"jsonLines\"</code> Write output as CityJSON Sequence in JSON Lines format. This option requires CityJSON 1.1 or later. <code>true</code> <code>\"prettyPrint\"</code> Format and indent output file. <code>false</code> <code>\"htmlSafe\"</code> Write JSON that is safe to embed into HTML. <code>false</code> <code>\"vertexPrecision\"</code> Number of decimal places to keep for geometry vertices. 3 <code>\"templatePrecision\"</code> Number of decimal places to keep for template vertices. 3 <code>\"textureVertexPrecision\"</code> Number of decimal places to keep for texture vertices. 7 <code>\"replaceTemplateGeometries\"</code> Replace template geometries with real coordinates. <code>false</code> <code>\"useMaterialDefaults\"</code> Name of the CRS to use in the output file. <code>true</code> <code>\"fallbackTheme\"</code> Defines the fallback theme used when the <code>theme</code> property is missing from the database. <code>unnamed</code> <code>\"writeGenericAttributeTypes\"</code> Adds an extra root property to the CityJSON output that lists generic attributes along with the CityGML data types. <code>false</code> <code>useLod4AsLod3</code> Use LoD4 as LoD3, replacing an existing LoD3. <code>false</code>","tags":["citydb-tool","export","config"]},{"location":"citydb-tool/export/","title":"Export command","text":"<p>The <code>export</code> command exports city model data from the 3DCityDB <code>v5</code> in a supported format. Each format has a dedicated subcommand with format-specific options.</p>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#synopsis","title":"Synopsis","text":"<pre><code>citydb export [OPTIONS] COMMAND\n</code></pre>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#options","title":"Options","text":"<p>The <code>export</code> command inherits global options from the main <code>citydb</code> command. Additionally, it defines general export, query and filter, and tiling options, which apply to all of its subcommands.</p>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#global-options","title":"Global options","text":"Option Description Default value <code>[@&lt;filename&gt;...]</code> One or more argument files containing options. <code>-h</code>, <code>--help</code> Show a help message and exit. <code>-V</code>, <code>--version</code> Print version information and exit. <code>--config-file=&lt;file&gt;</code> Load configuration from this file. <code>-L</code>, <code>--log-level=&lt;level&gt;</code> Log level: <code>fatal</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code>, <code>trace</code>. <code>info</code> <code>--log-file=&lt;file&gt;</code> Write log messages to this file. <code>--pid-file=&lt;file&gt;</code> Create a file containing the process ID. <code>--plugins=&lt;dir&gt;</code> Load plugins from this directory. <code>--use-plugin=&lt;plugin[=true|false]&gt;[,&lt;plugin[=true|false]&gt;...]</code> Enable or disable plugins with a matching fully qualified class name. <code>true</code> <p>For more details on the global options and usage hints, see here.</p>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#general-export-options","title":"General export options","text":"Option Description Default value <code>-o</code>, <code>--output=&lt;file&gt;</code> Name of the output file. <code>--output-encoding=&lt;encoding&gt;</code> Encoding to use for the output file. <code>--fail-fast</code> Fail fast on errors. <code>--temp-dir=&lt;dir&gt;</code> Store temporary files in this directory. <code>--threads=&lt;threads&gt;</code> Number of threads to use for parallel processing. <code>--crs=&lt;crs&gt;</code> SRID or identifier of the CRS to use for the coordinates of geometries. 3DCityDB CRS <code>--crs-name=&lt;name&gt;</code> Name of the CRS to use in the output file. <code>--transform=&lt;m0,m1,...,m11|swap-xy&gt;</code> Transform coordinates using a 3x4 matrix in row-major order. Use <code>swap-xy</code> as a shortcut.","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#query-and-filter-options","title":"Query and filter options","text":"Option Description Default value <code>-t</code>, <code>--type-name=&lt;[prefix:]name&gt;[,&lt;[prefix:]name&gt;...]</code> Names of the features to process. <code>-f</code>, <code>--filter=&lt;cql2-text&gt;</code> Filter to apply when retrieving features. Use the extended CQL2 filtering language of the 3DCityDB. <code>--filter-crs=&lt;crs&gt;</code> SRID or identifier of the CRS to use for geometries in the filter expression. 3DCityDB CRS <code>--sql-filter=&lt;sql&gt;</code> SQL query expression to use as filter. <code>-s</code>, <code>--sort-by=&lt;property[+|-]&gt;[,&lt;property[+|-]&gt;...]</code> Properties and sort orders for sorting features. <code>--limit=&lt;count&gt;</code> Maximum number of features to process. <code>--start-index=&lt;index&gt;</code> Index within the input set from which features are processed. <code>-l</code>, <code>--lod=&lt;lod&gt;[,&lt;lod&gt;...]</code> Export geometries with a matching LoD. <code>--lod-mode=&lt;mode&gt;</code> LoD filter mode: <code>or</code>, <code>and</code>, <code>minimum</code>, <code>maximum</code>. <code>or</code> <code>--lod-search-depth=&lt;0..n|all&gt;</code> Levels of sub-features to search for matching LoDs 0 <code>--no-appearances</code> Do not process appearances. <code>-a</code>, <code>--appearance-theme=&lt;theme&gt;[,&lt;theme&gt;...]</code> Process appearances with a matching theme. Use <code>none</code> for the null theme.","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#time-based-feature-history-options","title":"Time-based feature history options","text":"Option Description Default value <code>-M</code>, <code>--validity=&lt;mode&gt;</code> Process features by validity: <code>valid</code>, <code>invalid</code>, <code>all</code>. <code>valid</code> <code>-T</code>, <code>--validity-at=&lt;time&gt;</code> Check validity at a specific point in time. If provided, the time must be in <code>&lt;YYYY-MM-DD&gt;</code> or <code>&lt;YYYY-MM-DDThh:mm:ss[(+|-)hh:mm]&gt;</code> format. <code>--validity-reference=&lt;source&gt;</code> Validity time reference: <code>database</code>, <code>real_world</code> <code>database</code> <code>--lenient-validity</code> Ignore incomplete validity intervals of features.","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#tiling-options","title":"Tiling options","text":"Option Description Default value <code>--tile-matrix=&lt;columns,rows&gt;</code> Export tiles in a columns x rows grid. <code>--tile-dimension=&lt;width[unit],height[unit]&gt;</code> Export tiles with specified width and height, aligned with the database CRS grid (default length unit of the CRS assumed). <code>--tile-extent=&lt;x_min,y_min,x_max,y_max[,srid]&gt;</code> Extent to use for tiling. auto-computed <code>--tile-origin=&lt;origin&gt;</code> Tile indexes origin: <code>top_left</code>, <code>bottom_left</code>. <code>top_left</code>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#commands","title":"Commands","text":"Command Description <code>help</code> Display help information about the specified command. <code>citygml</code> Export data in CityGML format. <code>cityjson</code> Export data in CityJSON format. <p>Note</p> <p>Additional subcommands to support more formats may be added in future versions. You can also implement your own plugin to add support for a specific format. Contributions are welcome.</p>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#usage","title":"Usage","text":"","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#specifying-the-output-file","title":"Specifying the output file","text":"<p>The output file for the export is specified using the <code>--output</code> option. Ensure the file extension matches the target format. The export command also supports GZIP compression and ZIP archiving. To enable these, use the corresponding file extensions listed below:</p> File type File extensions Regular file depends on target format GZIP compressed file <code>.gz</code>, <code>.gzip</code> ZIP archive <code>.zip</code> <p>Use the <code>--output-encoding</code> option to specify a particular encoding for the output file by providing the IANA-based encoding name (e.g., <code>UTF-8</code>).</p> <p>If the export includes texture files, a subfolder named <code>appearance</code> will be created relative to the output file, where all textures will be stored. Likewise, a subfolder named <code>library-objects</code> will be created to store library objects used by implicit geometries. When exporting as a ZIP archive, these folders are included within the archive.</p>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#querying-and-filtering","title":"Querying and filtering","text":"<p>citydb-tool allows exporting all features stored in a 3DCityDB <code>v5</code> instance with a single command. However, in most cases, only a specific subset of features is needed. The <code>export</code> command provides various querying and filtering options to control which features are included in the export.</p>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#feature-type-filter","title":"Feature type filter","text":"<p>The <code>--type-name</code> option specifies one or more feature types to export. For each feature type, provide its type name as defined in the <code>OBJECTCLASS</code> table of the 3DCityDB <code>v5</code>. To avoid ambiguity, you can use the namespace alias from the <code>NAMESPACE</code> table as a prefix in the format <code>prefix:name</code>. Only features matching the specified type will be exported.</p>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#cql2-based-filtering","title":"CQL2-based filtering","text":"<p>citydb-tool supports the OGC Common Query Language (CQL2) as the default language for filtering features from the 3DCityDB <code>v5</code>. CQL2 enables both attribute-based and spatial filtering, offering advanced comparison operators, spatial functions, and logical operators. Only features that meet the specified filter criteria will be exported.</p> <p>CQL2 filter expressions are passed to the <code>export</code> command using the <code>--filter</code> option. Be sure to enclose them in quotes if needed. When applying spatial filters, the filter geometries are assumed to be in the same CRS as the 3DCityDB instance. To specify a different CRS, use the <code>--filter-crs</code> option and provide the SRID (e.g., <code>4326</code> for WGS84).</p> <p>Tip</p> <p>For more details on using CQL2 with the 3DCityDB <code>v5</code>, refer to the CQL2 documentation.</p> <p>The example below demonstrates how to export buildings based on their <code>height</code> property.</p> LinuxWindows CMD <pre><code>./citydb export citygml [...] -o my-city.gml \\\n    --type-name=bldg:Building \\\n    --filter=\"con:height &gt; 15\"\n</code></pre> <pre><code>citydb export citygml [...] -o my-city.gml ^\n    --type-name=bldg:Building ^\n    --filter=\"con:height &gt; 15\"\n</code></pre> <p>To apply a bounding box filter to the <code>envelope</code> property of features, you can use the following CQL2 filter expression.</p> LinuxWindows CMD <pre><code>./citydb export citygml [...] -o my-city.gml \\\n    --filter=\"s_intersects(core:envelope, bbox(13.369,52.506,13.405,52.520))\" \\\n    --filter-crs=4326\n</code></pre> <pre><code>citydb export citygml [...] -o my-city.gml ^\n    --filter=\"s_intersects(core:envelope, bbox(13.369,52.506,13.405,52.520))\" ^\n    --filter-crs=4326\n</code></pre>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#sql-based-filtering","title":"SQL-based filtering","text":"<p>The <code>--sql-filter</code> option allows the use of SQL <code>SELECT</code> statements as filter expressions, providing access to all details of the relational schema. Any <code>SELECT</code> statement supported by the underlying database system is permitted, as long as it returns only a list of <code>id</code> values from the FEATURE table. Only features included in the returned list will be considered for export.</p> <p>Below is a simple example of filtering features based on their identifier in the <code>objectid</code> column of the <code>FEATURE</code> table. The <code>SELECT</code> statement must be enclosed in quotes, and special characters may need to be escaped.</p> LinuxWindows CMD <pre><code>./citydb export citygml [...] -o my-city.gml \\\n    --sql-filter=\"SELECT id FROM feature WHERE objectid IN ('ABC', 'DEF')\"\n</code></pre> <pre><code>citydb export citygml [...] -o my-city.gml ^\n    --sql-filter=\"SELECT id FROM feature WHERE objectid IN ('ABC', 'DEF')\"\n</code></pre>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#count-filter","title":"Count filter","text":"<p>The <code>--limit</code> option sets the maximum number of features to export. The <code>--start-index</code> option defines the <code>0</code>-based index of the first feature within the result set to export. These options can be used separately or together to control the total number of features exported.</p>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#lod-filter","title":"LoD filter","text":"<p>The <code>export</code> command allows filtering geometries by Level-of-Detail (LoD) using the <code>--lod</code> option. You can specify one or more LoD values as a comma-separated list. LoD values typically range from <code>[0..3]</code> or <code>[0..4]</code>, depending on the CityGML version, but any string value is allowed.</p> <ul> <li>If a single LoD is provided, only geometries with that LoD will be included in the export. Features without a   spatial representation for the requested LoD are not exported.</li> <li>If multiple LoDs are specified, only geometries with a matching LoD are retained, and the filtering behavior   is controlled by the <code>--lod-mode</code> option:<ul> <li><code>or</code>: Features with at least one matching LoD are exported. This is the default mode.</li> <li><code>and</code>: Only features with a spatial representation in all requested LoDs are exported.</li> <li><code>minimum</code>: Similar to <code>or</code>, but only the geometry with the lowest LoD is exported.</li> <li><code>maximum</code>: Similar to <code>or</code>, but only the geometry with the highest LoD is exported.</li> </ul> </li> </ul> <p>Tip</p> <p>The <code>--lod-search-depth</code> option defines the number of subfeature levels to search for a matching LoD. With the default value <code>0</code>, only the feature and its space boundaries are considered. The LoD filter is satisfied if at least one subfeature has a matching LoD representation.</p> <p>The following command exports features represented in LoD2 or LoD3, retaining only their highest LoD.</p> LinuxWindows CMD <pre><code>./citydb export citygml [...] -o my-city.gml \\\n    --lod=2,3 \\\n    --lod-mode=maximum\n</code></pre> <pre><code>citydb export citygml [...] -o my-city.gml ^\n    --lod=2,3 ^\n    --lod-mode=maximum\n</code></pre>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#appearance-filter","title":"Appearance filter","text":"<p>The <code>--appearance-theme</code> option filters appearances based on their <code>&lt;theme&gt;</code>. You can specify one or more themes as a comma-separated list. To filter appearances that have no theme property, use <code>none</code> as the value. Only appearances associated with the specified themes will be exported. To exclude all appearances from the export, use the <code>--no-appearances</code> option.</p>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#sorting-features-by-property","title":"Sorting features by property","text":"<p>Along with filtering, the query options of the <code>export</code> command also allow sorting features by one or more properties, which can be specified using the <code>--sort-by</code> option. Sorting by subfeature attributes is supported as well, by referencing the attribute with the same JSON path notation used in CQL2 expressions (see here). Appending a <code>+</code> or <code>-</code> sign to the property name defines the sort order: <code>+</code> for ascending (default), and <code>-</code> for descending.</p> <p>The example below exports buildings, sorting them first by <code>height</code> in ascending order, and then by <code>objectId</code> in descending order.</p> LinuxWindows CMD <pre><code>./citydb export citygml [...] -o my-city.gml \\\n    --type-name=bldg:Building \\\n    --sort-by=con:height,core:objectId-\n</code></pre> <pre><code>citydb export citygml [...] -o my-city.gml ^\n    --type-name=bldg:Building ^\n    --sort-by=con:height,core:objectId-\n</code></pre> <p>Note</p> <ul> <li>When using multiple filters, all conditions must be satisfied for a feature to be exported.</li> <li>Configuration and argument files are an excellent way   to store complex filter expressions and easily reuse them.</li> <li>When the <code>trace</code> log level is enabled, the final SQL <code>SELECT</code> statement generated from your query and filter options,   which is used to query the 3DCityDB, will be printed to the console.</li> </ul>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#exporting-historical-versions","title":"Exporting historical versions","text":"<p>The bi-temporal intervals <code>[creation_date, termination_date)</code> and <code>[valid_from, valid_to)</code> enable feature histories in the 3DCityDB <code>v5</code> (see here). The first interval defines the feature's lifespan in the database, indicating when it was inserted and terminated, while the second interval represents the feature\u2019s real-world lifespan.</p> <p>A feature's validity depends on whether its time interval is bounded or unbounded:</p> <ul> <li>Unbounded (no end point): The feature is currently valid.</li> <li>Bounded: The feature was valid during the specified interval but is no longer valid.</li> </ul> <p>The <code>--validity</code> option controls which features are exported based on their validity:</p> <ul> <li><code>valid</code>: Exports only features that are currently valid. This is the default mode.</li> <li><code>invalid</code>: Exports only historical features that are no longer valid.</li> <li><code>all</code>: Exports all features, regardless of their validity.</li> </ul> <p>The <code>--validity-reference</code> option specifies whether validity is determined based on database time (<code>database</code>, default) or real-world time (<code>real_world</code>).</p> <p>Additionally, the <code>--validity-at</code> option allows you to check the validity of features at a specific point in time in the past. You can provide this time as either a date (<code>&lt;YYYY-MM-DD&gt;</code>) or a date-time with an optional UTC offset (<code>&lt;YYYY-MM-DDThh:mm:ss[(+|-)hh:mm]&gt;</code>). Only features that were either <code>valid</code> or <code>invalid</code> at the specified time will be exported.</p> <p>The example below demonstrates how to export a historical version of your city model that was valid on 2018-07-01:</p> LinuxWindows CMD <pre><code>./citydb export citygml [...] -o my-city.gml \\\n    --validity=valid \\\n    --validity-at=2018-07-01 \\\n    --validity-referene=database\n</code></pre> <pre><code>citydb export citygml [...] -o my-city.gml ^\n    --validity=valid ^\n    --validity-at=2018-07-01 ^\n    --validity-referene=database\n</code></pre> <p>Note</p> <ul> <li>Exporting historical versions requires that these versions remain in the database.</li> <li>Database time is managed automatically: The <code>creation_date</code> is set during import, while the <code>termination_date</code> is   assigned when terminating features using the <code>delete</code> command.</li> <li>Validity checks are strict by default. Use <code>--lenient-validity</code> to treat time intervals as valid, even if their start   point is undefined.</li> </ul>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#reprojecting-geometries","title":"Reprojecting geometries","text":"<p>The <code>export</code> command allows geometries to be reprojected to a different Coordinate Reference System (CRS) during export. This is useful when the 3DCityDB <code>v5</code> instance is in one CRS, but the exported data needs to be in another. The reprojection is carried out using spatial functions of the underlying database system.</p> <p>To specify a different CRS for the export, use the <code>--crs</code> option followed by either the database SRID of the target CRS or its identifier. citydb-tool supports both OGC-compliant names, such as <code>http://www.opengis.net/def/crs/EPSG/0/4326</code>, and simpler formats like <code>EPSG:4326</code>. </p> <p>Using the <code>--crs-name</code> option, you can specify the name or identifier of the target CRS to be included in the output file, for example, as the value of the <code>srsName</code> attribute in CityGML files.</p> LinuxWindows CMD <pre><code>./citydb export citygml [...] -o my-city.gml \\\n    --crs=25833 \\\n    --crs-name=urn:ogc:def:crs,crs:EPSG::25833,crs:EPSG::7837\n</code></pre> <pre><code>citydb export citygml [...] -o my-city.gml ^\n    --crs=25833 ^\n    --crs-name=urn:ogc:def:crs,crs:EPSG::25833,crs:EPSG::7837\n</code></pre>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#transforming-geometries","title":"Transforming geometries","text":"<p>The <code>--transform</code> option applies an affine transformation to geometries using a 3x4 transformation matrix before they are exported to the output file. The matrix operates on homogeneous coordinates to compute the transformed coordinates \\((x', y', z')\\):</p> \\[ \\begin{pmatrix} x' \\\\ y' \\\\ z' \\end{pmatrix} = \\begin{pmatrix} m_0 &amp; m_1 &amp; m_2 &amp; m_3 \\\\ m_4 &amp; m_5 &amp; m_6 &amp; m_7 \\\\ m_8 &amp; m_9 &amp; m_{10} &amp; m_{11} \\end{pmatrix} \\cdot \\begin{pmatrix} x \\\\ y \\\\ z \\\\ 1 \\end{pmatrix} \\] <p>The <code>--transform</code> option expects a comma-separated list of 12 matrix coefficients in row-major order, from \\(m_0\\) to \\(m_{11}\\):</p> <pre><code>--transform=m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11\n</code></pre> <p>A common use case is swapping the \\(x\\) and \\(y\\) coordinates while keeping \\(z\\) unchanged. You can use <code>swap_xy</code> as shorthand for this transformation, as shown below.</p> LinuxWindows CMD <pre><code>./citydb export citygml [...] -o my-city.gml \\\n    --transform=swap_xy\n</code></pre> <pre><code>citydb export citygml [...] -o my-city.gml ^\n    --transform=swap_xy\n</code></pre> <p>Note</p> <p>Ensure that the transformed coordinates remain consistent with the CRS used for the export.</p>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#tiled-exports","title":"Tiled exports","text":"<p>Instead of exporting city model data from the 3DCityDB <code>v5</code> into a single, potentially large dataset, citydb-tool supports exporting into multiple files or tiles based on regular spatial grids. Breaking large exports into smaller chunks makes the data easier to process, transfer, and visualize.</p>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#defining-the-tiling-extent","title":"Defining the tiling extent","text":"<p>To perform tiled exports, you must specify the tiling extent, which can be defined in two ways:</p> <ul> <li>Auto-computed: The extent is automatically calculated  as the bounding box encompassing the features to be   exported. This is the default method.</li> <li>Manually defined: Use the <code>--tile-extent</code> option to specify a 2D bounding box with four coordinates for the   lower-left and upper-right corners. By default, the coordinates are assumed to be in the same CRS as the 3DCityDB   instance, but you can specify a database SRID (e.g., 4326 for WGS84) as a fifth value. All values should be separated   by commas.</li> </ul>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#defining-the-tile-grid","title":"Defining the tile grid","text":"<p>The tiling extent is divided into a grid using one of two schemes:</p> <ul> <li><code>--tile-matrix</code>: Specifies the number of <code>columns</code> and <code>rows</code> in the grid, evenly dividing the extent into tiles.   A higher grid count results in smaller tiles.</li> <li><code>--tile-dimension</code>: Defines a fixed <code>width</code> and <code>height</code> for each tile. Tiles are aligned with the database CRS grid   and chosen to fully cover the extent, which may cause them to exceed it. You can specify units separately for <code>width</code>   and <code>height</code>; if omitted, the database CRS unit is used.</li> </ul> <p>Each tile is identified by its column and row indexes, with the column index increasing horizontally. By default, the origin <code>(0,0)</code> is in the top-left corner, but you can change it to the bottom-left corner using the <code>--tile-origin</code> option.</p> <p>Note</p> <p>citydb-tool ensures that each feature is assigned to only one tile. If a feature cannot be assigned to a tile when the tiling extent is manually defined, it will be excluded from the export.</p>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#organizing-tiled-exports","title":"Organizing tiled exports","text":"<p>When exporting tiled data, you can use placeholders in the output path and filename to structure and organize the exported files efficiently. The following tile-specific tokens are available:</p> Token Description <code>@column@</code> Column index of the tile. <code>@row@</code> Row index of the tile. <code>@x_min@</code> X-coordinate of the lower-left corner of the tile extent. <code>@y_min@</code> Y-coordinate of the lower-left corner of the tile extent. <code>@x_max@</code> X-coordinate of the upper-right corner of the tile extent. <code>@y_max@</code> Y-coordinate of the upper-right corner of the tile extent. <p>For example, setting the output file as follows:</p> <pre><code>--output=tiles/@column@/tile_@row@.gml\n</code></pre> <p>Will generate files like:</p> <pre><code>tiles/0/tile_0.gml\ntiles/0/tile_1.gml\ntiles/1/tile_0.gml\n...\n</code></pre> <p>Note</p> <ul> <li>If you do not include tokens in your output file, citydb-tool will automatically append the suffix <code>_@column@_@row@</code> to your filename.</li> <li>Ensure that your token-based pattern does not result in file overwrites.</li> </ul>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#formatting-tokens","title":"Formatting tokens","text":"<p>In addition, you can define a format string for each token to control the formatting of values, such as limiting the number of decimal places for the tile extent coordinates. To specify a format string, include it after the token name, separated by a comma. For example, <code>@x_min,%.2f@</code> will format the <code>x_min</code> value with two decimal places.</p> <p>The format string syntax follows Java language conventions. Some common examples include:</p> <ul> <li><code>%s</code>: Formats the value as a string (default format).</li> <li><code>%d</code>: Formats the value as a decimal integer.</li> <li><code>%f</code>: Formats the value as a decimal number.</li> <li><code>%.2f</code>: Formats the value as a decimal number with two decimal places.</li> <li><code>%4.4s</code>: Formats the value as a string, but only prints exactly four characters.</li> </ul>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#tiled-export-example","title":"Tiled export example","text":"<p>The following command exports all roads from the 3DCityDB, organizing them into 2x2 km tiles. The tiling extent is auto-computed. Tiles align with the database CRS grid and are chosen to cover the tiling extent.  Tokens with formatting are used in the output path to control the output structure.</p> LinuxWindows CMD <pre><code>./citydb export citygml [...] -o tiles/tile_@x_min,%3.3s@_@y_min,%4.4s@.gml \\\n    --type-name=tran:Road \\\n    --tile-dimension=2km,2km\n</code></pre> <pre><code>citydb export citygml [...] -o tiles\\tile_@x_min,%3.3s@_@y_min,%4.4s@.gml ^\n    --type-name=tran:Road ^\n    --tile-dimension=2km,2km\n</code></pre> <p>In this example, the length unit <code>km</code> is explicitly provided. If omitted, the default unit of the database CRS is used. For example, if the CRS uses meters, a 2x2 km tiling should be defined as follows:</p> <pre><code>--tile-dimension=2000,2000\n</code></pre> <p>Tip</p> <p>If unexpected tile sizes appear, check the unit of your database CRS to ensure it matches the intended scale.</p>","tags":["citydb-tool","export"]},{"location":"citydb-tool/export/#controlling-the-export-process","title":"Controlling the export process","text":"<p>The <code>export</code> command offers the following options to control the export process:</p> <ul> <li><code>--fail-fast</code>: Terminates the process immediately upon encountering an error. By default, the export continues despite   errors with individual features.</li> <li><code>--temp-dir</code>: Specifies the directory for storing temporary files during export. For optimal performance, choose   a fast storage medium not used for writing the output files.</li> <li><code>--threads</code>: Sets the number of threads for parallel processing to improve performance. By default, it   equals the number of processors available to the JVM, or at least two.</li> </ul> <p>Note</p> <p>Setting the number of threads too high can lead to performance issues due to thrashing. Additionally, each thread requires a separate database connection, so ensure your database can handle the required number of connections.</p>","tags":["citydb-tool","export"]},{"location":"citydb-tool/import-citygml/","title":"Import CityGML command","text":"<p>The <code>import citygml</code> command imports one or more CityGML files into the 3DCityDB <code>v5</code>.</p>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#synopsis","title":"Synopsis","text":"<pre><code>citydb import citygml [OPTIONS] &lt;file&gt;...\n</code></pre>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#options","title":"Options","text":"<p>The <code>import citygml</code> command inherits global options from the main <code>citydb</code> command and general import, metadata, and filter options from its parent <code>import</code> command. Additionally, it provides CityGML format-specific import options.</p>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#global-options","title":"Global options","text":"Option Description Default value <code>[@&lt;filename&gt;...]</code> One or more argument files containing options. <code>-h</code>, <code>--help</code> Show a help message and exit. <code>-V</code>, <code>--version</code> Print version information and exit. <code>--config-file=&lt;file&gt;</code> Load configuration from this file. <code>-L</code>, <code>--log-level=&lt;level&gt;</code> Log level: <code>fatal</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code>, <code>trace</code>. <code>info</code> <code>--log-file=&lt;file&gt;</code> Write log messages to this file. <code>--pid-file=&lt;file&gt;</code> Create a file containing the process ID. <code>--plugins=&lt;dir&gt;</code> Load plugins from this directory. <code>--use-plugin=&lt;plugin[=true|false]&gt;[,&lt;plugin[=true|false]&gt;...]</code> Enable or disable plugins with a matching fully qualified class name. <code>true</code> <p>For more details on the global options and usage hints, see here.</p>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#general-import-options","title":"General import options","text":"Option Description Default value <code>&lt;file&gt;...</code> One or more files and directories to process (glob patterns allowed). <code>--input-encoding=&lt;encoding&gt;</code> Encoding of input file(s). <code>--fail-fast</code> Fail fast on errors. <code>--temp-dir=&lt;dir&gt;</code> Store temporary files in this directory. <code>-m</code>, <code>--import-mode=&lt;mode&gt;</code> Import mode: <code>import_all</code>, <code>skip</code>, <code>delete</code>, <code>terminate</code>. <code>import_all</code> <code>--threads=&lt;threads&gt;</code> Number of threads to use for parallel processing. <code>--preview</code> Run in preview mode. Features will not be imported. <code>--index-mode=&lt;mode&gt;</code> Index mode: <code>keep</code>, <code>drop</code>, <code>drop_create</code>. Consider dropping indexes when processing large quantities of data. <code>keep</code> <code>--compute-extent</code> Compute and overwrite extents of features. <code>--transform=&lt;m0,m1,...,m11|swap-xy&gt;</code> Transform coordinates using a 3x4 matrix in row-major order. Use <code>swap-xy</code> as a shortcut. <p>For more details on the general import options and usage hints, see here.</p>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#citygml-import-options","title":"CityGML import options","text":"Option Description Default value <code>--import-xal-source</code> Import XML snippets of xAL address elements. <code>-x</code>, <code>--xsl-transform=&lt;stylesheet&gt;[,&lt;stylesheet&gt;...]</code> Apply XSLT stylesheets to transform input. <code>--no-appearances</code> Do not process appearances. <code>-a</code>, <code>--appearance-theme=&lt;theme&gt;[,&lt;theme&gt;...]</code> Process appearances with a matching theme. Use <code>none</code> for the null theme.","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#metadata-options","title":"Metadata options","text":"Option Description Default value <code>--lineage=&lt;lineage&gt;</code> Lineage to use for the features. <code>--updating-person=&lt;name&gt;</code> Name of the user responsible for the import. database user <code>--reason-for-update=&lt;reason&gt;</code> Reason for importing the data. <p>For more details on the metadata options and usage hints, see here.</p>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#upgrade-options-for-citygml-20-and-10","title":"Upgrade options for CityGML 2.0 and 1.0","text":"Option Description Default value <code>--use-lod4-as-lod3</code> Use LoD4 as LoD3, replacing an existing LoD3. <code>--map-lod0-roof-edge</code> Map LoD0 roof edges onto roof surfaces. <code>--map-lod1-surface</code> Map LoD1 multi-surfaces onto generic thematic surfaces.","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#filter-options","title":"Filter options","text":"Option Description Default value <code>-t</code>, <code>--type-name=&lt;[prefix:]name&gt;[,&lt;[prefix:]name&gt;...]</code> Names of the features to process. <code>-i</code>, <code>--id=&lt;id&gt;[,&lt;id&gt;...]</code> Identifiers of the features to process. <code>-b</code>, <code>--bbox=&lt;x_min,y_min,x_max,y_max[,srid]&gt;</code> Bounding box to use as spatial filter. <code>--bbox-mode=&lt;mode&gt;</code> Bounding box mode: <code>intersects</code>, <code>contains</code>, <code>on_tile</code>. <code>intersects</code> <code>--limit=&lt;count&gt;</code> Maximum number of features to process. <code>--start-index=&lt;index&gt;</code> Index within the input set from which features are processed. <p>For more details on the filter options and usage hints, see here.</p>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#database-connection-options","title":"Database connection options","text":"Option Description Default value <code>-H</code>, <code>--db-host=&lt;host&gt;</code> Name of the host on which the 3DCityDB is running. <code>-P</code>, <code>--db-port=&lt;port&gt;</code> Port of the 3DCityDB server. 5432 <code>-d</code>, <code>--db-name=&lt;database&gt;</code> Name of the 3DCityDB database to connect to. <code>-S</code>, <code>--db-schema=&lt;schema&gt;</code> Schema to use when connecting to the 3DCityDB. <code>citydb</code> or username <code>-u</code>, <code>--db-username=&lt;user&gt;</code> Username to use when connecting to the 3DCityDB. <code>-p</code>, <code>--db-password[=&lt;password&gt;]</code> Password to use when connecting to the 3DCityDB. Leave empty to be prompted. <code>--db-property=&lt;property=value&gt;[,&lt;property=value&gt;...]</code> Database-specific connection properties. <p>For more details on the database connection options and usage hints, see here.</p>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#usage","title":"Usage","text":"<p>Tip</p> <p>For general usage hints applicable to all subcommands of the <code>import</code> command (including but not limited to <code>import citygml</code>), refer to the documentation for the <code>import</code> command here.</p>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#supported-citygml-versions","title":"Supported CityGML versions","text":"<p>The <code>import citygml</code> command supports importing CityGML files in versions 3.0, 2.0, and 1.0. It recognizes the following file types and extensions:</p> File type File extensions CityGML file <code>.gml</code>, <code>.xml</code> GZIP compressed file <code>.gz</code>, <code>.gzip</code> ZIP archive <code>.zip</code> <p>The file extensions are used when a directory or ZIP archive is provided as <code>&lt;file&gt;</code> input instead of a single file. In such cases, the directory or archive is recursively scanned for input files, which are identified using the extensions listed above and then processed for import.</p>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#upgrading-citygml-20-and-10","title":"Upgrading CityGML 2.0 and 1.0","text":"<p>CityGML data can be exported from the 3DCityDB <code>v5</code> in the same version as it was imported, without loss. However, switching CityGML versions between import and export may result in data loss, as CityGML 3.0 is not fully backward compatible with versions 2.0 and 1.0. While citydb-tool applies automatic conversions where possible, certain scenarios require user input.</p> <p>If CityGML 3.0 is the primary format for your 3DCityDB <code>v5</code> instance, the following upgrade options are available to resolve compatibility issues when importing CityGML 2.0 or 1.0 files:</p> <ul> <li><code>--use-lod4-as-lod3</code>: Converts LoD4 geometries to LoD3, replacing any existing LoD3.</li> <li><code>--map-lod0-roof-edge</code>: Converts LoD0 roof edge geometries into roof surface features.</li> <li><code>--map-lod1-surface</code>: Converts LoD1 multi-surfaces into generic thematic surface features.</li> </ul> <p>Note</p> <p>The upgrade options are not required if you only manage CityGML 2.0 and 1.0 data in your 3DCityDB <code>v5</code>. However, be cautious when importing CityGML 3.0 in this setup, as citydb-tool does not offer downgrade options. Any CityGML 3.0 content that cannot be automatically downgraded when exporting to CityGML 2.0 or 1.0 will be skipped. For more details, refer to the compatibility and data migration guide.</p>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#filtering-citygml-features","title":"Filtering CityGML features","text":"<p>The <code>import citygml</code> command inherits filtering options from the parent <code>import</code> command. In the context of CityGML input files, the filters operate as follows:</p> Filter Description Feature identifier filter Applies to the <code>gml:id</code> property of input features. Bounding box filter Applies to the <code>gml:boundedBy</code> property of input features. <p>Note</p> <p>Filters are applied to the top-level <code>&lt;cityObjectMember&gt;</code> elements in the input file. Matching features are imported, including all their subfeatures. Filtering subfeatures is not supported.</p>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#filtering-appearances","title":"Filtering appearances","text":"<p>By default, the <code>import citygml</code> command imports all appearance information from the input files. The <code>--appearance-theme</code> option restricts the import of appearances based on their <code>&lt;theme&gt;</code> property. You can specify one or more themes as a comma-separated list. To filter appearances that have no theme property, use <code>none</code> as the value.</p> <p>Only appearances associated with the specified themes will be imported. To exclude all appearances from the import, use the <code>--no-appearances</code> option.</p>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#applying-xsl-transformations","title":"Applying XSL transformations","text":"<p>XSLT stylesheets enable the on-the-fly transformation of CityGML input data before it is imported into the database. This allows you to modify or restructure the data to meet specific needs, such as changing values, filtering attributes, or removing and replacing entire GML/XML structures.</p> <p>The <code>--xsl-transform</code> option specifies one or more XSLT stylesheets to be applied to the input files. Each stylesheet must be referenced by its filename and path, which can be either absolute or relative to the current directory. Multiple XSLT stylesheets can be listed, separated by commas, to facilitate a multi-step transformation process. In this case, the stylesheets are executed in the specified order, with the output of one stylesheet serving as the input for the next.</p> LinuxWindows CMD <pre><code>./citydb import citygml [...] my-city.gml \\\n    --xsl-transform=my-first-stylesheet.xsl,my-second-stylesheet.xsl\n</code></pre> <pre><code>citydb import citygml [...] my-city.gml ^\n    --xsl-transform=my-first-stylesheet.xsl,my-second-stylesheet.xsl\n</code></pre> <p>Note</p> <ul> <li>To handle large input files, citydb-tool chunks each CityGML file into top-level features, which are then imported   into the database. As a result, each XSLT stylesheet operates on individual top-level features, not the entire file.   Keep this in mind when developing your XSLT.</li> <li>The output of each XSLT stylesheet must be valid CityGML.</li> </ul>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-citygml/#storing-xal-address-elements","title":"Storing xAL address elements","text":"<p>CityGML uses the OASIS Extensible Address Language (xAL) standard to encode address data. During import, citydb-tool parses the xAL content and maps it to the separate columns of the <code>ADDRESS</code> table, which provides a comprehensive and flexible structure for storing address data. However, if the original xAL address element is too complex to be fully mapped to the <code>ADDRESS</code> table columns, the <code>--import-xal-source</code> option allows importing and retaining the original xAL element. For more details, see here.</p>","tags":["citydb-tool","CityGML","import"]},{"location":"citydb-tool/import-cityjson/","title":"Import CityJSON command","text":"<p>The <code>import cityjson</code> command imports one or more CityJSON files into the 3DCityDB <code>v5</code>.</p>","tags":["citydb-tool","CityJSON","import"]},{"location":"citydb-tool/import-cityjson/#synopsis","title":"Synopsis","text":"<pre><code>citydb import cityjson [OPTIONS] &lt;file&gt;...\n</code></pre>","tags":["citydb-tool","CityJSON","import"]},{"location":"citydb-tool/import-cityjson/#options","title":"Options","text":"<p>The <code>import cityjson</code> command inherits global options from the main <code>citydb</code> command and general import, metadata, and filter options from its parent <code>import</code> command. Additionally, it provides CityJSON format-specific import options.</p>","tags":["citydb-tool","CityJSON","import"]},{"location":"citydb-tool/import-cityjson/#global-options","title":"Global options","text":"Option Description Default value <code>[@&lt;filename&gt;...]</code> One or more argument files containing options. <code>-h</code>, <code>--help</code> Show a help message and exit. <code>-V</code>, <code>--version</code> Print version information and exit. <code>--config-file=&lt;file&gt;</code> Load configuration from this file. <code>-L</code>, <code>--log-level=&lt;level&gt;</code> Log level: <code>fatal</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code>, <code>trace</code>. <code>info</code> <code>--log-file=&lt;file&gt;</code> Write log messages to this file. <code>--pid-file=&lt;file&gt;</code> Create a file containing the process ID. <code>--plugins=&lt;dir&gt;</code> Load plugins from this directory. <code>--use-plugin=&lt;plugin[=true|false]&gt;[,&lt;plugin[=true|false]&gt;...]</code> Enable or disable plugins with a matching fully qualified class name. <code>true</code> <p>For more details on the global options and usage hints, see here.</p>","tags":["citydb-tool","CityJSON","import"]},{"location":"citydb-tool/import-cityjson/#general-import-options","title":"General import options","text":"Option Description Default value <code>&lt;file&gt;...</code> One or more files and directories to process (glob patterns allowed). <code>--input-encoding=&lt;encoding&gt;</code> Encoding of input file(s). <code>--fail-fast</code> Fail fast on errors. <code>--temp-dir=&lt;dir&gt;</code> Store temporary files in this directory. <code>-m</code>, <code>--import-mode=&lt;mode&gt;</code> Import mode: <code>import_all</code>, <code>skip</code>, <code>delete</code>, <code>terminate</code>. <code>import_all</code> <code>--threads=&lt;threads&gt;</code> Number of threads to use for parallel processing. <code>--preview</code> Run in preview mode. Features will not be imported. <code>--index-mode=&lt;mode&gt;</code> Index mode: <code>keep</code>, <code>drop</code>, <code>drop_create</code>. Consider dropping indexes when processing large quantities of data. <code>keep</code> <code>--compute-extent</code> Compute and overwrite extents of features. <code>--transform=&lt;m0,m1,...,m11|swap-xy&gt;</code> Transform coordinates using a 3x4 matrix in row-major order. Use <code>swap-xy</code> as a shortcut. <p>For more details on the general import options and usage hints, see here.</p>","tags":["citydb-tool","CityJSON","import"]},{"location":"citydb-tool/import-cityjson/#cityjson-import-options","title":"CityJSON import options","text":"Option Description Default value <code>--[no-]map-unknown-objects</code> Map city objects from unsupported extensions onto generic city objects. <code>true</code> <code>--no-appearances</code> Do not process appearances. <code>-a</code>, <code>--appearance-theme=&lt;theme&gt;[,&lt;theme&gt;...]</code> Process appearances with a matching theme. Use <code>none</code> for the null theme.","tags":["citydb-tool","CityJSON","import"]},{"location":"citydb-tool/import-cityjson/#metadata-options","title":"Metadata options","text":"Option Description Default value <code>--lineage=&lt;lineage&gt;</code> Lineage to use for the features. <code>--updating-person=&lt;name&gt;</code> Name of the user responsible for the import. database user <code>--reason-for-update=&lt;reason&gt;</code> Reason for importing the data. <p>For more details on the metadata options and usage hints, see here.</p>","tags":["citydb-tool","CityJSON","import"]},{"location":"citydb-tool/import-cityjson/#filter-options","title":"Filter options","text":"Option Description Default value <code>-t</code>, <code>--type-name=&lt;[prefix:]name&gt;[,&lt;[prefix:]name&gt;...]</code> Names of the features to process. <code>-i</code>, <code>--id=&lt;id&gt;[,&lt;id&gt;...]</code> Identifiers of the features to process. <code>-b</code>, <code>--bbox=&lt;x_min,y_min,x_max,y_max[,srid]&gt;</code> Bounding box to use as spatial filter. <code>--bbox-mode=&lt;mode&gt;</code> Bounding box mode: <code>intersects</code>, <code>contains</code>, <code>on_tile</code>. <code>intersects</code> <code>--limit=&lt;count&gt;</code> Maximum number of features to process. <code>--start-index=&lt;index&gt;</code> Index within the input set from which features are processed. <p>For more details on the filter options and usage hints, see here.</p>","tags":["citydb-tool","CityJSON","import"]},{"location":"citydb-tool/import-cityjson/#database-connection-options","title":"Database connection options","text":"Option Description Default value <code>-H</code>, <code>--db-host=&lt;host&gt;</code> Name of the host on which the 3DCityDB is running. <code>-P</code>, <code>--db-port=&lt;port&gt;</code> Port of the 3DCityDB server. 5432 <code>-d</code>, <code>--db-name=&lt;database&gt;</code> Name of the 3DCityDB database to connect to. <code>-S</code>, <code>--db-schema=&lt;schema&gt;</code> Schema to use when connecting to the 3DCityDB. <code>citydb</code> or username <code>-u</code>, <code>--db-username=&lt;user&gt;</code> Username to use when connecting to the 3DCityDB. <code>-p</code>, <code>--db-password[=&lt;password&gt;]</code> Password to use when connecting to the 3DCityDB. Leave empty to be prompted. <code>--db-property=&lt;property=value&gt;[,&lt;property=value&gt;...]</code> Database-specific connection properties. <p>For more details on the database connection options and usage hints, see here.</p>","tags":["citydb-tool","CityJSON","import"]},{"location":"citydb-tool/import-cityjson/#usage","title":"Usage","text":"<p>Tip</p> <p>For general usage hints applicable to all subcommands of the <code>import</code> command (including but not limited to <code>import cityjson</code>), refer to the documentation for the <code>import</code> command here.</p>","tags":["citydb-tool","CityJSON","import"]},{"location":"citydb-tool/import-cityjson/#supported-cityjson-versions","title":"Supported CityJSON versions","text":"<p>The <code>import cityjson</code> command supports importing CityJSON files in versions 2.0, 1.1, and 1.0. In addition to regular CityJSON files, the CityJSON Text Sequence (CityJSONSeq) format is also supported. CityJSONSeq decomposes the CityJSON dataset into its 1st-level features, which are stored as separate JSON objects on individual lines, each delimited by newlines. This format enables efficient streaming of large CityJSON data.</p> <p>The following file types and extensions are recognized by citydb-tool:</p> File type File extensions CityJSON file <code>.json</code>, <code>.jsonl</code> GZIP compressed file <code>.gz</code>, <code>.gzip</code> ZIP archive <code>.zip</code> <p>The file extensions are used when a directory or ZIP archive is provided as <code>&lt;file&gt;</code> input instead of a single file. In such cases, the directory or archive is recursively scanned for input files, which are identified using the extensions listed above and then processed for import.</p>","tags":["citydb-tool","CityJSON","import"]},{"location":"citydb-tool/import-cityjson/#filtering-cityjson-features","title":"Filtering CityJSON features","text":"<p>The <code>import cityjson</code> command inherits filtering options from the parent <code>import</code> command. In the context of CityJSON input files, the filters operate as follows:</p> Filter Description Feature identifier filter <ul><li>Regular CityJSON files: Applies to the <code>key</code> in the <code>\"CityObjects\"</code> collection.</li><li>CityJSONSeq files: Applies to the <code>\"id\"</code> property of <code>\"CityJSONFeature\"</code> objects.</li></ul> Bounding box filter Applies to the <code>\"geographicalExtent\"</code> property of input features. <p>Note</p> <p>Filters are applied to the 1st-level city objects in the input file. Matching city objects are imported, including all their 2nd-level city objects. Filtering 2nd-level city objects is not supported.</p>","tags":["citydb-tool","CityJSON","import"]},{"location":"citydb-tool/import-cityjson/#filtering-appearances","title":"Filtering appearances","text":"<p>By default, the <code>import cityjson</code> command imports all appearance information from the input files. The <code>--appearance-theme</code> option restricts the import of appearances based on their <code>\"theme\"</code> property. You can specify one or more themes as a comma-separated list. To filter appearances that have no theme property, use <code>none</code> as the value.</p> <p>Only appearances associated with the specified themes will be imported. To exclude all appearances from the import, use the <code>--no-appearances</code> option.</p>","tags":["citydb-tool","CityJSON","import"]},{"location":"citydb-tool/import-cityjson/#handling-unknown-extensions","title":"Handling unknown extensions","text":"<p>CityJSON provides a flexible extension mechanism similar to CityGML Application Domain Extensions (ADE). This mechanism allows the addition of new feature attributes and feature types not covered by the CityJSON specification. If a dataset contains extensions that are not registered in the 3DCityDB <code>v5</code>, citydb-tool handles them as follows:</p> <ul> <li>Unknown attributes are mapped to generic attributes and stored in the database.</li> <li>Unknown feature types are mapped to generic city objects in the database. This default behavior can be   suppressed using the <code>--no-map-unknown-objects</code> option, which will prevent unknown feature types from being imported.</li> </ul> <p>Tip</p> <p>To import CityJSON extensions as defined, the corresponding type definitions have to be registered in the <code>OBJECTCLASS</code> and <code>DATATYPE</code> metadata tables of the 3DCityDB <code>v5</code>. Additionally, a corresponding extension module must be loaded for citydb-tool to correctly parse and import the extensions.</p>","tags":["citydb-tool","CityJSON","import"]},{"location":"citydb-tool/import-config/","title":"Import configuration","text":"<p>The configuration settings for the <code>import</code> command are divided into <code>\"importOptions\"</code> for general import settings and <code>\"readOptions\"</code> for input file settings and format-specific options.</p> <p>Tip</p> <p>The names and purposes of the JSON properties align closely with their counterparts in the command-line options. Where applicable, the description of each JSON property links to the command-line option for more details.</p>","tags":["citydb-tool","import","config"]},{"location":"citydb-tool/import-config/#import-options","title":"Import options","text":"<p>The example below illustrates the JSON structure for the import options. </p> <pre><code>{\n  \"importOptions\": {\n    \"mode\": \"importAll\",\n    \"numberOfThreads\": 4,\n    \"batchSize\": 20,\n    \"tempDirectory\": \"/my/path/to/temp\",\n    \"affineTransform\": [0.0,1.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0],\n    \"lineage\": \"myLineage\",\n    \"updatingPerson\": \"myUpdatingUser\",\n    \"reasonForUpdate\": \"myReasonForUpdate\",\n    \"filterOptions\": {...}\n  }\n}\n</code></pre>","tags":["citydb-tool","import","config"]},{"location":"citydb-tool/import-config/#general-import-options","title":"General import options","text":"Property Description Default value <code>\"mode\"</code> Import mode: <code>importAll</code>, <code>skipExisting</code>, <code>deleteExisting</code>, <code>terminateExisting</code>. <code>importAll</code> <code>\"numberOfThreads\"</code> Number of threads to use for parallel processing. <code>\"batchSize\"</code> Number of top-level features that are committed to the database in a single transaction. A higher batch size might improve import performance but requires more memory. 20 <code>\"tempDirectory\"</code> Store temporary files in this directory. <code>\"affineTransform\"</code> Transform coordinates using a 3x4 matrix in row-major order. The matrix coefficients are represented as array. <code>\"lineage\"</code> Lineage to use for the features. <code>\"updatingPerson\"</code> Name of the user responsible for the import. database user <code>\"reasonForUpdate\"</code> Reason for importing the data.","tags":["citydb-tool","import","config"]},{"location":"citydb-tool/import-config/#filter-options","title":"Filter options","text":"<p>The <code>\"filterOptions\"</code> property is a container object for the following filtering options.</p> <pre><code>{\n  \"filterOptions\": {\n    \"featureTypes\": [ // (1)!\n      {\n        \"name\": \"bldg:Building\"\n      },\n      {\n        \"name\": \"Road\",\n        \"namespace\": \"http://3dcitydb.org/3dcitydb/building/5.0\"\n      }\n    ],\n    \"ids\": [\"foo\",\"bar\"],\n    \"bbox\": {\n      \"coordinates\": [10.0,10.0,20.0,20.0],\n      \"srs\": { // (2)!\n        \"srid\": 4326,\n        \"identifier\": \"http://www.opengis.net/def/crs/EPSG/0/4326\"\n      }\n    },\n    \"bboxMode\": \"intersects\",\n    \"countLimit\": {\n      \"limit\": 1000,\n      \"startIndex\": 20\n    }\n  }\n}\n</code></pre> <ol> <li>The <code>\"name\"</code> property is mandatory. To avoid ambiguity, use the format <code>\"prefix:name\"</code> with a namespace alias as prefix or    specify the full namespace using the <code>\"namespace\"</code> property.</li> <li>Use either <code>\"srid\"</code>, <code>\"identifier\"</code>, or both to define the target CRS.</li> </ol> Property Description Default value <code>\"featureTypes\"</code> Array of JSON objects specifying the features to process. Each object must include the <code>\"name\"</code> of the feature type. To avoid ambiguity, use the format <code>\"prefix:name\"</code> with a namespace alias as prefix or specify the full namespace using the <code>\"namespace\"</code> property. <code>\"ids\"</code> Array of identifiers defining the features to process. <code>\"bbox\"</code> Defines a 2D bounding box as a spatial filter using a <code>\"coordinates\"</code> array for the lower-left and upper-right corners. If the coordinates differ from the 3DCityDB CRS, a different <code>\"srs\"</code> can be specified with <code>\"srid\"</code> or <code>\"identifier\"</code> property. <code>\"bboxMode\"</code> Bounding box mode: <code>intersects</code>, <code>contains</code>, <code>onTile</code>. <code>intersects</code> <code>\"countLimit\"</code> The <code>\"limit\"</code> property sets the maximum number of features to import, and the <code>\"startIndex\"</code> property defines the <code>0</code>-based index of the first feature to import.","tags":["citydb-tool","import","config"]},{"location":"citydb-tool/import-config/#read-options","title":"Read options","text":"<p>The JSON structure for storing read options is shown below. Format-specific settings are provided within the <code>\"formatOptions\"</code> container object, with the input format name used as the key for the corresponding settings.</p> <p>Tip</p> <p>You only need to provide format-specific options for the file formats that match your input files.</p> <pre><code>{\n  \"readOptions\": {\n    \"failFast\": false,\n    \"numberOfThreads\": 4,\n    \"encoding\": \"UTF-8\",\n    \"tempDirectory\": \"/path/to/temp\",\n    \"computeEnvelopes\": true,\n    \"formatOptions\": {\n      \"CityGML\": {...},\n      \"CityJSON\": {...}\n    }\n  }\n}\n</code></pre>","tags":["citydb-tool","import","config"]},{"location":"citydb-tool/import-config/#general-read-options","title":"General read options","text":"Property Description Default value <code>\"failFast\"</code> Fail fast on errors. <code>false</code> <code>\"numberOfThreads\"</code> Number of threads to use for parallel processing. <code>\"encoding\"</code> Encoding of input file(s). <code>\"tempDirectory\"</code> Store temporary files in this directory. <code>\"computeEnvelopes\"</code> Compute and overwrite extents of features. <code>false</code>","tags":["citydb-tool","import","config"]},{"location":"citydb-tool/import-config/#citygml-options","title":"CityGML options","text":"<p>The <code>\"CityGML\"</code> property is a container object for CityGML-specific format options.</p> <pre><code>{\n  \"CityGML\": {\n    \"includeXALSource\": false,\n    \"xslTransforms\": [\n      \"/path/to/myFirstStylesheet.xsl\",\n      \"/path/to/mySecondStylesheet.xsl\"\n    ],\n    \"appearanceOptions\": {\n      \"readAppearances\": true,\n      \"themes\": [\"foo\",\"bar\"]\n    },\n    \"useLod4AsLod3\": false,\n    \"mapLod0RoofEdge\": false,\n    \"mapLod1MultiSurfaces\": false,\n    \"createCityObjectRelations\": true,\n    \"resolveCrossLodReferences\": true\n  }\n}\n</code></pre> Property Description Default value <code>\"includeXALSource\"</code> Import XML snippets of xAL address elements. <code>false</code> <code>\"xslTransforms\"</code> An array of XSLT stylesheets to transform the input, referenced by filename and path (absolute or relative). The stylesheets are applied in the specified order. <code>\"appearanceOptions\"</code> The <code>\"themes\"</code> array restricts the import of appearances based on their <code>&lt;theme&gt;</code> property. To exclude all appearances, set the <code>\"readAppearances\"</code> property to <code>false</code> (default: <code>true</code>). <code>\"useLod4AsLod3\"</code> Use LoD4 as LoD3, replacing an existing LoD3. <code>false</code> <code>\"mapLod0RoofEdge\"</code> Map LoD0 roof edges onto roof surfaces. <code>false</code> <code>\"mapLod1MultiSurfaces\"</code> Map LoD1 multi-surfaces onto generic thematic surfaces. <code>false</code> <code>\"createCityObjectRelations\"</code> Create <code>CityObjectRelation</code> objects for geometry references between top-level features. <code>true</code> <code>\"resolveCrossLodReferences\"</code> Resolves geometry references between different LoD representations of the same feature. <code>true</code>","tags":["citydb-tool","import","config"]},{"location":"citydb-tool/import-config/#cityjson-options","title":"CityJSON options","text":"<p>The <code>\"CityJSON\"</code> property is a container object for CityJSON-specific format options.</p> <pre><code>{\n  \"CityJSON\": {\n    \"mapUnsupportedTypesToGenerics\": true,\n    \"appearanceOptions\": {\n      \"readAppearances\": true,\n      \"themes\": [\"foo\",\"bar\"]\n    }\n  }\n}\n</code></pre> Property Description Default value <code>\"mapUnsupportedTypesToGenerics\"</code> Map city objects from unsupported extensions onto generic city objects. <code>true</code> <code>\"appearanceOptions\"</code> The <code>\"themes\"</code> array restricts the import of appearances based on their <code>\"theme\"</code> property. To exclude all appearances, set the <code>\"readAppearances\"</code> property to <code>false</code> (default: <code>true</code>).","tags":["citydb-tool","import","config"]},{"location":"citydb-tool/import/","title":"Import command","text":"<p>The <code>import</code> command imports city model data into the 3DCityDB <code>v5</code> in a supported format. Each format has a dedicated subcommand with format-specific options.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#synopsis","title":"Synopsis","text":"<pre><code>citydb import [OPTIONS] COMMAND\n</code></pre>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#options","title":"Options","text":"<p>The <code>import</code> command inherits global options from the main <code>citydb</code> command. Additionally, it defines general import, metadata, and filter options, which apply to all of its subcommands.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#global-options","title":"Global options","text":"Option Description Default value <code>[@&lt;filename&gt;...]</code> One or more argument files containing options. <code>-h</code>, <code>--help</code> Show a help message and exit. <code>-V</code>, <code>--version</code> Print version information and exit. <code>--config-file=&lt;file&gt;</code> Load configuration from this file. <code>-L</code>, <code>--log-level=&lt;level&gt;</code> Log level: <code>fatal</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code>, <code>trace</code>. <code>info</code> <code>--log-file=&lt;file&gt;</code> Write log messages to this file. <code>--pid-file=&lt;file&gt;</code> Create a file containing the process ID. <code>--plugins=&lt;dir&gt;</code> Load plugins from this directory. <code>--use-plugin=&lt;plugin[=true|false]&gt;[,&lt;plugin[=true|false]&gt;...]</code> Enable or disable plugins with a matching fully qualified class name. <code>true</code> <p>For more details on the global options and usage hints, see here.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#general-import-options","title":"General import options","text":"Option Description Default value <code>&lt;file&gt;...</code> One or more files and directories to process (glob patterns allowed). <code>--input-encoding=&lt;encoding&gt;</code> Encoding of input file(s). <code>--fail-fast</code> Fail fast on errors. <code>--temp-dir=&lt;dir&gt;</code> Store temporary files in this directory. <code>-m</code>, <code>--import-mode=&lt;mode&gt;</code> Import mode: <code>import_all</code>, <code>skip</code>, <code>delete</code>, <code>terminate</code>. <code>import_all</code> <code>--threads=&lt;threads&gt;</code> Number of threads to use for parallel processing. <code>--preview</code> Run in preview mode. Features will not be imported. <code>--index-mode=&lt;mode&gt;</code> Index mode: <code>keep</code>, <code>drop</code>, <code>drop_create</code>. Consider dropping indexes when processing large quantities of data. <code>keep</code> <code>--compute-extent</code> Compute and overwrite extents of features. <code>--transform=&lt;m0,m1,...,m11|swap-xy&gt;</code> Transform coordinates using a 3x4 matrix in row-major order. Use <code>swap-xy</code> as a shortcut.","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#metadata-options","title":"Metadata options","text":"Option Description Default value <code>--lineage=&lt;lineage&gt;</code> Lineage to use for the features. <code>--updating-person=&lt;name&gt;</code> Name of the user responsible for the import. database user <code>--reason-for-update=&lt;reason&gt;</code> Reason for importing the data.","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#filter-options","title":"Filter options","text":"Option Description Default value <code>-t</code>, <code>--type-name=&lt;[prefix:]name&gt;[,&lt;[prefix:]name&gt;...]</code> Names of the features to process. <code>-i</code>, <code>--id=&lt;id&gt;[,&lt;id&gt;...]</code> Identifiers of the features to process. <code>-b</code>, <code>--bbox=&lt;x_min,y_min,x_max,y_max[,srid]&gt;</code> Bounding box to use as spatial filter. <code>--bbox-mode=&lt;mode&gt;</code> Bounding box mode: <code>intersects</code>, <code>contains</code>, <code>on_tile</code>. <code>intersects</code> <code>--limit=&lt;count&gt;</code> Maximum number of features to process. <code>--start-index=&lt;index&gt;</code> Index within the input set from which features are processed.","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#commands","title":"Commands","text":"Command Description <code>help</code> Display help information about the specified command. <code>citygml</code> Import data in CityGML format. <code>cityjson</code> Import data in CityJSON format. <p>Note</p> <p>Additional subcommands to support more formats may be added in future versions. You can also implement your own plugin to add support for a specific format. Contributions are welcome.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#usage","title":"Usage","text":"","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#specifying-import-files","title":"Specifying import files","text":"<p>The input for import is specified using one or more <code>&lt;file&gt;</code> arguments, each of which can point to either a file or a directory. You can also use glob patterns with wildcard characters such as <code>*</code>, <code>?</code>, <code>[ ]</code>, or <code>{ }</code> to match multiple files.</p> <p>If a directory is provided, it will be scanned recursively for supported input files. The supported file formats and extensions depend on the subcommand. In addition to regular files, ZIP archives and GZIP-compressed files are supported as input. Like directories, ZIP archives are also scanned recursively for supported input files. The following example shows different ways for defining input files.</p> LinuxWindows CMD <pre><code>./citydb import citygml [...] \\\n    /path/to/my-city.gml \\\n    /foo/ \\\n    /bar/**/city*.{gml,gz,zip}\n</code></pre> <pre><code>citydb import citygml [...] ^\n    C:\\path\\to\\my-city.gml ^\n    C:\\foo\\ ^\n    C:\\bar\\**\\city*.{gml,gz,zip}\n</code></pre> <p>To enforce a specific encoding for the input files, provide the IANA-based encoding name (e.g., <code>UTF-8</code>) with the <code>--input-encoding</code> option. This encoding will be applied to all input files.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#import-modes-and-duplicate-features","title":"Import modes and duplicate features","text":"<p>The import mode, defined by the <code>--import-mode</code> option, determines how duplicate features are handled in the database. The available modes are:</p> <ul> <li><code>import_all</code>: All features from the input files are imported, even if duplicates are created. This is the default mode.</li> <li><code>skip</code>: Features already in the database take precedence. If a duplicate is found, the feature from the input file is   ignored and not imported.</li> <li><code>delete</code>: Features from the input files take precedence. If a duplicate is found, the existing feature in the database   is deleted before the new feature is imported.</li> <li><code>terminate</code>: Similar to <code>delete</code>, but the duplicate feature in the database is terminated rather than deleted (for   the difference, see the <code>delete</code> command).</li> </ul> <p>Note</p> <ul> <li>Duplicates are identified by comparing the <code>objectid</code> column in the <code>FEATURE</code>   table with the feature identifier from the input file (e.g., <code>gml:id</code>   for CityGML files). No additional checks are applied for identifying duplicates.</li> <li>Terminated features are excluded from the duplicates check.</li> </ul>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#previewing-the-import","title":"Previewing the import","text":"<p>The <code>--preview</code> option runs the import in preview mode. The input data is processed as if the import were taking place, but no changes are made to the database. This mode helps identify potential issues, such as conflicts or errors, before they affect the database, ensuring the actual import proceeds as expected.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#filtering-features","title":"Filtering features","text":"<p>The <code>import</code> command provides several filtering options to control which features are imported from the input files.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#feature-type-filter","title":"Feature type filter","text":"<p>The <code>--type-name</code> option specifies one or more feature types to import. For each feature type, provide its type name as defined in the <code>OBJECTCLASS</code> table of the 3DCityDB <code>v5</code>. To avoid ambiguity, you can use the namespace alias from the <code>NAMESPACE</code> table as a prefix in the format <code>prefix:name</code>. Only features matching the specified type will be imported.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#feature-identifier-filter","title":"Feature identifier filter","text":"<p>The <code>--id</code> option enables filtering by one or more feature identifiers provided as a comma-separated list. Only features with a matching identifier will be imported.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#bounding-box-filter","title":"Bounding box filter","text":"<p>The <code>--bbox</code> option defines a 2D bounding box as a spatial filter using four coordinates for the lower-left and upper-right corners. By default, the coordinates are assumed to be in the same CRS as the 3DCityDB instance. However, you can specify the database SRID of the CRS as a fifth value (e.g., <code>4326</code> for WGS84). All values must be separated by commas.</p> <p>The filter behavior is controlled by the <code>--bbox-mode</code> option:</p> <ul> <li><code>intersects</code>: Only features whose bounding box overlaps with the filter bounding box will be imported. This is the   default mode.</li> <li><code>contains</code>: Only features whose bounding box is entirely within the filter bounding box will be imported.</li> <li><code>on_tile</code>: Only features whose bounding box center lies within the filter bounding box or on its left/bottom   boundary will be imported. This mode ensures that when multiple filter bounding boxes are organized in a tile grid,   each feature matches exactly one tile.</li> </ul>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#count-filter","title":"Count filter","text":"<p>The <code>--limit</code> option sets the maximum number of features to import. The <code>--start-index</code> option defines the <code>0</code>-based index of the first feature to import. These options apply across all input files and can be used separately or together to control the total number of features imported.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#filter-example","title":"Filter example","text":"<p>The following example illustrates a CityGML import command with multiple filters:</p> LinuxWindows CMD <pre><code>./citydb import citygml [...] my-city.gml \\\n    --type-name=bldg:Building,tran:Road \\\n    --bbox=367123,5807268,367817,5807913,25833 \\\n    --bbox-mode=on_tile \\\n    --no-appearances \\\n    --limit=100\n</code></pre> <pre><code>citydb import citygml [...] my-city.gml ^\n    --type-name=bldg:Building,tran:Road ^\n    --bbox=367123,5807268,367817,5807913,25833 ^\n    --bbox-mode=on_tile ^\n    --no-appearances ^\n    --limit=100\n</code></pre> <p>Note</p> <ul> <li>When using multiple filters, all conditions must be satisfied for a feature to be imported.</li> <li>Configuration and argument files are an excellent way   to store complex filter expressions and easily reuse them.</li> </ul>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#managing-indexes-during-import","title":"Managing indexes during import","text":"<p>When importing data, database indexes are updated in real time, which can slow down the import process, especially  with large datasets. The <code>--index-mode</code> option offers the following modes for handling indexes during the import operation:</p> <ul> <li><code>keep</code>: The indexes remain unchanged. This is the default mode.</li> <li><code>drop</code>: The indexes are removed before the import starts, improving import performance.</li> <li><code>drop_create</code>: Similar to <code>drop</code>, but the indexes are re-created after the import completes, ensuring they are   available for subsequent queries.</li> </ul> <p>Note</p> <p>Dropping and re-creating indexes can also take a significant amount of time, depending on the size of the database. This mode is beneficial when importing large datasets, such as during the initial loading of the database. However, as the database grows, the overhead of dropping and re-creating indexes may outweigh the benefits, especially when importing smaller datasets.</p> <p>Tip</p> <p>The <code>index</code> command allows you to manage indexes independently of the import operation, giving you greater control over index handling.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#computing-extents","title":"Computing extents","text":"<p>By default, citydb-tool reads feature bounding boxes from the input file and stores them in the <code>envelope</code> column of the <code>FEATURE</code> table. A correct envelope is essential for spatial queries. With the <code>--compute-extent</code> option, citydb-tool computes envelopes instead of using those from the input file. The computation considers the geometries of each feature and its subfeatures across all LoDs.</p> <p>Tip</p> <p>You can also recompute envelopes after import using database functions in the 3DCityDB <code>v5</code>, as explained here.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#transforming-geometries","title":"Transforming geometries","text":"<p>The <code>--transform</code> option applies an affine transformation to input geometries using a 3x4 transformation matrix before they are imported into the database. The matrix operates on homogeneous coordinates to compute the transformed coordinates \\((x', y', z')\\):</p> \\[ \\begin{pmatrix} x' \\\\ y' \\\\ z' \\end{pmatrix} = \\begin{pmatrix} m_0 &amp; m_1 &amp; m_2 &amp; m_3 \\\\ m_4 &amp; m_5 &amp; m_6 &amp; m_7 \\\\ m_8 &amp; m_9 &amp; m_{10} &amp; m_{11} \\end{pmatrix} \\cdot \\begin{pmatrix} x \\\\ y \\\\ z \\\\ 1 \\end{pmatrix} \\] <p>The <code>--transform</code> option expects a comma-separated list of 12 matrix coefficients in row-major order, from \\(m_0\\) to \\(m_{11}\\):</p> <pre><code>--transform=m0,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11\n</code></pre> <p>A common use case is swapping the \\(x\\) and \\(y\\) coordinates while keeping \\(z\\) unchanged. You can use <code>swap_xy</code> as shorthand for this transformation, as shown below.</p> LinuxWindows CMD <pre><code>./citydb import citygml [...] my-city.gml \\\n    --transform=swap_xy\n</code></pre> <pre><code>citydb import citygml [...] my-city.gml ^\n    --transform=swap_xy\n</code></pre> <p>Note</p> <p>Ensure that the transformed coordinates remain consistent with the CRS defined for your 3DCityDB instance.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#defining-import-metadata","title":"Defining import metadata","text":"<p>The options <code>--lineage</code>, <code>--updating-person</code>, and <code>--reason-for-update</code> capture metadata about the feature's origin, the person responsible for the import, and the reason for the import. This metadata is specific to 3DCityDB and is not part of the CityGML standard (see also here). If not provided, the username used to establish the 3DCityDB database connection will be used as the default value for <code>--updating-person</code>.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/import/#controlling-the-import-process","title":"Controlling the import process","text":"<p>The <code>import</code> command offers the following options to control the import process:</p> <ul> <li><code>--fail-fast</code>: Terminates the process immediately upon encountering an error. By default, the import continues despite   errors with individual features.</li> <li><code>--temp-dir</code>: Specifies the directory for storing temporary files during import. For optimal performance, choose   a fast storage medium not used for reading the input files.</li> <li><code>--threads</code>: Sets the number of threads for parallel processing to improve performance. By default, it   equals the number of processors available to the JVM, or at least two.</li> </ul> <p>Note</p> <p>Setting the number of threads too high can lead to performance issues due to thrashing. Additionally, each thread requires a separate database connection, so ensure your database can handle the required number of connections.</p>","tags":["citydb-tool","import"]},{"location":"citydb-tool/index-command/","title":"Index command","text":"<p>The <code>index</code> command allows managing indexes in the 3DCityDB <code>v5</code>. It provides subcommands for checking the status of indexes, as well as for creating and dropping them.</p> <p>Indexes improve query performance and enable faster data retrieval, both of which are especially important for large databases. However, maintaining indexes comes with a cost, as they are updated in real time, potentially slowing down processes such as data imports or deletions. The <code>index</code> command gives you control over handling the indexes.</p>","tags":["citydb-tool","index"]},{"location":"citydb-tool/index-command/#usage","title":"Usage","text":"<pre><code>citydb index [OPTIONS] COMMAND\n</code></pre>","tags":["citydb-tool","index"]},{"location":"citydb-tool/index-command/#options","title":"Options","text":"<p>The <code>index</code> command inherits global options from the main <code>citydb</code> command. Additionally, the <code>index create</code> subcommand provides more options for creating indexes.</p>","tags":["citydb-tool","index"]},{"location":"citydb-tool/index-command/#global-options","title":"Global options","text":"Option Description Default value <code>[@&lt;filename&gt;...]</code> One or more argument files containing options. <code>-h</code>, <code>--help</code> Show a help message and exit. <code>-V</code>, <code>--version</code> Print version information and exit. <code>--config-file=&lt;file&gt;</code> Load configuration from this file. <code>-L</code>, <code>--log-level=&lt;level&gt;</code> Log level: <code>fatal</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code>, <code>trace</code>. <code>info</code> <code>--log-file=&lt;file&gt;</code> Write log messages to this file. <code>--pid-file=&lt;file&gt;</code> Create a file containing the process ID. <code>--plugins=&lt;dir&gt;</code> Load plugins from this directory. <code>--use-plugin=&lt;plugin[=true|false]&gt;[,&lt;plugin[=true|false]&gt;...]</code> Enable or disable plugins with a matching fully qualified class name. <code>true</code> <p>For more details on the global options and usage hints, see here.</p>","tags":["citydb-tool","index"]},{"location":"citydb-tool/index-command/#create-index-options","title":"Create index options","text":"Option Description Default value <code>-m, --index-mode=&lt;mode&gt;</code> Index mode for property value columns: <code>partial</code>, <code>full</code>. Null values are not indexed in partial mode. <code>partial</code> <p>The above options are only available for the <code>index create</code> command.</p>","tags":["citydb-tool","index"]},{"location":"citydb-tool/index-command/#database-connection-options","title":"Database connection options","text":"Option Description Default value <code>-H</code>, <code>--db-host=&lt;host&gt;</code> Name of the host on which the 3DCityDB is running. <code>-P</code>, <code>--db-port=&lt;port&gt;</code> Port of the 3DCityDB server. 5432 <code>-d</code>, <code>--db-name=&lt;database&gt;</code> Name of the 3DCityDB database to connect to. <code>-S</code>, <code>--db-schema=&lt;schema&gt;</code> Schema to use when connecting to the 3DCityDB. <code>citydb</code> or username <code>-u</code>, <code>--db-username=&lt;user&gt;</code> Username to use when connecting to the 3DCityDB. <code>-p</code>, <code>--db-password[=&lt;password&gt;]</code> Password to use when connecting to the 3DCityDB. Leave empty to be prompted. <code>--db-property=&lt;property=value&gt;[,&lt;property=value&gt;...]</code> Database-specific connection properties. <p>For more details on the database connection options and usage hints, see here.</p>","tags":["citydb-tool","index"]},{"location":"citydb-tool/index-command/#commands","title":"Commands","text":"Command Description <code>help</code> Display help information about the specified command. <code>status</code> Show indexes with their status in the database. <code>create</code> Create indexes on the database tables. <code>drop</code> Drop indexes on the database tables.","tags":["citydb-tool","index"]},{"location":"citydb-tool/index-command/#usage_1","title":"Usage","text":"","tags":["citydb-tool","index"]},{"location":"citydb-tool/index-command/#supported-indexes","title":"Supported indexes","text":"<p>The <code>index</code> command operates on a subset of all indexes defined in the 3DCityDB <code>v5</code>. This subset includes the most time-intensive spatial indexes and regular indexes on columns crucial for querying and filtering features.</p> <p>The following indexes are supported by citydb-tool:</p> Table Column(s) Index type <code>FEATURE</code> <code>identifier</code>, <code>identifier_codespace</code> Regular <code>FEATURE</code> <code>envelope</code> Spatial <code>FEATURE</code> <code>creation_date</code> Regular <code>FEATURE</code> <code>valid_from</code> Regular <code>FEATURE</code> <code>valid_to</code> Regular <code>GEOMETRY_DATA</code> <code>geometry</code> Spatial <code>PROPERTY</code> <code>name</code> Regular <code>PROPERTY</code> <code>namespace_id</code> Regular <code>PROPERTY</code> <code>val_timestamp</code> Regular <code>PROPERTY</code> <code>val_double</code> Regular <code>PROPERTY</code> <code>val_int</code> Regular <code>PROPERTY</code> <code>val_lod</code> Regular <code>PROPERTY</code> <code>val_string</code> Regular <code>PROPERTY</code> <code>val_uom</code> Regular <code>PROPERTY</code> <code>val_uri</code> Regular","tags":["citydb-tool","index"]},{"location":"citydb-tool/index-command/#checking-index-status","title":"Checking index status","text":"<p>The <code>index status</code> command lists all supported indexes in the 3DCityDB <code>v5</code> with their current status, indicating whether they are enabled (<code>on</code>) or dropped (<code>off</code>). Each index is listed with the name of the table and the column(s) for which it is defined. This command helps you understand the current index situation and decide whether an index action is needed to optimize subsequent database operations.</p> <p>Note</p> <p>When setting up a new instance of the 3DCityDB v5, all indexes are enabled by default.</p> <p>The following example demonstrates how to use the <code>index status</code> command, which then prints the index statuses to the console.</p> LinuxWindows CMD <pre><code>./citydb index status \\\n    -H localhost \\\n    -d citdb \\\n    -u citydb_user \\\n    -p mySecret\n</code></pre> <pre><code>citydb index status ^\n    -H localhost ^\n    -d citdb ^\n    -u citydb_user ^\n    -p mySecret\n</code></pre>","tags":["citydb-tool","index"]},{"location":"citydb-tool/index-command/#creating-indexes","title":"Creating indexes","text":"<p>The <code>index create</code> command lets you create the predefined indexes supported by citydb-tool. These indexes are crucial for optimizing query performance and enabling fast data retrieval, particularly in large databases. It is recommended to create them before exporting data, especially if the export involves filtering features.</p> <p>Since indexes on the <code>val_*</code> columns of the <code>PROPERTY</code> table are often sparsely populated with many <code>NULL</code> values, the <code>--index-mode</code> option offers the following modes for creating indexes on property value columns:</p> <ul> <li><code>partial</code>: Excludes <code>NULL</code> values from the indexes, resulting in smaller index sizes, faster creation and maintenance, and   improved query performance. However, partial indexes cannot be used to search for <code>NULL</code> values. This is the default mode.</li> <li><code>full</code>: Indexes all values, ensuring comprehensive coverage but potentially increasing storage requirements and the   time needed for creation and maintenance.</li> </ul> <p>The example below creates indexes on a 3DCityDB <code>v5</code> instance, using the <code>full</code> mode for property value columns.</p> LinuxWindows CMD <pre><code>./citydb index create \\\n    --index-mode=full\n    -H localhost \\\n    -d citdb \\\n    -u citydb_user \\\n    -p mySecret\n</code></pre> <pre><code>citydb index create ^\n    --index-mode=full\n    -H localhost ^\n    -d citdb ^\n    -u citydb_user ^\n    -p mySecret\n</code></pre> <p>Warning</p> <p>Depending on the size of the database, the indexing process may take a significant amount of time, as it involves processing large amounts of data.</p>","tags":["citydb-tool","index"]},{"location":"citydb-tool/index-command/#dropping-indexes","title":"Dropping indexes","text":"<p>The <code>index drop</code> command removes the predefined indexes supported by citydb-tool. Temporarily disabling indexes can significantly speed up bulk data operations, such as large imports or deletions, by eliminating the overhead of updating indexes. It can also be useful for database maintenance tasks, such as freeing up storage space.</p> <p>Dropping indexes is simple, as shown in the example below.</p> LinuxWindows CMD <pre><code>./citydb index drop \\\n    -H localhost \\\n    -d citdb \\\n    -u citydb_user \\\n    -p mySecret\n</code></pre> <pre><code>citydb index drop ^\n    -H localhost ^\n    -d citdb ^\n    -u citydb_user ^\n    -p mySecret\n</code></pre> <p>Warning</p> <p>While dropping indexes is a fast operation, re-creating them can be time-consuming, especially in large databases. As the database grows, the overhead of dropping and re-creating indexes may outweigh the benefits, particularly when dealing with smaller sets of features rather than bulk data operations.</p> <p>Note</p> <p>Even after dropping indexes with the <code>index drop</code> command, a minimal set of indexes remains enabled to ensure that basic queries, such as filtering features by their <code>objectid</code> or <code>termination_date</code>, continue to perform efficiently.</p>","tags":["citydb-tool","index"]},{"location":"citydb-tool/includes/db-options/","title":"Db options","text":"Option Description Default value <code>-H</code>, <code>--db-host=&lt;host&gt;</code> Name of the host on which the 3DCityDB is running. <code>-P</code>, <code>--db-port=&lt;port&gt;</code> Port of the 3DCityDB server. 5432 <code>-d</code>, <code>--db-name=&lt;database&gt;</code> Name of the 3DCityDB database to connect to. <code>-S</code>, <code>--db-schema=&lt;schema&gt;</code> Schema to use when connecting to the 3DCityDB. <code>citydb</code> or username <code>-u</code>, <code>--db-username=&lt;user&gt;</code> Username to use when connecting to the 3DCityDB. <code>-p</code>, <code>--db-password[=&lt;password&gt;]</code> Password to use when connecting to the 3DCityDB. Leave empty to be prompted. <code>--db-property=&lt;property=value&gt;[,&lt;property=value&gt;...]</code> Database-specific connection properties."},{"location":"citydb-tool/includes/export-filter-options/","title":"Export filter options","text":"Option Description Default value <code>-t</code>, <code>--type-name=&lt;[prefix:]name&gt;[,&lt;[prefix:]name&gt;...]</code> Names of the features to process. <code>-f</code>, <code>--filter=&lt;cql2-text&gt;</code> Filter to apply when retrieving features. Use the extended CQL2 filtering language of the 3DCityDB. <code>--filter-crs=&lt;crs&gt;</code> SRID or identifier of the CRS to use for geometries in the filter expression. 3DCityDB CRS <code>--sql-filter=&lt;sql&gt;</code> SQL query expression to use as filter. <code>-s</code>, <code>--sort-by=&lt;property[+|-]&gt;[,&lt;property[+|-]&gt;...]</code> Properties and sort orders for sorting features. <code>--limit=&lt;count&gt;</code> Maximum number of features to process. <code>--start-index=&lt;index&gt;</code> Index within the input set from which features are processed. <code>-l</code>, <code>--lod=&lt;lod&gt;[,&lt;lod&gt;...]</code> Export geometries with a matching LoD. <code>--lod-mode=&lt;mode&gt;</code> LoD filter mode: <code>or</code>, <code>and</code>, <code>minimum</code>, <code>maximum</code>. <code>or</code> <code>--lod-search-depth=&lt;0..n|all&gt;</code> Levels of sub-features to search for matching LoDs 0 <code>--no-appearances</code> Do not process appearances. <code>-a</code>, <code>--appearance-theme=&lt;theme&gt;[,&lt;theme&gt;...]</code> Process appearances with a matching theme. Use <code>none</code> for the null theme."},{"location":"citydb-tool/includes/export-general-options/","title":"Export general options","text":"Option Description Default value <code>-o</code>, <code>--output=&lt;file&gt;</code> Name of the output file. <code>--output-encoding=&lt;encoding&gt;</code> Encoding to use for the output file. <code>--fail-fast</code> Fail fast on errors. <code>--temp-dir=&lt;dir&gt;</code> Store temporary files in this directory. <code>--threads=&lt;threads&gt;</code> Number of threads to use for parallel processing. <code>--crs=&lt;crs&gt;</code> SRID or identifier of the CRS to use for the coordinates of geometries. 3DCityDB CRS <code>--crs-name=&lt;name&gt;</code> Name of the CRS to use in the output file. <code>--transform=&lt;m0,m1,...,m11|swap-xy&gt;</code> Transform coordinates using a 3x4 matrix in row-major order. Use <code>swap-xy</code> as a shortcut."},{"location":"citydb-tool/includes/export-history-options/","title":"Export history options","text":"Option Description Default value <code>-M</code>, <code>--validity=&lt;mode&gt;</code> Process features by validity: <code>valid</code>, <code>invalid</code>, <code>all</code>. <code>valid</code> <code>-T</code>, <code>--validity-at=&lt;time&gt;</code> Check validity at a specific point in time. If provided, the time must be in <code>&lt;YYYY-MM-DD&gt;</code> or <code>&lt;YYYY-MM-DDThh:mm:ss[(+|-)hh:mm]&gt;</code> format. <code>--validity-reference=&lt;source&gt;</code> Validity time reference: <code>database</code>, <code>real_world</code> <code>database</code> <code>--lenient-validity</code> Ignore incomplete validity intervals of features."},{"location":"citydb-tool/includes/export-tiling-options/","title":"Export tiling options","text":"Option Description Default value <code>--tile-matrix=&lt;columns,rows&gt;</code> Export tiles in a columns x rows grid. <code>--tile-dimension=&lt;width[unit],height[unit]&gt;</code> Export tiles with specified width and height, aligned with the database CRS grid (default length unit of the CRS assumed). <code>--tile-extent=&lt;x_min,y_min,x_max,y_max[,srid]&gt;</code> Extent to use for tiling. auto-computed <code>--tile-origin=&lt;origin&gt;</code> Tile indexes origin: <code>top_left</code>, <code>bottom_left</code>. <code>top_left</code>"},{"location":"citydb-tool/includes/global-options/","title":"Global options","text":"Option Description Default value <code>[@&lt;filename&gt;...]</code> One or more argument files containing options. <code>-h</code>, <code>--help</code> Show a help message and exit. <code>-V</code>, <code>--version</code> Print version information and exit. <code>--config-file=&lt;file&gt;</code> Load configuration from this file. <code>-L</code>, <code>--log-level=&lt;level&gt;</code> Log level: <code>fatal</code>, <code>error</code>, <code>warn</code>, <code>info</code>, <code>debug</code>, <code>trace</code>. <code>info</code> <code>--log-file=&lt;file&gt;</code> Write log messages to this file. <code>--pid-file=&lt;file&gt;</code> Create a file containing the process ID. <code>--plugins=&lt;dir&gt;</code> Load plugins from this directory. <code>--use-plugin=&lt;plugin[=true|false]&gt;[,&lt;plugin[=true|false]&gt;...]</code> Enable or disable plugins with a matching fully qualified class name. <code>true</code>"},{"location":"citydb-tool/includes/import-filter-options/","title":"Import filter options","text":"Option Description Default value <code>-t</code>, <code>--type-name=&lt;[prefix:]name&gt;[,&lt;[prefix:]name&gt;...]</code> Names of the features to process. <code>-i</code>, <code>--id=&lt;id&gt;[,&lt;id&gt;...]</code> Identifiers of the features to process. <code>-b</code>, <code>--bbox=&lt;x_min,y_min,x_max,y_max[,srid]&gt;</code> Bounding box to use as spatial filter. <code>--bbox-mode=&lt;mode&gt;</code> Bounding box mode: <code>intersects</code>, <code>contains</code>, <code>on_tile</code>. <code>intersects</code> <code>--limit=&lt;count&gt;</code> Maximum number of features to process. <code>--start-index=&lt;index&gt;</code> Index within the input set from which features are processed."},{"location":"citydb-tool/includes/import-general-options/","title":"Import general options","text":"Option Description Default value <code>&lt;file&gt;...</code> One or more files and directories to process (glob patterns allowed). <code>--input-encoding=&lt;encoding&gt;</code> Encoding of input file(s). <code>--fail-fast</code> Fail fast on errors. <code>--temp-dir=&lt;dir&gt;</code> Store temporary files in this directory. <code>-m</code>, <code>--import-mode=&lt;mode&gt;</code> Import mode: <code>import_all</code>, <code>skip</code>, <code>delete</code>, <code>terminate</code>. <code>import_all</code> <code>--threads=&lt;threads&gt;</code> Number of threads to use for parallel processing. <code>--preview</code> Run in preview mode. Features will not be imported. <code>--index-mode=&lt;mode&gt;</code> Index mode: <code>keep</code>, <code>drop</code>, <code>drop_create</code>. Consider dropping indexes when processing large quantities of data. <code>keep</code> <code>--compute-extent</code> Compute and overwrite extents of features. <code>--transform=&lt;m0,m1,...,m11|swap-xy&gt;</code> Transform coordinates using a 3x4 matrix in row-major order. Use <code>swap-xy</code> as a shortcut."},{"location":"citydb-tool/includes/import-metadata-options/","title":"Import metadata options","text":"Option Description Default value <code>--lineage=&lt;lineage&gt;</code> Lineage to use for the features. <code>--updating-person=&lt;name&gt;</code> Name of the user responsible for the import. database user <code>--reason-for-update=&lt;reason&gt;</code> Reason for importing the data."},{"location":"first-steps/","title":"First Steps","text":"<p>This quickstart guide gives step-by-step instructions for setting up a 3D City Database instance and the database client citydb-tool. Follow the download instructions to obtain the required software packages. The source code of the 3D City Database is hosted and maintained on GitHub.</p> <ul> <li>System requirements</li> <li>Setting up the 3DCityDB schema</li> <li>Using the citydb-tool</li> <li>Using Docker to run a 3DCityDB and the citydb-tool</li> <li>Migration from previous releases</li> </ul> <p>The individual components of the 3D City Database are also available as images for the Docker virtualization technology. This makes it possible to install and configure a 3D City Database with a single command line statement in almost any runtime environment. See the Docker section for more details.</p>","tags":["first-steps","quickstart"]},{"location":"first-steps/citydb-tool/","title":"Using citydb-tool","text":"<p>This guide provides a quick introduction to importing and exporting CityGML or CityJSON data into the 3DCityDB using <code>citydb-tool</code>. It is intended to help you get started with the basics, while the full documentation of citydb-tool is available here. citydb-tool is the default command-line client for 3DCityDB <code>v5</code>, designed for importing and exporting city model data and performing various database operations.</p>","tags":["citydb-tool","quickstart"]},{"location":"first-steps/citydb-tool/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>A ready-to-use 3DCityDB <code>v5</code> instance (see 3DCitydb setup guide).</li> <li>A matching release package of <code>citydb-tool</code> (follow the download instructions).</li> <li>A system that meets the requirements for running citydb-tool.</li> <li>A CityGML dataset to import.</li> </ul>","tags":["citydb-tool","quickstart"]},{"location":"first-steps/citydb-tool/#step-1-setting-up-citydb-tool","title":"Step 1: Setting up citydb-tool","text":"<p>citydb-tool is distributed as a ZIP package and does not require a specific installation process. Simply extract the package to a directory of your choice. Inside this directory, you will find the <code>citydb</code> start script for running the tool. Two versions of this start script are provided:</p> <ol> <li><code>citydb</code> for UNIX/Linux/macOS systems; and</li> <li><code>citydb.bat</code> for Windows systems.</li> </ol> <p>citydb-tool is a command-line tool that offers multiple commands, each with its own set of command-line parameters and options, making it best run from within a shell environment. To quickly verify that the tool is working correctly on your system, open a shell, navigate to the installation directory of citydb-tool, and run the following command to print its version information to the console. On UNIX/Linux machines, you may first need to set the appropriate file permissions to make the script executable.</p> LinuxWindows CMD <pre><code>chmod u+x citydb\n./citydb --version\n</code></pre> <pre><code>citydb --version    # you can omit the .bat file extension\n</code></pre> <p><code>citydb --help</code> lists all available commands in citydb-tool. Note that some commands may have subcommands. To display help information for a specific (sub)command, simply use <code>citydb COMMAND [SUBCOMMAND...] --help</code>.</p>","tags":["citydb-tool","quickstart"]},{"location":"first-steps/citydb-tool/#step-2-importing-citygml-data","title":"Step 2: Importing CityGML data","text":"<p>Once you have confirmed that citydb-tool is working correctly, you can proceed with importing CityGML data into your 3DCityDB instance. For this, ensure that you have the database connection details ready or consult your database administrator.</p> <p>Tip</p> <p>If you do not have a CityGML dataset available for this step, you can use one of the sample datasets provided by citydb-tool in the <code>samples/datasets</code> subfolder.</p> <p>The general command to import CityGML data is shown below:</p> LinuxWindows CMD <pre><code>./citydb import citygml \\\n    -H the.host.de \\\n    -d theDBName \\\n    -u theUsername \\\n    -p theSecretPass \\\n    /path/to/citygml.gml\n</code></pre> <pre><code>citydb import citygml ^\n    -H the.host.de ^\n    -d theDBName ^\n    -u theUsername ^\n    -p theSecretPass ^\n    C:\\path\\to\\citygml.gml\n</code></pre> <p>The parameters used in this simple example are:</p> <ul> <li><code>-H</code>: The host of your 3DCityDB instance (e.g., localhost or the.host.de).</li> <li><code>-d</code>: The name of the 3DCityDB database where the CityGML data will be imported.</li> <li><code>-u</code>: The database username with sufficient privileges to perform the import.</li> <li><code>-p</code>: The password for the provided database username (leave empty to be prompted!).</li> <li><code>/path/to/citygml.gml</code>: The path to the CityGML file you wish to import.</li> </ul> <p>During the import process, log messages will be printed to the console, informing you about the progress of the operation. If the import completes successfully, a summary of the imported city objects will be displayed. In case of errors, the import is aborted, and an error message with details about the cause will be shown. To enable more verbose logging and get additional error details, add the <code>--log-level debug</code> parameter to the export command.</p> <p></p> <p>Figure 1. Example console output of a citydb-tool import operation.</p> <p>Tip</p> <p>To import a CityJSON dataset instead, simply use the command <code>import cityjson</code> and point to your CityJSON input file.</p>","tags":["citydb-tool","quickstart"]},{"location":"first-steps/citydb-tool/#step-3-exporting-citygml-data","title":"Step 3: Exporting CityGML data","text":"<p>Exporting the data from the 3DCityDB back to CityGML format is as easy as this:</p> LinuxWindows CMD <pre><code>./citydb export citygml \\\n    -H the.host.de \\\n    -d theDBName \\\n    -u theUsername \\\n    -p theSecretPass \\\n    -o /path/to/target/citygml.gml\n</code></pre> <pre><code>citydb export citygml ^\n    -H the.host.de ^\n    -d theDBName ^\n    -u theUsername ^\n    -p theSecretPass ^\n    -o C:\\path\\to\\target\\citygml.gml\n</code></pre> <p>The output file's path and name must be specified using the <code>-o</code> parameter. All other parameters in this example match those used in the import operation. The export process logs progress and errors just like the import. Use <code>--log-level debug</code> for detailed output. If you want to export to a different CityGML version, use the <code>-v</code> parameter with <code>3.0</code>, <code>2.0</code>, or <code>1.0</code> as the value, depending on the desired target version.</p> <p>Once the export completes successfully, a summary of the exported city objects will be shown.</p> <p></p> <p>Figure 2. Example console output of a citydb-tool export operation.</p> <p>Tip</p> <p>To export the data in CityJSON format, simply use the command <code>export cityjson</code> instead. This works even if you have imported a CityGML file, as citydb-tool applies an on-the-fly conversion between both formats.</p>","tags":["citydb-tool","quickstart"]},{"location":"first-steps/docker/","title":"Using Docker","text":"<p>The quickest way to get up and running with 3DCityDB is using Docker!  On this page you will find quick start examples for the 3DCityDB and tools using Docker . Follow the examples to create a database, import CityGML data, and create an export in minutes.</p> <p>A much more detailed example on importing and exporting data using 3DCityDB and citydb-tool Docker including a test dataset can be found here.</p>","tags":["docker","3dcitydb","citydb-tool","quickstart"]},{"location":"first-steps/docker/#tldr","title":"TL;DR","text":"<ul> <li> <p>3D City Database: Create a 3DCityDB Docker container with <code>SRID=25832</code>.</p> LinuxWindows CMD <pre><code>docker pull 3dcitydb/3dcitydb-pg\n\ndocker run -d -p 5432:5432 --name citydb \\\n  -e POSTGRES_PASSWORD=changeMe \\\n  -e SRID=25832 \\\n3dcitydb/3dcitydb-pg\n</code></pre> <pre><code>docker pull 3dcitydb/3dcitydb-pg\n\ndocker run -d -p 5432:5432 --name citydb ^\n  -e POSTGRES_PASSWORD=changeMe ^\n  -e SRID=25832 ^\n3dcitydb/3dcitydb-pg\n</code></pre> </li> <li> <p>citydb-tool: Connect to the container specified above.</p> LinuxWindows CMD <pre><code>docker run -i -t --rm --name citydb-tool \\\n  --network host \\\n  -v /my/data/:/data \\\n  -e CITYDB_HOST=localhost \\\n  -e CITYDB_PORT=5432 \\\n  -e CITYDB_NAME=postgres \\\n  -e CITYDB_USERNAME=postgres \\\n  -e CITYDB_PASSWORD=changeMe \\\n3dcitydb/citydb-tool [help|import|export|delete|index]\n</code></pre> <pre><code>docker run -i -t --rm --name citydb-tool ^\n  --network host ^\n  -v /my/data/:/data ^\n  -e CITYDB_HOST=localhost ^\n  -e CITYDB_PORT=5432 ^\n  -e CITYDB_NAME=postgres ^\n  -e CITYDB_USERNAME=postgres ^\n  -e CITYDB_PASSWORD=changeMe ^\n3dcitydb/citydb-tool [help|import|export|delete|index]\n</code></pre> <p>Tip</p> <p>Use the <code>help</code> command to list all CLI parameters and arguments. For subcommands (e.g. <code>import citygml</code>) us this syntax <code>import help citygml</code> to show CLI options.</p> </li> </ul>","tags":["docker","3dcitydb","citydb-tool","quickstart"]},{"location":"first-steps/docker/#what-is-docker","title":"What is Docker?","text":"<p>Docker  is a widely used virtualization technology that makes it possible to pack an application with all its required resources into a standardized unit\u2014the Docker Container. Software encapsulated in this way can run on Linux, Windows, macOS, and most cloud services without any further changes or setup process. Docker containers are lightweight compared to traditional virtualization environments that emulate an entire operating system because they contain only the application and all the tools, program libraries, and files it requires.</p> <p>Docker enables you to get a 3DCityDB instance up and running in a few seconds, without having to set up a database server or the 3DCityDB database schema, as shown below.</p> <p></p> <p>Figure 1. Setup a 3DCityDB instance using Docker and establish a connection to the ready-to-use 3DCityDB in seconds.</p>","tags":["docker","3dcitydb","citydb-tool","quickstart"]},{"location":"first-steps/docker/#get-docker","title":"Get Docker","text":"<p>To run the 3DCityDB images, you need to install Docker Engine. Installation instructions for Linux are available here. For Windows, it is recommended to download and install Docker Desktop.</p>","tags":["docker","3dcitydb","citydb-tool","quickstart"]},{"location":"first-steps/docker/#docker-images-overview","title":"Docker images overview","text":"<p>Docker images are available for the following tools of the 3DCityDB software suite:</p> <ul> <li>3D City Database</li> <li>citydb-tool</li> <li>3DCityDB Importer/Exporter</li> <li>3D Web Map Client</li> <li>3DCityDB Web Feature Service (WFS)</li> </ul> <p>Docker image compatibility</p> <p>3DCityDB <code>v5</code> introduces a substantially changed database schema, that requires a new set of tools.</p> <p>Currently, only citydb-tool is compatible with 3DCityDB <code>v5</code>. Usage of legacy 3DCityDB <code>v4</code> tools such as the Importer/Exporter or the Web Feature Service (WFS) is still possible by migrating data to a 3DCityDB <code>v4</code>. See here for more details on compatibility of CityGML versions and 3DCityDB tools, and how to migrate data between versions.</p>","tags":["docker","3dcitydb","citydb-tool","quickstart"]},{"location":"first-steps/docker/#get-3dcitydb-docker-images","title":"Get 3DCityDB Docker images","text":"<p>All images are available from DockerHub or Github container registry (ghcr.io). An overview of available versions and image variants is available here. Pull the <code>latest</code> image once to make sure you are using 3DCityDB <code>v5</code>, or use a <code>v5</code> tag.</p> <ul> <li> <p>3D City Database</p> DockerHubGithub container registry <pre><code>docker pull 3dcitydb/3dcitydb-pg\n# or\ndocker pull 3dcitydb/3dcitydb-pg:5\n</code></pre> <pre><code>docker pull ghcr.io/3dcitydb/3dcitydb-pg\n# or\ndocker pull ghcr.io/3dcitydb/3dcitydb-pg:5\n</code></pre> </li> </ul> <p>Tip</p> <p>To benefit of the latest bugfixes and features of PostgreSQL/PostGIS spatial functions, we recommend to use the <code>alpine</code> image versions. See here for more details on the differences between the <code>debian</code> and <code>alpine</code> image variants.</p> DockerHubGithub container registry <pre><code>docker pull 3dcitydb/3dcitydb-pg:latest-alpine\n# or\ndocker pull 3dcitydb/3dcitydb-pg:5-alpine\n</code></pre> <pre><code>docker pull ghcr.io/3dcitydb/3dcitydb-pg:latest-alpine\n# or\ndocker pull ghcr.io/3dcitydb/3dcitydb-pg:5-alpine\n</code></pre> <ul> <li> <p>citydb-tool</p> DockerHubGithub container registry <pre><code>docker pull 3dcitydb/citydb-tool\n</code></pre> <pre><code>docker pull ghcr.io/3dcitydb/citydb-tool\n</code></pre> </li> </ul>","tags":["docker","3dcitydb","citydb-tool","quickstart"]},{"location":"first-steps/docker/#quick-start-examples","title":"Quick start examples","text":"<p>The following sections provide quick start code snippets for all 3DCityDB Docker images to get you running in a few seconds. For more comprehensive documentation, please visit the individual chapters of each image.</p> <ul> <li>3DCityDB Docker</li> <li>citydb-tool Docker</li> </ul>","tags":["docker","3dcitydb","citydb-tool","quickstart"]},{"location":"first-steps/docker/#3dcitydb-docker","title":"3DCityDB Docker","text":"<p>To run a PostgreSQL/PostGIS 3DCityDB container the only required settings are a database password (<code>POSTGRES_PASSWORD</code>) and the EPSG code of the coordinate reference system (<code>SRID</code>) of the 3DCityDB instance. Use the <code>docker run -p</code> switch to define a port to expose to the host system for database connections. The detailed documentation for the 3DCityDB Docker image is available here.</p> LinuxWindows CMD <pre><code>docker run -d -p 5432:5432 --name cdb \\\n  -e POSTGRES_PASSWORD=changeMe \\\n  -e SRID=25832 \\\n3dcitydb/3dcitydb-pg\n</code></pre> <pre><code>docker run -d -p 5432:5432 --name cdb ^\n  -e POSTGRES_PASSWORD=changeMe ^\n  -e SRID=25832 ^\n3dcitydb/3dcitydb-pg\n</code></pre> <p>A container started with the command above will host a 3DCityDB instance configured like this:</p> <pre><code>CONTAINER NAME    cdb\nDB HOST           localhost or 127.0.0.1\nDB PORT           5432\nDB NAME           postgres\nDB USER           postgres\nDB PASSWD         changeMe\nDB SRID           25832\nDB GMLSRSNAME     urn:ogc:def:crs:EPSG::25832\n</code></pre>","tags":["docker","3dcitydb","citydb-tool","quickstart"]},{"location":"first-steps/docker/#citydb-tool-docker","title":"citydb-tool Docker","text":"<p>The Docker image exposes the commands of the <code>citydb-tool</code>. The environment variables listed below allow to specify a 3DCityDB <code>v5</code> connection. To exchange data for import or export with the container, mount a host folder to <code>/data</code> inside the container.</p> LinuxWindows CMD <pre><code>docker run --rm --name citydb-tool -i -t \\\n  --network host \\\n  -e CITYDB_HOST=localhost \\\n  -e CITYDB_NAME=postgres \\\n  -e CITYDB_USERNAME=postgres \\\n  -e CITYDB_PASSWORD=changeMe \\\n  -v /my/data/:/data \\\n3dcitydb/citydb-tool COMMAND # (1)!\n</code></pre> <ol> <li>The commands of <code>citydb-tool</code> are documented here.</li> </ol> <pre><code>docker run --rm --name citydb-tool -i -t ^\n  --network host ^\n  -e CITYDB_HOST=localhost ^\n  -e CITYDB_NAME=postgres ^\n  -e CITYDB_USERNAME=postgres ^\n  -e CITYDB_PASSWORD=changeMe ^\n  -v \"c:\\mydata:/data\" ^\n3dcitydb/citydb-tool COMMAND # (1)!\n</code></pre> <ol> <li>The commands of <code>citydb-tool</code> are documented here.</li> </ol>","tags":["docker","3dcitydb","citydb-tool","quickstart"]},{"location":"first-steps/docker/#show-help-and-cli-documentation","title":"Show help and CLI documentation","text":"<p>Use the <code>help</code> command to see the CLI documentation and list all available commands:</p> <pre><code>docker run -i -t --rm 3dcitydb/citydb-tool help\n</code></pre> <p>Run <code>help COMMAND</code> to see the CLI documentation for a specific command:</p> <pre><code>docker run -i -t --rm 3dcitydb/citydb-tool help import\ndocker run -i -t --rm 3dcitydb/citydb-tool help export\ndocker run -i -t --rm 3dcitydb/citydb-tool help delete\n# ...\n</code></pre> <p>To see the usage description of a subcommand, use the <code>help</code> function of the top level command:</p> <pre><code>docker run -i -t --rm 3dcitydb/citydb-tool import help citygml\n</code></pre>","tags":["docker","3dcitydb","citydb-tool","quickstart"]},{"location":"first-steps/docker/#import-citygml-data","title":"Import CityGML data","text":"<p>Run the <code>import</code> command to import  a CityGML dataset located at <code>/local/data/dir/data.gml</code> (Linux) or <code>c:\\local\\data\\dir\\data.gml</code> (Windows).</p> LinuxWindows CMD <pre><code>docker run -i -t --rm -u $(id -u):$(id -g) \\\n  --network host \\\n  -v /local/data/dir:/data/ \\\n  -e CITYDB_HOST=localhost \\\n  -e CITYDB_NAME=postgres \\\n  -e CITYDB_USERNAME=postgres \\\n  -e CITYDB_PASSWORD=changeMe \\\n3dcitydb/citydb-tool import citygml \"/data/data.gml\"\n</code></pre> <pre><code>docker run -i -t --rm ^\n  --network host ^\n  -v \"c:\\local\\data\\dir:/data/\" ^\n  -e CITYDB_HOST=localhost ^\n  -e CITYDB_NAME=postgres ^\n  -e CITYDB_USERNAME=postgres ^\n  -e CITYDB_PASSWORD=changeMe ^\n3dcitydb/citydb-tool import citygml \"/data/data.gml\"\n</code></pre>","tags":["docker","3dcitydb","citydb-tool","quickstart"]},{"location":"first-steps/docker/#export-citygml-data","title":"Export CityGML data","text":"<p>Run the <code>export</code> command to export  a CityGML dataset to <code>/local/data/dir/export.gml</code> (Linux) or <code>c:\\local\\data\\dir\\export.gml</code> (Windows).</p> LinuxWindows CMD <pre><code>docker run -i -t --rm -u $(id -u):$(id -g) \\\n  --network host \\\n  -v /local/data/dir:/data/ \\\n  -e CITYDB_HOST=localhost \\\n  -e CITYDB_NAME=postgres \\\n  -e CITYDB_USERNAME=postgres \\\n  -e CITYDB_PASSWORD=changeMe \\\n3dcitydb/citydb-tool export citygml -o \"/data/export.gml\"\n</code></pre> <pre><code>docker run -i -t --rm ^\n  --network host ^\n  -v \"c:\\local\\data\\dir:/data/\" ^\n  -e CITYDB_HOST=localhost ^\n  -e CITYDB_NAME=postgres ^\n  -e CITYDB_USERNAME=postgres ^\n  -e CITYDB_PASSWORD=changeMe ^\n3dcitydb/citydb-tool export citygml -o \"/data/export.gml\"\n</code></pre> <p>A much more detailed example on importing and export data using 3DCityDB and citydb-tool Docker can be found here.</p>","tags":["docker","3dcitydb","citydb-tool","quickstart"]},{"location":"first-steps/migration/","title":"Migration from previous versions","text":"<p>The 3D City Database <code>v5</code> is a major revision of the previous version <code>v4</code>. The database schema has been completely redesigned and significantly simplified compared to <code>v4</code> to support CityGML 3.0, alongside CityGML 2.0 and 1.0. As a result, there is currently no tool available to automatically upgrade a 3DCityDB <code>v4</code> instance to version <code>v5</code> at the database level and migrate the data in one step.</p> <p>The recommended migration process for an existing 3DCityDB <code>v4</code> is:</p> <ol> <li>Export all data from the 3DCityDB <code>v4</code> as CityGML 2.0 using the    Importer/Exporter tool.</li> <li>Set up a new 3DCityDB <code>v5</code> instance (see 3DCitydb setup guide).</li> <li>Re-import the data into the 3DCityDB <code>v5</code> instance using <code>citydb-tool</code>.</li> </ol> <p>Tip</p> <p>Check out the  compatibility and data migration  guide to learn more about:</p> <ul> <li>Compatibility between CityGML, 3DCityDB and tool versions</li> <li>Migrating from previous 3DCityDB releases</li> <li>Migrating between CityGML versions</li> <li>Migrating between 3DCityDB versions</li> </ul>","tags":["migration","compatibility","3dcitydb","citydb-tool"]},{"location":"first-steps/requirements/","title":"System requirements","text":"","tags":["3dcitydb","requirements","postgresql","postgis","oracle"]},{"location":"first-steps/requirements/#3d-city-database","title":"3D City Database","text":"<p>Setting up an instance of the 3D City Database requires an existing installation of a PostgreSQL database with PostGIS extension or using our Docker images. We recommend checking data and database compatibility first.</p> <p>Info</p> <p>We are expanding support to include more database systems, starting with Oracle Database. Stay tuned!</p> <p>Supported PostgreSQL versions include PostgreSQL 13 and higher, with PostGIS 3.0 and higher. Make sure to check the PostgreSQL versioning policy to determine which PostgreSQL versions are actively maintained or have reached end-of-life. The PostGIS support matrix provides details on which PostgreSQL versions are supported by specific PostGIS versions and whether any particular version of PostGIS has reached end-of-life.</p> <p>The SQL scripts for setting up a 3D City Database schema are designed to be executed by the default command-line client of the respective database system \u2013 specifically, <code>psql</code> for PostgreSQL. These scripts include meta-commands specific to these clients and may not work properly with other client software. Therefore, ensure that <code>psql</code> is installed on the machine from which you plan to set up the 3D City Database before proceeding with the setup instructions.</p> <p>Tip</p> <p>It is recommended to always install the latest patches, minor releases, and security updates for your database system. The 3D City Database does not support database versions that have reached end-of-life.</p>","tags":["3dcitydb","requirements","postgresql","postgis","oracle"]},{"location":"first-steps/requirements/#citydb-tool-database-client","title":"<code>citydb-tool</code> database client","text":"<p><code>citydb-tool</code> is the default command-line client for the 3D City Database, used to import and export city model data as well as perform data and database operations. It is implemented as a Java application and can be run on any platform that supports Java 17 and higher.</p> <p>To use <code>citydb-tool</code> on your machine, ensure that a matching Java Runtime Environment (JRE) is installed. Java installation packages are available from various vendors and for different platforms. The following is a non-exhaustive list of Java distributions that are free to download and use:</p> <ul> <li>Eclipse Temurin</li> <li>Amazon Coretto</li> <li>Oracle Java</li> <li>OpenJDK</li> </ul> <p>Follow the installation instructions for your operating system. Note that starting with Java 17 LTS, Oracle Java is released under a no-fee, free-to-use license. However, previous versions of Oracle Java are available only under a fee-based subscription license. Similarly, Java binaries from other vendors may require a license for commercial use or access to updates. Please review the license terms and conditions provided by the vendors carefully.</p>","tags":["3dcitydb","requirements","postgresql","postgis","oracle"]},{"location":"first-steps/setup/","title":"Setting up a 3DCityDB","text":"<p>The recommended way to set up a bare metal 3D City Database (3DCityDB) instance is by using the installation scripts provided as separate 3DCityDB download package. These scripts are also included in each <code>citydb-tool</code> distribution. Follow the download instruction to obtain them. Alternatively, use Docker  for a simpler setup and deployment of a 3DCityDB instance.</p>","tags":["3dcitydb","setup","bare metal","docker","shell scripts","database scripts","sql scripts","template database"]},{"location":"first-steps/setup/#3dcitydb-setup-steps","title":"3DCityDB setup steps","text":"","tags":["3dcitydb","setup","bare metal","docker","shell scripts","database scripts","sql scripts","template database"]},{"location":"first-steps/setup/#step-1-create-an-empty-postgresql-database","title":"Step 1: Create an empty PostgreSQL database","text":"<p>The first step is to create a new, empty database on your PostgreSQL server. Use a superuser or a database user with the <code>CREATEDB</code> permission to do so. While not required, it is recommended to select or create a dedicated user to own the database, who will also be used to run the 3DCityDB setup scripts in later steps.</p> <p>The following command demonstrates how to create a new database for the user <code>citydb_user</code>.</p> <pre><code>CREATE DATABASE citydb_v5 OWNER citydb_user;\n</code></pre> <p>Tip</p> <p>You can execute this command using PostgreSQL's command-line client <code>psql</code> or any other SQL tool, such as the graphical database client <code>pgAdmin</code>. Refer to the documentation of your preferred tool for more information.</p>","tags":["3dcitydb","setup","bare metal","docker","shell scripts","database scripts","sql scripts","template database"]},{"location":"first-steps/setup/#step-2-add-the-postgis-extension","title":"Step 2: Add the PostGIS extension","text":"<p>The 3D City Database requires the PostGIS extension to be added to the database. This can only be done by a superuser. Use the following command to add the PostGIS extension:</p> <pre><code>CREATE EXTENSION postgis;\n</code></pre> <p>Optional</p> <p>To enable advanced spatial 3D operations such as extrusion, volume calculation, or union/intersection/difference of volume geometries, you can additionally install the <code>postgis_sfcgal</code> extension:</p> <pre><code>CREATE EXTENSION postgis_sfcgal;\n</code></pre>","tags":["3dcitydb","setup","bare metal","docker","shell scripts","database scripts","sql scripts","template database"]},{"location":"first-steps/setup/#step-3-edit-the-connection-details-script","title":"Step 3: Edit the <code>connection-details</code> script","text":"<p>Now it's time to use the 3DCityDB setup scripts. Navigate to the <code>3dcitydb/postgresql/shell-scripts</code> directory where you have unzipped the 3DCityDB software package, or locate this folder within the installation directory of <code>citydb-tool</code>. Then, change to the subfolder <code>unix</code> or <code>windows</code>, depending on your operating system.</p> <p>Once inside, locate the <code>connection-details.[sh|bat]</code> script and open it with a text editor of your choice. Enter the database connection details along with the full path to the <code>psql</code> executable in this file. As mentioned above, it is recommended to provide the user who owns the database as <code>PGUSER</code> in the script.</p> <p>Below is an example of the required information to include in the <code>connection-details</code> file.</p> LinuxWindows CMD <pre><code>#!/bin/bash\n# Provide your database details here ----------------\nexport PGBIN=/var/lib/postgresql/[version]/bin\nexport PGHOST=localhost\nexport PGPORT=5432\nexport CITYDB=citydb_v5\nexport PGUSER=citydb_user\n#----------------------------------------------------\n</code></pre> <pre><code># Provide your database details here ----------------\nset PGBIN=C:\\Program Files\\PostgreSQL\\[version]\\bin\nset PGHOST=localhost\nset PGPORT=5432\nset CITYDB=citydb_v5\nset PGUSER=citydb_user\n#----------------------------------------------------\n</code></pre> <p>Info</p> <p>If the <code>psql</code> executable is already on your <code>PATH</code>, you can comment out or remove the line setting the <code>PGBIN</code> variable in the script.</p>","tags":["3dcitydb","setup","bare metal","docker","shell scripts","database scripts","sql scripts","template database"]},{"location":"first-steps/setup/#step-4-execute-the-create-db-script","title":"Step 4: Execute the <code>create-db</code> script","text":"<p>Once the connection details have been set in the <code>connection-details</code> file, execute the <code>create-db.[sh|bat]</code> script located in the same folder to begin the setup process. You can do this either by double-clicking the script or by running it from within a shell environment. On UNIX/Linux machines, you may first need to set the appropriate file permissions to make the script executable.</p> LinuxWindows CMD <pre><code>chmod u+x create-db.sh\n./create-db.sh\n</code></pre> <pre><code>create-db.bat\n</code></pre> <p>It is also possible to use a different <code>connection-details</code> file from another folder:</p> LinuxWindows CMD <pre><code>./create-db.sh /path/to/connection-details.sh\n</code></pre> <pre><code>create-db.bat C:\\path\\to\\connection-details.bat\n</code></pre> <p>After executing the script, a welcome message along with usage hints will be displayed on the console. The script will prompt the user for several essential parameters required for setting up the 3DCityDB instance. The details of these user inputs are explained in the following steps.</p>","tags":["3dcitydb","setup","bare metal","docker","shell scripts","database scripts","sql scripts","template database"]},{"location":"first-steps/setup/#step-5-specify-the-coordinate-reference-system","title":"Step 5: Specify the coordinate reference system","text":"<p>You are prompted for the coordinate reference system (CRS) to be used for the 3DCityDB instance. Simply enter the PostGIS-specific SRID (Spatial Reference ID) of the CRS. In most cases, the SRID will be identical to the EPSG code of the CRS. There are three parameters that need to be provided in this step:</p> <ul> <li>The SRID to be used with the geometries stored in the database: Only one SRID can be used for the   3DCityDB instance.</li> <li>The EPSG code of the height system: This is considered metadata and does not affect the geometries in the   database. If the above SRID already references a true 3D CRS or if the height system is unknown, enter \"0\"   (meaning \"not available\"). This is also the default value.</li> <li> <p>The OGC-compliant name of the CRS: The CRS name is, for instance, written to CityGML/CityJSON files   when exporting data from the database. The <code>create-db</code> script proposes a URN-encoded name based on your   input, following OGC recommendations. Simply press Enter to accept the proposed value.</p> <pre><code>urn:ogc:def:crs,crs:EPSG::&lt;SRID&gt;[,crs:EPSG::&lt;HEIGHT_EPSG&gt;]\n</code></pre> </li> </ul> <p>Tip</p> <p>The coordinate reference system can be changed at any time after setup using the database function <code>citydb_pkg.change_schema_srid</code>. Refer to the database procedures section for more information.</p>","tags":["3dcitydb","setup","bare metal","docker","shell scripts","database scripts","sql scripts","template database"]},{"location":"first-steps/setup/#step-6-create-changelog-extension","title":"Step 6: Create changelog extension","text":"<p>You can choose whether to create the changelog extension for your 3DCityDB instance. The changelog extension adds a table to the 3DCityDB schema, where insert, delete, and update operations on top-level city objects are tracked. Each changelog entry provides metadata about the affected city object (identifier, envelope, etc.), the database user executing the operation, a reason for the update, and the transaction type. Database triggers are installed to automatically populate the changelog table. As a result, insert, delete, and update operations may take longer when the changelog extension is used.</p> <p>Enter <code>yes</code> or <code>no</code> to decide whether to install the changelog extension. The default value is <code>no</code>, which can be confirmed by simply pressing Enter.</p> <p>Tip</p> <p>The changelog extension can be installed and removed at any time after setup using the shell scripts <code>create-changelog</code> and <code>drop-changelog</code>.</p>","tags":["3dcitydb","setup","bare metal","docker","shell scripts","database scripts","sql scripts","template database"]},{"location":"first-steps/setup/#step-7-execute-the-installation","title":"Step 7: Execute the installation","text":"<p>Finally, enter the password for the database user provided in the <code>connection-details</code> script. Afterward, the setup process will begin, and log messages informing you about the progress will be printed to the console.</p> <p>The setup process will terminate immediately if any errors occur. Possible reasons include:</p> <ul> <li>The user executing <code>create-db</code> is neither a superuser nor the owner of the specified database (or does   not have the privileges to create objects in that database).</li> <li>The PostGIS extension has not been installed.</li> <li>Parts of the 3DCityDB already exist because of a previous setup attempt. To prevent this, ensure that the schemas   <code>citydb</code> and <code>citydb_pkg</code> do not exist in the database before starting the setup process.</li> </ul> <p>If no error message is displayed, the setup has been successfully completed. The figure below shows a summary of the required user input for the <code>create-db</code> script.</p> <p></p> <p>Figure 1. Example user input for the create-db script.</p> <p>Tip</p> <p>In addition to the <code>connection-details</code> and <code>create-db</code> shell scripts for setting up a 3DCityDB instance, the 3DCityDB package includes several other shell and SQL scripts for tasks such as removing a 3DCityDB instance, creating additional schemas, and granting or revoking access permissions. Complete documentation of these database scripts is available here.</p>","tags":["3dcitydb","setup","bare metal","docker","shell scripts","database scripts","sql scripts","template database"]},{"location":"first-steps/setup/#using-template-databases-to-set-up-a-3dcitydb","title":"Using template databases to set up a 3DCityDB","text":"<p>In PostgreSQL, template databases are pre-configured databases that serve as a base for creating new databases. Using a template database during database creation is a common practice. The new database is essentially created as a copy of one of the template databases, with a few modifications (such as the database name). These template databases enable quick database creation by copying an existing structure, schema, and even data.</p> <p>You can also use a 3DCityDB instance as a template database. However, be cautious, as the <code>search_path</code> is not automatically copied from the template database to the new 3DCityDB instance. A correct search path is crucial for accessing data and database functions in the <code>citydb</code> and <code>citydb_pkg</code> schemas. Therefore, you must manually set the search path in your new 3DCityDB instance:</p> <pre><code>ALTER DATABASE new_citydb_v5 SET search_path TO citydb, citydb_pkg, public;\n</code></pre> <p>Info</p> <p>If your 3DCityDB template contains more schemas, ensure to add them all to the <code>search_path</code>. Note that the search path will be updated upon the next login, not within the same session.</p>","tags":["3dcitydb","setup","bare metal","docker","shell scripts","database scripts","sql scripts","template database"]},{"location":"partners/","title":"Partners and contributors","text":"<p>Since 2007, the 3D City Database has been open source, providing a reliable, scalable, and efficient solution for managing CityGML-based city models, widely used in production by cities and municipalities worldwide. The ongoing development is driven by the partners of the 3DCityDB open-source project and its growing community. This section provides background information about the contributors to the 3DCityDB and how they use the software in research and daily business.</p>","tags":["partners","contributors"]},{"location":"partners/#list-of-contributors","title":"List of contributors","text":"<p> Chair of Geoinformatics, Technical University of Munich (TUM) </p> <p>          Arcisstr. 21          80333 Munich, Germany       </p> <p>Contact</p> <p>         Thomas H. Kolbe thomas.kolbe(at)tum.de https://www.asg.ed.tum.de/gis/ </p> <p> Hochschule f\u00fcr Technik Stuttgart (HFT Stuttgart) </p> <p>          Schellingstr. 24          70174 Stuttgart, Germany       </p> <p>Contact</p> <p>         Zhihang Yao zhihang.yao(at)hft-stuttgart.de https://www.hft-stuttgart.com/ </p> <p> LIST Eco GmbH &amp; Co. KG </p> <p>         Vogelsanger Str. 321a         50827 K\u00f6ln-Ehrenfeld, Germany       </p> <p>Contact</p> <p>         Bruno Willenborg (vCard) bruno.willenborg(at)list-eco.de https://www.list-eco.de </p> <p> M.O.S.S. Computer Grafik Systeme GmbH </p> <p>          Hohenbrunner Weg 13/c          82024 Taufkirchen, Germany       </p> <p>Contact</p> <p>         Max Schultze mschultze(at)moss.de https://www.moss.de/ </p> <p> Virtual City Systems </p> <p>          Tauentzienstr. 7b/c          10789 Berlin, Germany       </p> <p>Contact</p> <p>         Claus Nagel cnagel(at)vc.systems https://vc.systems </p> <p>Missing your name and logo?</p> <p>Contact us to get involved as partner in the 3DCityDB open-source project.</p>","tags":["partners","contributors"]},{"location":"partners/#past-contributors","title":"Past contributors","text":"<p>Contributors to previous versions of 3DCityDB and its tools are listed here.</p>","tags":["partners","contributors"]},{"location":"partners/hft-stuttgart/","title":"HFT Stuttgart","text":"<p>The Hochschule f\u00fcr Technik Stuttgart (HFT Stuttgart) is one of the strong research universities of applied sciences in Germany with successful national, European and worldwide research projects. This strength is reflected in its two key research thrusts, which have been officially certified according to the formal criteria established by the German Rectors' Conference (HRK) and included in the HRK\u2019s Research Map</p> <ul> <li>Future-oriented Planning, Constructing and Managing</li> <li>Smart Cities and Urban Development</li> </ul> <p>As a leading university of applied sciences in Digital Twin and Smart City research, HFT Stuttgart collaborates closely with industry, government agencies, and international research institutions to develop innovative technologies that pave the way for the development of modern, sustainable, and smart cities.</p> <p>After Prof. Zhihang Yao took over the professorship at HFT Stuttgart in 2024, HFT Stuttgart officially becomes a new cooperation partner of the 3DCityDB project. HFT Stuttgart will actively contribute to the ongoing development of 3DCityDB and integrate it more extensively into its teaching activities and research projects.</p>"},{"location":"partners/hft-stuttgart/#your-contact-zhihang-yao","title":"Your contact: Zhihang Yao","text":"<p> Prof. Zhihang Yao specializes in 3D geoinformation, spatial data infrastructure, and digital urban modeling. He began his PhD at TUMGI and joined the 3DCityDB team, where he became one of the lead developers and maintainers of the 3DCityDB software, with a particular focus on the 3DCityDB Web Map Client. This tool received the annual award of the joint \"3D City Modeling Commission\" of the German Society for Photogrammetry, Remote Sensing, and Geoinformation (DGPF) and the German Society for Cartography (DGfK) in 2015. His current research focuses on advancing CityGML-based 3D-geodatabases and their applications in urban planning, smart cities, and geospatial analytics.</p> <p> Contact</p>"},{"location":"partners/list-eco/","title":"LIST Eco","text":"<p>LIST Eco GmbH &amp; Co. KG is part of the LIST Group and develops holistic sustainability concepts for EU taxonomy-compliant real estate and future-proof neighborhoods. The company advises investors, property owners, project developers, cities and municipalities on long-term sustainability strategies across all disciplines and life cycles. LIST Eco's specialists use GIS and BIM-based optimization methods to carry out various analyses - from life cycle assessments to circularity assessments. The service portfolio also includes all standard certifications.</p>","tags":["LIST Eco","LIST Gruppe","sustainability concepts","EU taxonomy","certification"]},{"location":"partners/list-eco/#specialist-for-sustainable-cities-and-neighborhoods","title":"Specialist for sustainable cities and neighborhoods","text":"<p>In the field of cities and districts, the 50-strong team specializes in</p> <ul> <li>project-specific ambition workshops</li> <li>Pre-checks and audits for neighborhood certification</li> <li>Support for urban planning competitions</li> <li>Neighborhood climate risk analyses and biodiversity concepts</li> <li>Simulations (energy, flow, etc.) and PV potential analyses</li> <li>Creation of digital twins for city models and GIS data management</li> </ul> <p></p> <p>More about LIST Eco at: list-eco.de</p>","tags":["LIST Eco","LIST Gruppe","sustainability concepts","EU taxonomy","certification"]},{"location":"partners/list-eco/#your-contact-bruno-willenborg","title":"Your contact: Bruno Willenborg","text":"<p> M.Sc. Bruno Willenborg has been working on various simulation and analysis methods at the neighborhood and city level with semantic 3D city models as part of his ongoing doctorate at the Chair of Geoinformatics at the Technical University of Munich. Another thematic focus is data management with open standards for digital twins, smart cities and the Internet of Things. At LIST Eco, Bruno Willenborg is an expert in digital twins, large-scale analysis methods with 3D city models and is responsible for software, cloud, and AI development. For 3DCityDB, he is primarily responsible for cloud development and CI/CD.</p> <p> Contact</p>","tags":["LIST Eco","LIST Gruppe","sustainability concepts","EU taxonomy","certification"]},{"location":"partners/moss/","title":"About M.O.S.S. Computer Grafik Systeme GmbH","text":"<p>M.O.S.S. Computer Grafik Systeme GmbH offers intelligent geo and IT solutions to use geoinformation sustainably and profitably. Solutions from M.O.S.S. allow large data sets to be efficiently built, managed, and used to shape and improve administrative and business processes.</p> <p>As a provider of one-stop solutions, M.O.S.S. offers not only the development and distribution of our software family moGI but also competent consulting, training, and services. Our software developments and services are tailored to the individual needs of our customers. We place the greatest emphasis on optimizing large geo-data volumes of vector, but especially raster data, point clouds, and 3D, as well as their integration into existing IT and process landscapes.</p> <p></p> <p>The professional focus is in the area of public administration (surveying, forestry, and environmental authorities), industry, and renewable energies, in particular wind turbines. The needs of users are met with technically mature and practical specialist applications and the future of solutions is shaped together with active user networks.</p> <p>Customer support is provided through the headquarters in Taufkirchen near Munich and the branch office in Dresden as well as CADMAP Consulting Ingenieurgesellschaft mbH in Essen, a subsidiary of M.O.S.S.</p>","tags":["M.O.S.S."]},{"location":"partners/moss/#3d-citydb-and-mogi","title":"3D CityDB and moGI","text":"<p>Within the previous M.O.S.S. product suite novaFACTORY, the 3D City Database has been used since 2011 as the primary storage container for 3D and CityGML-based data. Consequently, the new software generation moGI continues to incorporate the 3D CityDB, ensuring seamless integration and continuity for users. In M.O.S.S. public administration customer projects, millions of CityGML objects are imported, managed, and exported by moGI and the integrated 3D City Database.</p>","tags":["M.O.S.S."]},{"location":"partners/moss/#mogi-3d-production-and-3d-feature","title":"moGI 3D-Production and 3D-Feature","text":"<p>moGI automates 3D object creation from 2D geometries in the moGI 3D-Production module, using CityGML and 3D CityDB for data management and export in various formats via the 3D-Feature module. It enriches models with additional data and ensures efficient web visualization, supporting AR devices e.g. Microsoft Hololense.</p> <p>3D data enhances analyses like damage prediction and solar potential, improving communication with realistic models. CityGML and 3D CityDB are crucial for standardizing and managing 3D geospatial data, making it easier to integrate and utilize across different platforms and applications. This approach ensures comprehensive and accurate 3D data representation, benefiting various fields from urban planning to environmental monitoring.</p> <p></p>","tags":["M.O.S.S."]},{"location":"partners/tum-gis/","title":"Chair of Geoinformatics, TUM","text":"<p> The Chair of Geoinformatics belongs to the Department of Aerospace and Geodesy within the TUM School of Engineering and Design at the Technical University of Munich. TUM is the highest ranked German university and internationally among the top 30 universities.</p> <p>Research topics of the Chair of Geoinformatics (TUMGIS) cover Urban Digital Twinning and Smart Cities, Semantic 3D City and Landscape Modeling, multi-modal navigation and autonomous driving, spatial data infrastructures, 3D spatial databases and algorithms, AI in geoinformatics. We are active member of the Open Geospatial Consortium and have driven and/or contributed to the creation of the international standards CityGML, IndoorGML, 3D Portrayal Service. A number of current and former members of TUMGIS have contributed or are currently contributing to the development of the 3DCityDB: Zhihang Yao, Kanishk Chaturvedi, Son H. Nguyen, Bruno Willenborg, Murat Kendir, Andreas Donaubauer.</p> <p>Besides the 3DCityDB, TUMGIS also released many more Open Source projects (&gt;130) which can be found on the Github repository of our group: https://github.com/tum-gis.</p>","tags":["TUMGIS","CityGML"]},{"location":"partners/tum-gis/#3dcitydb-usage-in-research-and-education","title":"3DCityDB usage in research and education","text":"<p>The 3DCityDB has always been an important tool within our research activities around semantic 3D city models, CityGML, and spatial databases as well for education. It is employed, for example, in different courses as well as in student projects and theses in our international master's programs</p> <ul> <li>MSc. Geodesy and Geoinformation</li> <li>MSc. Land Management and Geospatial Science</li> <li>MSc. Environmental Engineering</li> <li>MSc. Information Technologies for the Built Environment (ITBE)</li> </ul>","tags":["TUMGIS","CityGML"]},{"location":"partners/tum-gis/#your-contact-thomas-h-kolbe","title":"Your contact: Thomas H. Kolbe","text":"<p> Thomas H. Kolbe is Full Professor and Chair of Geoinformatics at Technical University of Munich, Germany. His interests are in GIScience, specifically in the fields of virtual 3D city, landscape, and building information modelling. Prof. Kolbe is initiator and one of the principal developers of the CityGML standard for urban information modelling and the interoperable exchange of semantic 3D city models in the Open Geospatial Consortium. He has also been architect in the development of the OGC IndoorGML standard for indoor navigation.</p> <p>Prof. Kolbe started and led the development of the 3DCityDB project since his time as PostDoc and senior research assistant at the University of Bonn in the group of Prof. Lutz Pl\u00fcmer back in 2003. Over the many development cycles more partners got on board and now the development of the 3DCityDB is carried out in a collaborative way by the different development partners.</p>","tags":["TUMGIS","CityGML"]},{"location":"partners/vcs/","title":"Virtual City Systems","text":"<p>Since 2005, Virtual City Systems has been developing software solutions for managing, distributing, and utilizing digital 3D city models and urban twins. Our technology enables the efficient processing of geospatial data, supporting cities and municipalities in building holistic digital twins and shaping the future of urban planning.</p> <p>By leveraging digital city models, interactive 3D simulations, and the seamless integration of geospatial data into existing IT and process landscapes, we actively contribute to optimizing urban processes. Our solutions are trusted by cities of all sizes, from smaller municipalities to major cities such as Hamburg, Vienna, Helsinki, and Singapore. Through our involvement in research projects, we continuously drive innovation in urban planning, climate adaptation, and risk analysis.</p>","tags":["VCS","CityGML","VC Map","VC Database","VC Suite","Open Source"]},{"location":"partners/vcs/#3dcitydb-vcs-driving-development-and-application","title":"3DCityDB @ VCS \u2013 Driving Development and Application","text":"<p>Since 2010, VCS has been a key contributor to the 3D City Database (3DCityDB), a milestone for the CityGML community and a core component of our products and services. By continuously advancing and widely applying 3DCityDB and CityGML in customer and research projects, we play a vital role in the global adoption of urban digital twins. Built on 3DCityDB, our VC Database provides a reliable solution for storing and managing CityGML-based 3D city models, ensuring scalable and efficient management of urban data.</p>","tags":["VCS","CityGML","VC Map","VC Database","VC Suite","Open Source"]},{"location":"partners/vcs/#vc-suite-ready-to-twin","title":"VC Suite \u2014 Ready to Twin","text":"<p>The VC Suite is our innovative 3D urban platform solution, designed to build, manage, and leverage 3D city models. It forms the foundation for creating urban digital twins, transforming complex geospatial data into valuable, actionable insights. With tools such as VC Map, VC Publisher, VC Planner, and VC Solar, the VC Suite empowers smart city applications, simulations, and analyses, enabling our customers to make more informed decisions and optimize urban planning.</p> <p>Rooted in our commitment to open standards, interfaces, and APIs, the VC Suite seamlessly integrates with other systems, unlocking data from proprietary silos. Beyond 3DCityDB, we actively contribute to the open-source community. As part of this effort, we have released VC Map as open source \u2014 a high-performance, modern web mapping application that integrates 3D and 2D geospatial data, oblique aerial imagery, panoramic views, sensor data, and urban designs, delivering an immersive digital twin experience accessible to all on the web.</p> <p></p> <p>Figure 1. The Urban Digital Twin of the City Of Bremen, managed with 3DCityDB and visualized in VC Map.</p>","tags":["VCS","CityGML","VC Map","VC Database","VC Suite","Open Source"]},{"location":"partners/vcs/#urban-simulations-data-driven-decision-support","title":"Urban Simulations \u2013 Data-Driven Decision Support","text":"<p>VCS supports simulations for solar potential analysis, flood risk assessment, urban climate studies, and hazard analysis, such as detecting and neutralizing unexploded ordnance. These models provide critical data and insights on environmental impacts and risks, helping planners implement early measures for climate adaptation and risk mitigation. CityGML and 3DCityDB serve as the foundation for these simulations and analyses.</p> <p></p> <p>Figure 2. Urban climate simulations and what-if scenarios, visualized in VC Map.</p>","tags":["VCS","CityGML","VC Map","VC Database","VC Suite","Open Source"]},{"location":"partners/vcs/#your-contact-claus-nagel","title":"Your contact: Claus Nagel","text":"<p> Dr. Claus Nagel is Managing Director of Virtual City Systems and a leading expert in 3D city models and digital twins. He has played a key role in the development of CityGML and the 3D City Database, significantly advancing their worldwide adoption in research, public administration, and industry.</p> <p> </p>","tags":["VCS","CityGML","VC Map","VC Database","VC Suite","Open Source"]}]}